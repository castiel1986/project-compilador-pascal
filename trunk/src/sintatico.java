
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 10 00:32:57 BRT 2011
//----------------------------------------------------

import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 10 00:32:57 BRT 2011
  */
public class sintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\053\002\000\002\002" +
    "\010\000\002\054\002\000\002\003\006\000\002\004\002" +
    "\000\002\055\002\000\002\004\005\000\002\005\007\000" +
    "\002\005\006\000\002\031\002\000\002\056\002\000\002" +
    "\031\005\000\002\032\005\000\002\032\003\000\002\057" +
    "\002\000\002\033\004\000\002\060\002\000\002\033\004" +
    "\000\002\061\002\000\002\034\006\000\002\036\004\000" +
    "\002\062\002\000\002\036\006\000\002\063\002\000\002" +
    "\064\002\000\002\035\007\000\002\065\002\000\002\037" +
    "\007\000\002\066\002\000\002\037\010\000\002\030\003" +
    "\000\002\067\002\000\002\047\005\000\002\070\002\000" +
    "\002\071\002\000\002\040\007\000\002\041\005\000\002" +
    "\041\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\005\000\002\044\006\000\002\045\005\000\002\045\003" +
    "\000\002\006\005\000\002\006\003\000\002\007\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\002\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\072\002\000\002\046\005\000\002\046\003\000" +
    "\002\050\005\000\002\051\005\000\002\051\003\000\002" +
    "\052\003\000\002\052\005\000\002\052\007\000\002\012" +
    "\006\000\002\013\006\000\002\014\002\000\002\014\005" +
    "\000\002\014\003\000\002\015\002\000\002\015\005\000" +
    "\002\015\003\000\002\073\002\000\002\016\006\000\002" +
    "\017\005\000\002\020\005\000\002\020\003\000\002\074" +
    "\002\000\002\021\010\000\002\022\002\000\002\075\002" +
    "\000\002\022\005\000\002\076\002\000\002\077\002\000" +
    "\002\023\010\000\002\100\002\000\002\023\007\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\004\000\002\025\004\000\002\025\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\005\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\013\000\001\002\000\004\002\300\001" +
    "\002\000\004\013\006\001\002\000\004\050\007\001\002" +
    "\000\004\014\010\001\002\000\012\007\ufffe\010\ufffe\032" +
    "\ufffe\036\ufffe\001\002\000\012\007\ufffc\010\ufffc\032\ufffc" +
    "\036\014\001\002\000\004\031\013\001\002\000\004\002" +
    "\uffff\001\002\000\004\050\ufffb\001\002\000\010\007\ufff6" +
    "\010\ufff6\032\ufff7\001\002\000\006\007\ufff2\010\ufff0\001" +
    "\002\000\004\032\020\001\002\000\024\014\uffcf\021\025" +
    "\022\037\023\030\032\022\037\uffcf\043\034\046\033\050" +
    "\036\001\002\000\006\014\ufffd\031\ufffd\001\002\000\024" +
    "\014\uffcf\021\025\022\037\023\030\032\022\037\uffcf\043" +
    "\034\046\033\050\036\001\002\000\012\014\uffc9\034\uffc9" +
    "\037\uffc9\047\uffc9\001\002\000\012\014\uffcc\034\uffcc\037" +
    "\uffcc\047\uffcc\001\002\000\016\015\uffac\020\uffac\027\uffac" +
    "\035\uffac\042\uffac\050\uffac\001\002\000\012\014\uffcd\034" +
    "\uffcd\037\uffcd\047\uffcd\001\002\000\006\014\153\037\165" +
    "\001\002\000\004\015\157\001\002\000\012\014\uffc8\034" +
    "\uffc8\037\uffc8\047\uffc8\001\002\000\012\014\uffce\034\uffce" +
    "\037\uffce\047\uffce\001\002\000\024\014\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\032\uffa9\043\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\001\002\000\016\015\052\020\043\027\045\035\047\042" +
    "\056\050\055\001\002\000\010\014\uffd0\037\uffd0\047\uffd0" +
    "\001\002\000\016\014\uffc5\015\uffc7\017\uffb6\034\uffc5\037" +
    "\uffc5\047\uffc5\001\002\000\004\015\042\001\002\000\012" +
    "\014\uffcb\034\uffcb\037\uffcb\047\uffcb\001\002\000\012\014" +
    "\uffca\034\uffca\037\uffca\047\uffca\001\002\000\022\006\uffbc" +
    "\015\052\016\uffbc\020\043\027\045\035\047\042\056\050" +
    "\055\001\002\000\054\004\uff95\005\uff95\006\uff95\011\uff95" +
    "\012\uff95\014\uff95\016\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\033\uff95\034\uff95\035\uff95\037\uff95\040\uff95" +
    "\041\uff95\044\uff95\045\uff95\047\uff95\001\002\000\046\004" +
    "\113\005\uffa1\006\uffa1\011\112\012\120\014\uffa1\016\uffa1" +
    "\024\115\025\117\026\121\027\116\033\uffa1\034\uffa1\035" +
    "\114\037\uffa1\044\uffa1\045\122\047\uffa1\001\002\000\012" +
    "\015\052\020\043\042\056\050\055\001\002\000\006\006" +
    "\106\016\107\001\002\000\012\015\052\020\043\042\056" +
    "\050\055\001\002\000\054\004\uff94\005\uff94\006\uff94\011" +
    "\uff94\012\uff94\014\uff94\016\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\033\uff94\034\uff94\035\uff94\037\uff94\040" +
    "\uff94\041\uff94\044\uff94\045\uff94\047\uff94\001\002\000\054" +
    "\004\uff97\005\uff97\006\uff97\011\uff97\012\uff97\014\uff97\016" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\033\uff97" +
    "\034\uff97\035\uff97\037\uff97\040\uff97\041\uff97\044\uff97\045" +
    "\uff97\047\uff97\001\002\000\016\015\052\020\043\027\045" +
    "\035\047\042\056\050\055\001\002\000\006\006\uffba\016" +
    "\uffba\001\002\000\054\004\uff9b\005\uff9b\006\uff9b\011\uff9b" +
    "\012\uff9b\014\uff9b\016\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\076\033\uff9b\034\uff9b\035\uff9b\037\uff9b\040\075" +
    "\041\077\044\uff9b\045\uff9b\047\uff9b\001\002\000\056\004" +
    "\uff96\005\uff96\006\uff96\011\uff96\012\uff96\014\uff96\015\uffe1" +
    "\016\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\033" +
    "\uff96\034\uff96\035\uff96\037\uff96\040\uff96\041\uff96\044\uff96" +
    "\045\uff96\047\uff96\001\002\000\012\015\052\020\043\042" +
    "\056\050\055\001\002\000\054\004\uff92\005\uff92\006\uff92" +
    "\011\uff92\012\uff92\014\uff92\016\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\033\uff92\034\uff92\035\uff92\037\uff92" +
    "\040\uff92\041\uff92\044\uff92\045\uff92\047\uff92\001\002\000" +
    "\004\015\062\001\002\000\054\004\uffe0\005\uffe0\006\uffe0" +
    "\011\uffe0\012\uffe0\014\uffe0\016\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\044\uffe0\045\uffe0\047\uffe0\001\002\000" +
    "\016\015\052\020\043\027\045\035\047\042\056\050\055" +
    "\001\002\000\006\006\uffc2\016\uffc2\001\002\000\010\005" +
    "\071\006\uffc1\016\uffc1\001\002\000\006\006\066\016\067" +
    "\001\002\000\054\004\uffc4\005\uffc4\006\uffc4\011\uffc4\012" +
    "\uffc4\014\uffc4\016\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\044\uffc4\045\uffc4\047\uffc4\001\002\000\016\015\052" +
    "\020\043\027\045\035\047\042\056\050\055\001\002\000" +
    "\006\006\uffc3\016\uffc3\001\002\000\016\015\052\020\043" +
    "\027\045\035\047\042\056\050\055\001\002\000\010\005" +
    "\073\006\uffc0\016\uffc0\001\002\000\016\015\052\020\043" +
    "\027\045\035\047\042\056\050\055\001\002\000\006\006" +
    "\uffbf\016\uffbf\001\002\000\012\015\052\020\043\042\056" +
    "\050\055\001\002\000\012\015\052\020\043\042\056\050" +
    "\055\001\002\000\012\015\052\020\043\042\056\050\055" +
    "\001\002\000\054\004\uff98\005\uff98\006\uff98\011\uff98\012" +
    "\uff98\014\uff98\016\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\033\uff98\034\uff98\035\uff98\037\uff98\040\uff98\041" +
    "\uff98\044\uff98\045\uff98\047\uff98\001\002\000\054\004\uff9a" +
    "\005\uff9a\006\uff9a\011\uff9a\012\uff9a\014\uff9a\016\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\037\uff9a\040\uff9a\041\uff9a\044\uff9a\045\uff9a\047" +
    "\uff9a\001\002\000\054\004\uff99\005\uff99\006\uff99\011\uff99" +
    "\012\uff99\014\uff99\016\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\033\uff99\034\uff99\035\uff99\037\uff99\040\uff99" +
    "\041\uff99\044\uff99\045\uff99\047\uff99\001\002\000\004\006" +
    "\104\001\002\000\054\004\uff93\005\uff93\006\uff93\011\uff93" +
    "\012\uff93\014\uff93\016\uff93\024\uff93\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\033\uff93\034\uff93\035\uff93\037\uff93\040\uff93" +
    "\041\uff93\044\uff93\045\uff93\047\uff93\001\002\000\054\004" +
    "\uff9d\005\uff9d\006\uff9d\011\uff9d\012\uff9d\014\uff9d\016\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\076\033\uff9d\034" +
    "\uff9d\035\uff9d\037\uff9d\040\075\041\077\044\uff9d\045\uff9d" +
    "\047\uff9d\001\002\000\012\014\uffbe\034\uffbe\037\uffbe\047" +
    "\uffbe\001\002\000\016\015\052\020\043\027\045\035\047" +
    "\042\056\050\055\001\002\000\006\006\uffbb\016\uffbb\001" +
    "\002\000\054\004\uff9c\005\uff9c\006\uff9c\011\uff9c\012\uff9c" +
    "\014\uff9c\016\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\076\033\uff9c\034\uff9c\035\uff9c\037\uff9c\040\075\041\077" +
    "\044\uff9c\045\uff9c\047\uff9c\001\002\000\016\015\052\020" +
    "\043\027\045\035\047\042\056\050\055\001\002\000\016" +
    "\015\052\020\043\027\045\035\047\042\056\050\055\001" +
    "\002\000\012\015\052\020\043\042\056\050\055\001\002" +
    "\000\016\015\052\020\043\027\045\035\047\042\056\050" +
    "\055\001\002\000\012\015\052\020\043\042\056\050\055" +
    "\001\002\000\016\015\052\020\043\027\045\035\047\042" +
    "\056\050\055\001\002\000\016\015\052\020\043\027\045" +
    "\035\047\042\056\050\055\001\002\000\016\015\052\020" +
    "\043\027\045\035\047\042\056\050\055\001\002\000\012" +
    "\015\052\020\043\042\056\050\055\001\002\000\054\004" +
    "\uff9e\005\uff9e\006\uff9e\011\uff9e\012\uff9e\014\uff9e\016\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\076\033\uff9e\034" +
    "\uff9e\035\uff9e\037\uff9e\040\075\041\077\044\uff9e\045\uff9e" +
    "\047\uff9e\001\002\000\032\005\uffa7\006\uffa7\014\uffa7\016" +
    "\uffa7\027\116\033\uffa7\034\uffa7\035\114\037\uffa7\044\uffa7" +
    "\045\122\047\uffa7\001\002\000\032\005\uffa3\006\uffa3\014" +
    "\uffa3\016\uffa3\027\116\033\uffa3\034\uffa3\035\114\037\uffa3" +
    "\044\uffa3\045\122\047\uffa3\001\002\000\032\005\uffa5\006" +
    "\uffa5\014\uffa5\016\uffa5\027\116\033\uffa5\034\uffa5\035\114" +
    "\037\uffa5\044\uffa5\045\122\047\uffa5\001\002\000\054\004" +
    "\uff9f\005\uff9f\006\uff9f\011\uff9f\012\uff9f\014\uff9f\016\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\076\033\uff9f\034" +
    "\uff9f\035\uff9f\037\uff9f\040\075\041\077\044\uff9f\045\uff9f" +
    "\047\uff9f\001\002\000\032\005\uffa4\006\uffa4\014\uffa4\016" +
    "\uffa4\027\116\033\uffa4\034\uffa4\035\114\037\uffa4\044\uffa4" +
    "\045\122\047\uffa4\001\002\000\054\004\uffa0\005\uffa0\006" +
    "\uffa0\011\uffa0\012\uffa0\014\uffa0\016\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\076\033\uffa0\034\uffa0\035\uffa0\037" +
    "\uffa0\040\075\041\077\044\uffa0\045\uffa0\047\uffa0\001\002" +
    "\000\032\005\uffa6\006\uffa6\014\uffa6\016\uffa6\027\116\033" +
    "\uffa6\034\uffa6\035\114\037\uffa6\044\uffa6\045\122\047\uffa6" +
    "\001\002\000\032\005\uffa2\006\uffa2\014\uffa2\016\uffa2\027" +
    "\116\033\uffa2\034\uffa2\035\114\037\uffa2\044\uffa2\045\122" +
    "\047\uffa2\001\002\000\004\017\137\001\002\000\004\015" +
    "\062\001\002\000\012\014\uffc6\034\uffc6\037\uffc6\047\uffc6" +
    "\001\002\000\016\015\052\020\043\027\045\035\047\042" +
    "\056\050\055\001\002\000\012\014\uffb5\034\uffb5\037\uffb5" +
    "\047\uffb5\001\002\000\004\033\uffb1\001\002\000\004\033" +
    "\143\001\002\000\030\014\uffcf\021\025\022\037\023\030" +
    "\032\022\034\uffcf\037\uffcf\043\034\046\033\047\uffcf\050" +
    "\036\001\002\000\012\014\uffaf\034\145\037\uffaf\047\uffaf" +
    "\001\002\000\030\014\uffae\021\uffae\022\uffae\023\uffae\032" +
    "\uffae\034\uffae\037\uffae\043\uffae\046\uffae\047\uffae\050\uffae" +
    "\001\002\000\012\014\uffb0\034\uffb0\037\uffb0\047\uffb0\001" +
    "\002\000\030\014\uffcf\021\025\022\037\023\030\032\022" +
    "\034\uffcf\037\uffcf\043\034\046\033\047\uffcf\050\036\001" +
    "\002\000\012\014\uffad\034\uffad\037\uffad\047\uffad\001\002" +
    "\000\024\014\uffcf\021\025\022\037\023\030\032\022\043" +
    "\034\046\033\047\uffcf\050\036\001\002\000\006\014\153" +
    "\047\154\001\002\000\026\014\uffcf\021\025\022\037\023" +
    "\030\032\022\037\uffcf\043\034\046\033\047\uffcf\050\036" +
    "\001\002\000\016\015\052\020\043\027\045\035\047\042" +
    "\056\050\055\001\002\000\012\014\uffa8\034\uffa8\037\uffa8" +
    "\047\uffa8\001\002\000\010\014\uffd1\037\uffd1\047\uffd1\001" +
    "\002\000\010\006\uffb9\016\uffb9\050\161\001\002\000\006" +
    "\006\162\016\163\001\002\000\006\006\uffb7\016\uffb7\001" +
    "\002\000\012\014\uffbd\034\uffbd\037\uffbd\047\uffbd\001\002" +
    "\000\004\050\164\001\002\000\006\006\uffb8\016\uffb8\001" +
    "\002\000\006\014\uffd2\031\uffd2\001\002\000\016\015\052" +
    "\020\043\027\045\035\047\042\056\050\055\001\002\000" +
    "\004\044\uffab\001\002\000\004\044\171\001\002\000\030" +
    "\014\uffcf\021\025\022\037\023\030\032\022\034\uffcf\037" +
    "\uffcf\043\034\046\033\047\uffcf\050\036\001\002\000\012" +
    "\014\uffaa\034\uffaa\037\uffaa\047\uffaa\001\002\000\006\014" +
    "\175\037\176\001\002\000\006\014\uffb2\037\uffb2\001\002" +
    "\000\024\014\uffcf\021\025\022\037\023\030\032\022\037" +
    "\uffcf\043\034\046\033\050\036\001\002\000\012\014\uffb4" +
    "\034\uffb4\037\uffb4\047\uffb4\001\002\000\006\014\uffb3\037" +
    "\uffb3\001\002\000\004\014\261\001\002\000\004\014\ufff3" +
    "\001\002\000\004\010\uffe9\001\002\000\004\007\uffee\001" +
    "\002\000\004\014\ufff1\001\002\000\004\007\206\001\002" +
    "\000\004\050\212\001\002\000\004\014\210\001\002\000" +
    "\012\007\ufffe\010\ufffe\032\ufffe\036\ufffe\001\002\000\004" +
    "\014\uffed\001\002\000\006\014\uffec\015\uffeb\001\002\000" +
    "\004\015\214\001\002\000\006\036\uffdf\050\uffdf\001\002" +
    "\000\004\014\uffea\001\002\000\006\036\221\050\225\001" +
    "\002\000\006\006\uffd9\014\uffd9\001\002\000\006\006\uffda" +
    "\014\uffda\001\002\000\004\050\225\001\002\000\006\006" +
    "\uffde\014\232\001\002\000\006\005\226\016\227\001\002" +
    "\000\006\006\uffdb\014\uffdb\001\002\000\006\005\uffd5\016" +
    "\uffd5\001\002\000\004\050\231\001\002\000\004\050\230" +
    "\001\002\000\006\005\uffd6\016\uffd6\001\002\000\006\006" +
    "\uffd8\014\uffd8\001\002\000\006\036\221\050\225\001\002" +
    "\000\004\006\234\001\002\000\006\005\uffdd\014\uffdd\001" +
    "\002\000\006\006\uffdc\014\uffdc\001\002\000\006\005\237" +
    "\016\227\001\002\000\004\050\240\001\002\000\006\006" +
    "\uffd7\014\uffd7\001\002\000\004\010\243\001\002\000\004" +
    "\014\uffef\001\002\000\004\050\250\001\002\000\004\014" +
    "\uffe8\001\002\000\004\014\246\001\002\000\012\007\ufffe" +
    "\010\ufffe\032\ufffe\036\ufffe\001\002\000\004\014\uffe7\001" +
    "\002\000\006\005\uffe6\015\uffe4\001\002\000\004\005\257" +
    "\001\002\000\004\015\214\001\002\000\004\005\254\001" +
    "\002\000\004\050\256\001\002\000\004\014\uffe3\001\002" +
    "\000\004\014\uffe2\001\002\000\004\050\256\001\002\000" +
    "\004\014\uffe5\001\002\000\010\007\ufff2\010\ufff0\032\ufff5" +
    "\001\002\000\004\014\ufff4\001\002\000\004\050\266\001" +
    "\002\000\012\007\ufffa\010\ufffa\032\ufffa\050\266\001\002" +
    "\000\006\005\267\016\270\001\002\000\006\005\uffd3\016" +
    "\uffd3\001\002\000\004\050\272\001\002\000\004\050\271" +
    "\001\002\000\006\005\uffd4\016\uffd4\001\002\000\004\014" +
    "\273\001\002\000\012\007\ufff8\010\ufff8\032\ufff8\050\ufff8" +
    "\001\002\000\006\005\275\016\270\001\002\000\004\050" +
    "\276\001\002\000\004\014\277\001\002\000\012\007\ufff9" +
    "\010\ufff9\032\ufff9\050\ufff9\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\006\002\003\053\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\011\054\010\001\001\000\004\004\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\262" +
    "\001\001\000\006\031\016\056\015\001\001\000\012\032" +
    "\177\033\200\057\202\060\201\001\001\000\004\007\020" +
    "\001\001\000\024\010\026\011\034\012\031\013\025\016" +
    "\037\017\040\021\022\023\030\046\023\001\001\000\002" +
    "\001\001\000\024\011\173\012\031\013\025\016\037\017" +
    "\040\020\172\021\022\023\030\046\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\150\001\001\000" +
    "\014\024\140\025\043\026\053\027\050\047\047\001\001" +
    "\000\002\001\001\000\006\072\134\073\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\045\024\052\025\043\026\053\027\050\047\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\110" +
    "\027\050\047\047\001\001\000\002\001\001\000\010\026" +
    "\104\027\050\047\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\024\102\025\043\026\053\027\050\047" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\057\001\001\000\006\027\056\047\047\001\001\000" +
    "\002\001\001\000\004\050\060\001\001\000\002\001\001" +
    "\000\020\024\063\025\043\026\053\027\050\047\047\051" +
    "\064\052\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\063\025" +
    "\043\026\053\027\050\047\047\052\067\001\001\000\002" +
    "\001\001\000\014\024\071\025\043\026\053\027\050\047" +
    "\047\001\001\000\002\001\001\000\014\024\073\025\043" +
    "\026\053\027\050\047\047\001\001\000\002\001\001\000" +
    "\006\027\101\047\047\001\001\000\006\027\100\047\047" +
    "\001\001\000\006\027\077\047\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\024\107\025\043\026\053\027\050\047\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\132\026" +
    "\053\027\050\047\047\001\001\000\012\025\131\026\053" +
    "\027\050\047\047\001\001\000\010\026\130\027\050\047" +
    "\047\001\001\000\012\025\127\026\053\027\050\047\047" +
    "\001\001\000\010\026\126\027\050\047\047\001\001\000" +
    "\012\025\125\026\053\027\050\047\047\001\001\000\012" +
    "\025\124\026\053\027\050\047\047\001\001\000\012\025" +
    "\123\026\053\027\050\047\047\001\001\000\010\026\122" +
    "\027\050\047\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\135\001\001" +
    "\000\002\001\001\000\014\024\137\025\043\026\053\027" +
    "\050\047\047\001\001\000\002\001\001\000\004\074\141" +
    "\001\001\000\002\001\001\000\022\011\143\012\031\013" +
    "\025\016\037\017\040\021\022\023\030\046\023\001\001" +
    "\000\004\022\145\001\001\000\004\075\146\001\001\000" +
    "\002\001\001\000\022\011\147\012\031\013\025\016\037" +
    "\017\040\021\022\023\030\046\023\001\001\000\002\001" +
    "\001\000\024\010\151\011\034\012\031\013\025\016\037" +
    "\017\040\021\022\023\030\046\023\001\001\000\002\001" +
    "\001\000\022\011\155\012\031\013\025\016\037\017\040" +
    "\021\022\023\030\046\023\001\001\000\014\024\154\025" +
    "\043\026\053\027\050\047\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\024\166\025" +
    "\043\026\053\027\050\047\047\001\001\000\004\077\167" +
    "\001\001\000\002\001\001\000\022\011\171\012\031\013" +
    "\025\016\037\017\040\021\022\023\030\046\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\176\012\031\013\025\016\037\017\040\021\022" +
    "\023\030\046\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\241" +
    "\063\240\001\001\000\006\034\203\061\204\001\001\000" +
    "\002\001\001\000\004\036\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\210\054\010\001\001\000" +
    "\002\001\001\000\004\062\212\001\001\000\004\040\214" +
    "\001\001\000\004\070\215\001\001\000\002\001\001\000" +
    "\014\041\221\042\223\043\217\044\216\045\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\235\001" +
    "\001\000\004\071\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\042\234" +
    "\043\217\044\216\045\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\244\001\001" +
    "\000\002\001\001\000\006\003\246\054\010\001\001\000" +
    "\002\001\001\000\006\065\250\066\251\001\001\000\002" +
    "\001\001\000\004\040\252\001\001\000\002\001\001\000" +
    "\004\030\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\257\001\001\000\002\001\001\000\010\033" +
    "\261\057\202\060\201\001\001\000\002\001\001\000\006" +
    "\005\263\006\264\001\001\000\004\006\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    StringBuilder mepa, saida;
    Erro e;
    int contaVars;
    int numeroEntradas;
    int numeroArgumentos;
    int rotulo;
    int nivel;
    int auxNumParam;
    int pre_rotina;
    Rotulo ultimoRotulo;
    LinkedList<ElemPilhaSem> pilhaSem = new LinkedList<ElemPilhaSem>();
    ArrayList<ElemTabSimb> tabSimbolo = new ArrayList<ElemTabSimb>();
    ElemTabSimb elemTab;
    ElemPilhaSem elemPilha;

    public sintatico(java.io.Reader input, StringBuilder mep, StringBuilder sai, Erro err) {
        super (new lexico (input));
        mepa = mep;
        saida = sai;
        e = err;
        nivel = -1;
    }

    public void report_semantic_error (String message) {
        report_error (message, cur_token);
        done_parsing();
    }

    public void report_error(String message, Object info) {
        Simbolo simb = (Simbolo)info;
        saida.append("ERRO na linha "+simb.getLine()+": "+message);
        e.setaErro (simb.getLine(), simb.getColumn ());
    }

    public void report_fatal_error (String message, Object info) {
        done_parsing();
    }

    public void syntax_error(java_cup.runtime.Symbol current) {
        report_error("Sintatico", current);
    }

    public void eliminaSimbolos(int nivel){

        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb el;
        while(tamanhoTab != -1 && (el = this.tabSimbolo.get(tamanhoTab)).getNivel() == nivel){
            this.tabSimbolo.remove(tamanhoTab);
            tamanhoTab--;
        }
    }

    public void mostraTabSimb(){
        System.out.println("TabelaSimbolos - "+tabSimbolo.toString()+"\n");
    }

    public void mostraPilhaSem(){
        System.out.println("PilhaSemantica - "+pilhaSem.toString()+"\n");
    }

    public ElemTabSimb buscaSimbolo(String id){
        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb e = null;

        while(tamanhoTab != -1 && !((e = tabSimbolo.get(tamanhoTab)).getNome().equals(id))){
            tamanhoTab--;
        }

        if(tamanhoTab == -1){
            return null;
        }
  
        return e;
    }

    public void cabecalhoFuncao(){
        //Criar uma funcao para tratar cabecalho da funcao
        //Obter tipo da funcao
        Tipo tipo = (Tipo) pilhaSem.pollLast();

        //Obter parametros caso tenha
        Funcao func = new Funcao(rotulo, tipo, -3-numeroEntradas);
        if(numeroEntradas > 0){
            ListIterator it = pilhaSem.listIterator(pilhaSem.size() - numeroEntradas);
            while(it.hasNext()){
                func.addParametro((Parametro)it.next());
                it.remove();
            }
        }
        elemTab = (ElemTabSimb) pilhaSem.pollLast();
        elemTab.setInfoC(func);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintatico$actions {
  private final sintatico parser;

  /** Constructor */
  CUP$sintatico$actions(sintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintatico$do_action(
    int                        CUP$sintatico$act_num,
    java_cup.runtime.lr_parser CUP$sintatico$parser,
    java.util.Stack            CUP$sintatico$stack,
    int                        CUP$sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintatico$result;

      /* select the action based on the action number */
      switch (CUP$sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // fator ::= S_NOT fator 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tNEGA\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // fator ::= S_ABREPAR expressao S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // fator ::= chamada_funcao 
            {
              Object RESULT =null;
		
        parser.pre_rotina = 0;
        parser.numeroArgumentos = 0;
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
        Funcao func = (Funcao) parser.elemTab.getInfoC();
        parser.mepa.append ("\tCHPR\t"+"L"+func.getRotulo()+"\n");
     
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // fator ::= S_NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		 
        parser.mepa.append ("\tCRCT\t"+numero+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // fator ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }else{
            if(parser.pre_rotina == 1){
                Parametro p = null;
                ElemTabSimb el = (ElemTabSimb) parser.pilhaSem.peekLast();
                if(el.getInfoC() instanceof Procedimento){
                    Procedimento proc = (Procedimento) el.getInfoC();
                    p = proc.getParametro(parser.numeroArgumentos);
                }else{
                    Funcao func = (Funcao) el.getInfoC();
                    p = func.getParametro(parser.numeroArgumentos);
                }
                if(p.getMec() == Mecanismo.PAS_END){
                    parser.mepa.append ("\tCREN\t"+parser.elemTab.getNivel()+","+((Variavel) parser.elemTab.getInfoC()).getDeslocamento()+"\n");
                }else{
                    parser.mepa.append ("\tCRVL\t"+parser.elemTab.getNivel()+","+((Variavel) parser.elemTab.getInfoC()).getDeslocamento()+"\n");
                }
            }else{
                parser.mepa.append ("\tCRVL\t"+parser.elemTab.getNivel()+","+((Variavel) parser.elemTab.getInfoC()).getDeslocamento()+"\n");
            }
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // termo ::= fator 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // termo ::= termo S_AND fator 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCONJ\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // termo ::= termo S_DIV fator 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tDIVI\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // termo ::= termo S_VEZES fator 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tMULT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expressao_simples ::= termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expressao_simples ::= S_MENOS termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tINVR\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expressao_simples ::= S_MAIS termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expressao_simples ::= expressao_simples S_OR termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tDISJ\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expressao_simples ::= expressao_simples S_MENOS termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tSUBT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expressao_simples ::= expressao_simples S_MAIS termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tSOMA\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expressao ::= expressao_simples 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expressao ::= expressao_simples S_MAIGUAL expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMAG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expressao ::= expressao_simples S_MEIGUAL expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMEG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expressao ::= expressao_simples S_MAIOR expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMMA\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expressao ::= expressao_simples S_MENOR expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMME\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expressao ::= expressao_simples S_DIFERENTE expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMDG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expressao ::= expressao_simples S_IGUAL expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMIG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // repetitivo ::= S_REPEAT NT$21 sequencia_comandos S_UNTIL expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.ultimoRotulo = (Rotulo) parser.pilhaSem.pollLast();
        parser.mepa.append ("\tDSVF\tL"+parser.ultimoRotulo.getRotulo()+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$21 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("L"+parser.rotulo+":\tNADA\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$21",62, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // repetitivo ::= S_WHILE NT$19 expressao NT$20 S_DO comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.ultimoRotulo = (Rotulo) parser.pilhaSem.pollLast();
        parser.elemPilha = parser.pilhaSem.pollLast();
        parser.mepa.append ("\tDSVS\tL"+((Rotulo)parser.elemPilha).getRotulo()+"\n");
        parser.mepa.append ("L"+parser.ultimoRotulo.getRotulo()+":\tNADA\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.rotulo++;
        parser.mepa.append ("\tDSVF\tL"+parser.rotulo+"\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$20",61, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$19 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("L"+parser.rotulo+":\tNADA\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$19",60, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // alternativa_cond ::= S_ELSE NT$18 comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",16, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$18 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("\tDSVS\tL"+parser.rotulo+"\n");
        parser.elemPilha = parser.pilhaSem.pollLast();
        parser.mepa.append ("L"+((Rotulo)parser.elemPilha).getRotulo()+":\tNADA\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$18",59, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // alternativa_cond ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",16, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicional ::= S_IF expressao NT$17 S_THEN comando_sem_rotulo alternativa_cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.elemPilha = parser.pilhaSem.pollLast();
        parser.mepa.append ("L"+((Rotulo)parser.elemPilha).getRotulo()+":\tNADA\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("condicional",15, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$17 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("\tDSVF\tL"+parser.rotulo+"\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$17",58, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_comandos_sem_rotulo ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_comandos_sem_rotulo ::= lista_comandos_sem_rotulo S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // composto ::= S_BEGIN lista_comandos_sem_rotulo S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("composto",13, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // atribuicao ::= S_IDENTIF NT$16 S_ATRIBUI expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
        InfoComplementar infoC = parser.elemTab.getInfoC();
        if( infoC instanceof Parametro){
            if(((Parametro)infoC).getMec() == Mecanismo.PAS_END){
                parser.mepa.append ("\tARMI\t"+ parser.elemTab.getNivel()+","+((Parametro)infoC).getDeslocamento()+"\n");
            }else{
                parser.mepa.append ("\tARMZ\t"+ parser.elemTab.getNivel()+","+((Parametro)infoC).getDeslocamento()+"\n");
            }
        }else if(infoC instanceof Variavel){
            parser.mepa.append ("\tARMZ\t"+parser.elemTab.getNivel()+","+((Variavel)infoC).getDeslocamento()+"\n");
        }else{
            parser.mepa.append ("\tARMZ\t"+(parser.elemTab.getNivel()+1)+","+((Funcao)infoC).getDeslocamento()+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("atribuicao",12, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$16 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$16",57, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_de_variaveis ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }
        else{
            parser.mepa.append ("\tLEIT\n");
            parser.mepa.append ("\tARMZ\t"+parser.elemTab.getNivel()+","+((Variavel)parser.elemTab.getInfoC()).getDeslocamento()+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lista_de_variaveis ::= lista_de_variaveis S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }
        else {
            parser.mepa.append ("\tLEIT\n");
            parser.mepa.append ("\tARMZ\t"+parser.elemTab.getNivel()+","+((Variavel)parser.elemTab.getInfoC()).getDeslocamento()+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lista_de_variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lista_de_expressoes ::= expressao 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tIMPR\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",10, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_de_expressoes ::= lista_de_expressoes S_VIRGULA expressao 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tIMPR\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",10, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_de_expressoes ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",10, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // chamada_comando_leitura ::= S_READ S_ABREPAR lista_de_variaveis S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_leitura",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // chamada_comando_escrita ::= S_WRITE S_ABREPAR lista_de_expressoes S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_escrita",8, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_atuais ::= expressao S_DOISPTOS expressao S_DOISPTOS expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_atuais ::= expressao S_DOISPTOS expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_atuais ::= expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_de_parametros_atuais ::= parametros_atuais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",39, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_de_parametros_atuais ::= lista_de_parametros_atuais S_VIRGULA parametros_atuais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",39, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros ::= S_ABREPAR lista_de_parametros_atuais S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // chamada_procedimento ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Procedimento <"+id+"> não declarado!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
            parser.pre_rotina = 1;
            parser.numeroArgumentos = 0;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // chamada_procedimento ::= S_IDENTIF NT$15 parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$15 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Procedimento <"+id+"> não declarado!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
            parser.pre_rotina = 1;
            parser.numeroArgumentos = 0;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$15",56, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comando_sem_rotulo ::= repetitivo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comando_sem_rotulo ::= condicional 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comando_sem_rotulo ::= composto 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comando_sem_rotulo ::= atribuicao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comando_sem_rotulo ::= chamada_procedimento 
            {
              Object RESULT =null;
		
            parser.pre_rotina = 0;
            parser.numeroArgumentos = 0;
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
            Procedimento proc = (Procedimento) parser.elemTab.getInfoC();
            parser.mepa.append ("\tCHPR\t"+"L"+proc.getRotulo()+"\n");
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comando_sem_rotulo ::= chamada_comando_leitura 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comando_sem_rotulo ::= chamada_comando_escrita 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comando_sem_rotulo ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sequencia_comandos ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",6, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sequencia_comandos ::= sequencia_comandos S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",6, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // corpo ::= S_BEGIN sequencia_comandos S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("corpo",5, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_de_identificadores ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.elemTab.setInfoC(new Variavel(parser.contaVars));
            parser.tabSimbolo.add(parser.elemTab);
            parser.contaVars++;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_de_identificadores ::= lista_de_identificadores S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.elemTab.setInfoC(new Variavel(parser.contaVars));
            parser.tabSimbolo.add(parser.elemTab);
            parser.contaVars++;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_de_parametros ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.numeroEntradas++;
            parser.elemTab.setInfoC(new Parametro());
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_de_parametros ::= lista_de_parametros S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.numeroEntradas++;
            parser.elemTab.setInfoC(new Parametro());
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametro_por_referencia ::= S_VAR lista_de_parametros S_DOISPTOS S_IDENTIF 
            {
              Object RESULT =null;
		
        //auxNumParam - Controlar o numero de parametros
        parser.auxNumParam = parser.numeroEntradas - parser.auxNumParam;
        Parametro p;
        LinkedList <Parametro> param = new LinkedList<Parametro>();

        int i;
        //Retirar da pilha semântica e setar o tipo de macanismo e tipo do parametro
        //Usar uma pilha auxiliar
        for( i = parser.auxNumParam; i > 0; i--){
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();               
            p = (Parametro) parser.elemTab.getInfoC();
            p.setMec(Mecanismo.PAS_END);
            p.setTipo(Tipo.INTEGER);
            param.add(p);
        }

        //Adicionar os parametros novamente
        for( i = parser.auxNumParam; i > 0; i--){
            parser.pilhaSem.add(param.pollLast());
        }

        parser.auxNumParam = parser.numeroEntradas;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_referencia",34, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro_por_valor ::= lista_de_parametros S_DOISPTOS S_IDENTIF 
            {
              Object RESULT =null;
		
        //auxNumParam - Controlar o numero de parametros
        parser.auxNumParam = parser.numeroEntradas - parser.auxNumParam;
        Parametro p;
        LinkedList <Parametro> param = new LinkedList<Parametro>();

        int i;
        //Retirar da pilha semântica e setar o tipo de macanismo e tipo do parametro
        //Usar uma pilha auxiliar
        for( i = parser.auxNumParam; i > 0; i--){
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();               
            p = (Parametro) parser.elemTab.getInfoC();
            p.setMec(Mecanismo.PAS_VAL);
            p.setTipo(Tipo.INTEGER);
            param.add(p);
        }

        //Adicionar os parametros novamente
        for( i = parser.auxNumParam; i > 0; i--){
            parser.pilhaSem.add(param.pollLast());
        }

        parser.auxNumParam = parser.numeroEntradas;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_valor",33, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // secao_de_parametros_formais ::= parametro_por_referencia 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",32, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // secao_de_parametros_formais ::= parametro_por_valor 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",32, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // secao_lista_de_parametros_formais ::= secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // secao_lista_de_parametros_formais ::= secao_lista_de_parametros_formais S_PONTOVG secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_formal_de_parametros ::= S_ABREPAR NT$13 secao_lista_de_parametros_formais NT$14 S_FECHAPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        int i;
        Parametro p;
        LinkedList<Parametro> param = new LinkedList<Parametro>();

        //Setar deslocamento para os parametros
        for(i = parser.numeroEntradas; i > 0; i--){            
            p = (Parametro) parser.pilhaSem.pollLast();
            p.setDeslocamento(-3-(parser.numeroEntradas-i));
            param.add(p);
        }

        //Adicionar os parametros novamente
        for( i = parser.numeroEntradas; i > 0; i--){
            parser.pilhaSem.add(param.pollLast());
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_formal_de_parametros",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.nivel--;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$14",55, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$13 ::= 
            {
              Object RESULT =null;

        parser.nivel++;
        parser.numeroEntradas = 0;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$13",54, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // chamada_funcao ::= S_IDENTIF NT$12 parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_funcao",37, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Função <"+id+"> não declarada!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
            parser.pre_rotina = 1;
            parser.numeroArgumentos = 0;
            parser.mepa.append ("\tAMEM\t"+1+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_de_retorno ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        //Buscar tipo na tabela de simbolos
        parser.pilhaSem.add(Tipo.INTEGER);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_de_retorno",22, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cabecalho_funcao ::= S_FUNCTION S_IDENTIF NT$11 lista_formal_de_parametros S_DOISPTOS tipo_de_retorno 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_funcao",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$11 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cabecalho_funcao ::= S_FUNCTION S_IDENTIF NT$10 S_DOISPTOS tipo_de_retorno 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_funcao",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracao_de_funcao ::= NT$8 cabecalho_funcao NT$9 S_PONTOVG bloco 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.mepa.append ("\tRTPR\t"+(parser.nivel+1)+", "+parser.numeroEntradas+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao",27, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.cabecalhoFuncao();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$8 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("L"+parser.rotulo+":\tENPR\t"+(parser.nivel+1)+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF NT$7 lista_formal_de_parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        if(parser.numeroEntradas > 0){
            parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
            parser.elemTab = parser.tabSimbolo.get(parser.tabSimbolo.indexOf(parser.elemTab));
            ListIterator it = parser.pilhaSem.listIterator(parser.pilhaSem.size() - parser.numeroEntradas);
            Procedimento proc = new Procedimento(parser.rotulo);
            while(it.hasNext()){
                proc.addParametro((Parametro)it.next());
                it.remove();
            }
            parser.elemTab.setInfoC(proc);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        Procedimento proc = new Procedimento(parser.rotulo);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.elemTab.setInfoC(proc);
            parser.tabSimbolo.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        Procedimento proc = new Procedimento(parser.rotulo);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.elemTab.setInfoC(proc);
            parser.tabSimbolo.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracao_de_procedimento ::= NT$6 cabecalho_procedimento S_PONTOVG bloco 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.mepa.append ("\tRTPR\t"+(parser.nivel+1)+", "+parser.numeroEntradas+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_procedimento",26, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$6 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("L"+parser.rotulo+":\tENPR\t"+(parser.nivel+1)+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracao_de_funcao_ou_procedimento ::= NT$5 declaracao_de_funcao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao_ou_procedimento",25, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$5 ::= 
            {
              Object RESULT =null;

            parser.rotulo++;
            parser.auxNumParam = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracao_de_funcao_ou_procedimento ::= NT$4 declaracao_de_procedimento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao_ou_procedimento",25, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =null;

            parser.rotulo++;
            parser.auxNumParam = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_de_declaracao_de_funcao_ou_procedimento ::= declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",24, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_de_declaracao_de_funcao_ou_procedimento ::= lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",24, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracao_de_funcoes_e_procendimentos ::= NT$3 lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.elemPilha = parser.pilhaSem.pollLast();
        if(parser.elemPilha instanceof Rotulo){
          parser.mepa.append ("L"+((Rotulo)parser.elemPilha).getRotulo()+":\tNADA\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",23, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("\tDSVS\tL"+parser.rotulo+"\n");
        parser.pilhaSem.add(new Rotulo(parser.rotulo));
      
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracao_de_funcoes_e_procendimentos ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",23, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracoes_de_vars ::= lista_de_identificadores S_DOISPTOS S_IDENTIF S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracoes_de_vars ::= declaracoes_de_vars lista_de_identificadores S_DOISPTOS S_IDENTIF S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variaveis ::= S_VAR NT$2 declaracoes_de_vars 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        if(parser.contaVars > 0){
            parser.mepa.append ("\tAMEM\t"+parser.contaVars+"\n");
            parser.elemPilha = new VariaveisDeclaradas(parser.contaVars);
            parser.pilhaSem.add(parser.elemPilha);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.contaVars = 0; 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloco ::= NT$1 variaveis declaracao_de_funcoes_e_procendimentos corpo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		  
        if(parser.pilhaSem.peekLast() instanceof VariaveisDeclaradas){
            parser.elemPilha = parser.pilhaSem.pollLast();
            parser.mepa.append("\tDMEM\t"+((VariaveisDeclaradas)parser.elemPilha).getQuantidade()+"\n");
        }
        parser.eliminaSimbolos(parser.nivel);
        parser.nivel--;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 
        parser.nivel++; 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 S_PROGRAM S_IDENTIF S_PONTOVG bloco S_PONTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)).value;
		 
    parser.mepa.append ("\tPARA\n\tFIM\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("\tINPP\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		RESULT = start_val;
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintatico$parser.done_parsing();
          return CUP$sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

