
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 08 22:27:00 BRT 2011
//----------------------------------------------------

import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 08 22:27:00 BRT 2011
  */
public class sintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\047\002\000\002\002" +
    "\010\000\002\050\002\000\002\003\006\000\002\004\002" +
    "\000\002\051\002\000\002\004\005\000\002\005\007\000" +
    "\002\005\006\000\002\030\002\000\002\052\002\000\002" +
    "\030\005\000\002\031\005\000\002\031\003\000\002\053" +
    "\002\000\002\032\004\000\002\054\002\000\002\033\006" +
    "\000\002\034\004\000\002\055\002\000\002\034\006\000" +
    "\002\056\002\000\002\057\002\000\002\035\007\000\002" +
    "\036\005\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\005\000\002\041\006\000\002\042\005" +
    "\000\002\042\003\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\010\005\000\002\010\003\000\002" +
    "\011\002\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\060\002\000\002\043\005\000" +
    "\002\043\003\000\002\044\005\000\002\045\005\000\002" +
    "\045\003\000\002\046\003\000\002\046\005\000\002\046" +
    "\007\000\002\012\006\000\002\013\006\000\002\014\002" +
    "\000\002\014\005\000\002\014\003\000\002\015\002\000" +
    "\002\015\005\000\002\015\003\000\002\061\002\000\002" +
    "\016\006\000\002\017\005\000\002\020\005\000\002\020" +
    "\003\000\002\062\002\000\002\021\010\000\002\022\002" +
    "\000\002\063\002\000\002\022\005\000\002\064\002\000" +
    "\002\065\002\000\002\023\010\000\002\066\002\000\002" +
    "\023\007\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\004\000\002\025\004\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\005\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\012\000\001\002\000\004\002\254\001" +
    "\002\000\004\012\006\001\002\000\004\047\007\001\002" +
    "\000\004\013\010\001\002\000\010\007\ufffe\031\ufffe\035" +
    "\ufffe\001\002\000\010\007\ufffc\031\ufffc\035\014\001\002" +
    "\000\004\030\013\001\002\000\004\002\uffff\001\002\000" +
    "\004\047\ufffb\001\002\000\006\007\ufff6\031\ufff7\001\002" +
    "\000\004\007\ufff2\001\002\000\004\031\020\001\002\000" +
    "\024\013\uffdb\020\025\021\037\022\030\031\022\036\uffdb" +
    "\042\033\045\034\047\036\001\002\000\006\013\ufffd\030" +
    "\ufffd\001\002\000\024\013\uffdb\020\025\021\037\022\030" +
    "\031\022\036\uffdb\042\033\045\034\047\036\001\002\000" +
    "\012\013\uffd5\033\uffd5\036\uffd5\046\uffd5\001\002\000\012" +
    "\013\uffd8\033\uffd8\036\uffd8\046\uffd8\001\002\000\016\014" +
    "\uffb8\017\uffb8\026\uffb8\034\uffb8\041\uffb8\047\uffb8\001\002" +
    "\000\006\013\140\036\162\001\002\000\012\013\uffd9\033" +
    "\uffd9\036\uffd9\046\uffd9\001\002\000\004\014\154\001\002" +
    "\000\012\013\uffd4\033\uffd4\036\uffd4\046\uffd4\001\002\000" +
    "\012\013\uffda\033\uffda\036\uffda\046\uffda\001\002\000\016" +
    "\014\051\017\043\026\045\034\047\041\055\047\054\001" +
    "\002\000\024\013\uffb5\020\uffb5\021\uffb5\022\uffb5\031\uffb5" +
    "\042\uffb5\045\uffb5\046\uffb5\047\uffb5\001\002\000\010\013" +
    "\uffdc\036\uffdc\046\uffdc\001\002\000\016\013\uffd1\014\uffd3" +
    "\016\uffc2\033\uffd1\036\uffd1\046\uffd1\001\002\000\004\014" +
    "\042\001\002\000\012\013\uffd7\033\uffd7\036\uffd7\046\uffd7" +
    "\001\002\000\012\013\uffd6\033\uffd6\036\uffd6\046\uffd6\001" +
    "\002\000\022\006\uffc8\014\051\015\uffc8\017\043\026\045" +
    "\034\047\041\055\047\054\001\002\000\054\004\uffa1\005" +
    "\uffa1\006\uffa1\010\uffa1\011\uffa1\013\uffa1\015\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\043\uffa1\044\uffa1\046\uffa1" +
    "\001\002\000\046\004\075\005\uffad\006\uffad\010\074\011" +
    "\102\013\uffad\015\uffad\023\100\024\101\025\103\026\077" +
    "\032\uffad\033\uffad\034\076\036\uffad\043\uffad\044\104\046" +
    "\uffad\001\002\000\012\014\051\017\043\041\055\047\054" +
    "\001\002\000\006\006\070\015\071\001\002\000\012\014" +
    "\051\017\043\041\055\047\054\001\002\000\054\004\uffa3" +
    "\005\uffa3\006\uffa3\010\uffa3\011\uffa3\013\uffa3\015\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\036\uffa3\037\uffa3\040\uffa3\043\uffa3\044\uffa3\046" +
    "\uffa3\001\002\000\016\014\051\017\043\026\045\034\047" +
    "\041\055\047\054\001\002\000\006\006\uffc6\015\uffc6\001" +
    "\002\000\054\004\uffa7\005\uffa7\006\uffa7\010\uffa7\011\uffa7" +
    "\013\uffa7\015\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\060\032\uffa7\033\uffa7\034\uffa7\036\uffa7\037\057\040\061" +
    "\043\uffa7\044\uffa7\046\uffa7\001\002\000\054\004\uffa2\005" +
    "\uffa2\006\uffa2\010\uffa2\011\uffa2\013\uffa2\015\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\027\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\043\uffa2\044\uffa2\046\uffa2" +
    "\001\002\000\012\014\051\017\043\041\055\047\054\001" +
    "\002\000\054\004\uff9f\005\uff9f\006\uff9f\010\uff9f\011\uff9f" +
    "\013\uff9f\015\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\032\uff9f\033\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\043\uff9f\044\uff9f\046\uff9f\001\002\000\012\014\051\017" +
    "\043\041\055\047\054\001\002\000\012\014\051\017\043" +
    "\041\055\047\054\001\002\000\012\014\051\017\043\041" +
    "\055\047\054\001\002\000\054\004\uffa4\005\uffa4\006\uffa4" +
    "\010\uffa4\011\uffa4\013\uffa4\015\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\043\uffa4\044\uffa4\046\uffa4\001\002\000" +
    "\054\004\uffa6\005\uffa6\006\uffa6\010\uffa6\011\uffa6\013\uffa6" +
    "\015\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6\040\uffa6\043\uffa6" +
    "\044\uffa6\046\uffa6\001\002\000\054\004\uffa5\005\uffa5\006" +
    "\uffa5\010\uffa5\011\uffa5\013\uffa5\015\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\032\uffa5\033\uffa5\034\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\043\uffa5\044\uffa5\046\uffa5\001\002" +
    "\000\004\006\066\001\002\000\054\004\uffa0\005\uffa0\006" +
    "\uffa0\010\uffa0\011\uffa0\013\uffa0\015\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\032\uffa0\033\uffa0\034\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\043\uffa0\044\uffa0\046\uffa0\001\002" +
    "\000\054\004\uffa9\005\uffa9\006\uffa9\010\uffa9\011\uffa9\013" +
    "\uffa9\015\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\060" +
    "\032\uffa9\033\uffa9\034\uffa9\036\uffa9\037\057\040\061\043" +
    "\uffa9\044\uffa9\046\uffa9\001\002\000\012\013\uffca\033\uffca" +
    "\036\uffca\046\uffca\001\002\000\016\014\051\017\043\026" +
    "\045\034\047\041\055\047\054\001\002\000\006\006\uffc7" +
    "\015\uffc7\001\002\000\054\004\uffa8\005\uffa8\006\uffa8\010" +
    "\uffa8\011\uffa8\013\uffa8\015\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\060\032\uffa8\033\uffa8\034\uffa8\036\uffa8\037" +
    "\057\040\061\043\uffa8\044\uffa8\046\uffa8\001\002\000\016" +
    "\014\051\017\043\026\045\034\047\041\055\047\054\001" +
    "\002\000\016\014\051\017\043\026\045\034\047\041\055" +
    "\047\054\001\002\000\012\014\051\017\043\041\055\047" +
    "\054\001\002\000\012\014\051\017\043\041\055\047\054" +
    "\001\002\000\016\014\051\017\043\026\045\034\047\041" +
    "\055\047\054\001\002\000\016\014\051\017\043\026\045" +
    "\034\047\041\055\047\054\001\002\000\016\014\051\017" +
    "\043\026\045\034\047\041\055\047\054\001\002\000\016" +
    "\014\051\017\043\026\045\034\047\041\055\047\054\001" +
    "\002\000\012\014\051\017\043\041\055\047\054\001\002" +
    "\000\054\004\uffaa\005\uffaa\006\uffaa\010\uffaa\011\uffaa\013" +
    "\uffaa\015\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\060" +
    "\032\uffaa\033\uffaa\034\uffaa\036\uffaa\037\057\040\061\043" +
    "\uffaa\044\uffaa\046\uffaa\001\002\000\032\005\uffb3\006\uffb3" +
    "\013\uffb3\015\uffb3\026\077\032\uffb3\033\uffb3\034\076\036" +
    "\uffb3\043\uffb3\044\104\046\uffb3\001\002\000\032\005\uffaf" +
    "\006\uffaf\013\uffaf\015\uffaf\026\077\032\uffaf\033\uffaf\034" +
    "\076\036\uffaf\043\uffaf\044\104\046\uffaf\001\002\000\032" +
    "\005\uffb1\006\uffb1\013\uffb1\015\uffb1\026\077\032\uffb1\033" +
    "\uffb1\034\076\036\uffb1\043\uffb1\044\104\046\uffb1\001\002" +
    "\000\032\005\uffb0\006\uffb0\013\uffb0\015\uffb0\026\077\032" +
    "\uffb0\033\uffb0\034\076\036\uffb0\043\uffb0\044\104\046\uffb0" +
    "\001\002\000\054\004\uffab\005\uffab\006\uffab\010\uffab\011" +
    "\uffab\013\uffab\015\uffab\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\060\032\uffab\033\uffab\034\uffab\036\uffab\037\057\040" +
    "\061\043\uffab\044\uffab\046\uffab\001\002\000\054\004\uffac" +
    "\005\uffac\006\uffac\010\uffac\011\uffac\013\uffac\015\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\060\032\uffac\033\uffac" +
    "\034\uffac\036\uffac\037\057\040\061\043\uffac\044\uffac\046" +
    "\uffac\001\002\000\032\005\uffb2\006\uffb2\013\uffb2\015\uffb2" +
    "\026\077\032\uffb2\033\uffb2\034\076\036\uffb2\043\uffb2\044" +
    "\104\046\uffb2\001\002\000\032\005\uffae\006\uffae\013\uffae" +
    "\015\uffae\026\077\032\uffae\033\uffae\034\076\036\uffae\043" +
    "\uffae\044\104\046\uffae\001\002\000\004\016\134\001\002" +
    "\000\004\014\121\001\002\000\012\013\uffd2\033\uffd2\036" +
    "\uffd2\046\uffd2\001\002\000\016\014\051\017\043\026\045" +
    "\034\047\041\055\047\054\001\002\000\006\006\uffce\015" +
    "\uffce\001\002\000\010\005\130\006\uffcd\015\uffcd\001\002" +
    "\000\006\006\125\015\126\001\002\000\012\013\uffd0\033" +
    "\uffd0\036\uffd0\046\uffd0\001\002\000\016\014\051\017\043" +
    "\026\045\034\047\041\055\047\054\001\002\000\006\006" +
    "\uffcf\015\uffcf\001\002\000\016\014\051\017\043\026\045" +
    "\034\047\041\055\047\054\001\002\000\010\005\132\006" +
    "\uffcc\015\uffcc\001\002\000\016\014\051\017\043\026\045" +
    "\034\047\041\055\047\054\001\002\000\006\006\uffcb\015" +
    "\uffcb\001\002\000\016\014\051\017\043\026\045\034\047" +
    "\041\055\047\054\001\002\000\012\013\uffc1\033\uffc1\036" +
    "\uffc1\046\uffc1\001\002\000\024\013\uffdb\020\025\021\037" +
    "\022\030\031\022\042\033\045\034\046\uffdb\047\036\001" +
    "\002\000\006\013\140\046\141\001\002\000\026\013\uffdb" +
    "\020\025\021\037\022\030\031\022\036\uffdb\042\033\045" +
    "\034\046\uffdb\047\036\001\002\000\016\014\051\017\043" +
    "\026\045\034\047\041\055\047\054\001\002\000\012\013" +
    "\uffb4\033\uffb4\036\uffb4\046\uffb4\001\002\000\010\013\uffdd" +
    "\036\uffdd\046\uffdd\001\002\000\004\032\uffbd\001\002\000" +
    "\004\032\146\001\002\000\030\013\uffdb\020\025\021\037" +
    "\022\030\031\022\033\uffdb\036\uffdb\042\033\045\034\046" +
    "\uffdb\047\036\001\002\000\012\013\uffbb\033\150\036\uffbb" +
    "\046\uffbb\001\002\000\030\013\uffba\020\uffba\021\uffba\022" +
    "\uffba\031\uffba\033\uffba\036\uffba\042\uffba\045\uffba\046\uffba" +
    "\047\uffba\001\002\000\012\013\uffbc\033\uffbc\036\uffbc\046" +
    "\uffbc\001\002\000\030\013\uffdb\020\025\021\037\022\030" +
    "\031\022\033\uffdb\036\uffdb\042\033\045\034\046\uffdb\047" +
    "\036\001\002\000\012\013\uffb9\033\uffb9\036\uffb9\046\uffb9" +
    "\001\002\000\010\006\uffc5\015\uffc5\047\156\001\002\000" +
    "\006\006\157\015\160\001\002\000\006\006\uffc3\015\uffc3" +
    "\001\002\000\012\013\uffc9\033\uffc9\036\uffc9\046\uffc9\001" +
    "\002\000\004\047\161\001\002\000\006\006\uffc4\015\uffc4" +
    "\001\002\000\006\013\uffde\030\uffde\001\002\000\016\014" +
    "\051\017\043\026\045\034\047\041\055\047\054\001\002" +
    "\000\004\043\uffb7\001\002\000\004\043\166\001\002\000" +
    "\030\013\uffdb\020\025\021\037\022\030\031\022\033\uffdb" +
    "\036\uffdb\042\033\045\034\046\uffdb\047\036\001\002\000" +
    "\012\013\uffb6\033\uffb6\036\uffb6\046\uffb6\001\002\000\006" +
    "\013\172\036\173\001\002\000\006\013\uffbe\036\uffbe\001" +
    "\002\000\024\013\uffdb\020\025\021\037\022\030\031\022" +
    "\036\uffdb\042\033\045\034\047\036\001\002\000\012\013" +
    "\uffc0\033\uffc0\036\uffc0\046\uffc0\001\002\000\006\013\uffbf" +
    "\036\uffbf\001\002\000\004\013\235\001\002\000\004\013" +
    "\ufff3\001\002\000\004\007\ufff0\001\002\000\004\013\ufff1" +
    "\001\002\000\004\007\202\001\002\000\004\047\206\001" +
    "\002\000\004\013\204\001\002\000\010\007\ufffe\031\ufffe" +
    "\035\ufffe\001\002\000\004\013\uffef\001\002\000\006\013" +
    "\uffee\014\uffed\001\002\000\004\014\210\001\002\000\006" +
    "\035\uffeb\047\uffeb\001\002\000\004\013\uffec\001\002\000" +
    "\006\035\215\047\221\001\002\000\006\006\uffe5\013\uffe5" +
    "\001\002\000\006\006\uffe6\013\uffe6\001\002\000\004\047" +
    "\221\001\002\000\006\006\uffea\013\226\001\002\000\006" +
    "\005\223\015\222\001\002\000\006\006\uffe7\013\uffe7\001" +
    "\002\000\006\005\uffe1\015\uffe1\001\002\000\004\047\225" +
    "\001\002\000\004\047\224\001\002\000\006\006\uffe4\013" +
    "\uffe4\001\002\000\006\005\uffe2\015\uffe2\001\002\000\006" +
    "\035\215\047\221\001\002\000\004\006\230\001\002\000" +
    "\004\013\uffe9\001\002\000\006\006\uffe8\013\uffe8\001\002" +
    "\000\006\005\233\015\222\001\002\000\004\047\234\001" +
    "\002\000\006\006\uffe3\013\uffe3\001\002\000\006\007\ufff2" +
    "\031\ufff5\001\002\000\004\013\ufff4\001\002\000\004\047" +
    "\242\001\002\000\010\007\ufffa\031\ufffa\047\242\001\002" +
    "\000\006\005\244\015\243\001\002\000\006\005\uffdf\015" +
    "\uffdf\001\002\000\004\047\247\001\002\000\004\047\245" +
    "\001\002\000\004\013\246\001\002\000\010\007\ufff8\031" +
    "\ufff8\047\ufff8\001\002\000\006\005\uffe0\015\uffe0\001\002" +
    "\000\006\005\251\015\243\001\002\000\004\047\252\001" +
    "\002\000\004\013\253\001\002\000\010\007\ufff9\031\ufff9" +
    "\047\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\006\002\003\047\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\011\050\010\001\001\000\004\004\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\236" +
    "\001\001\000\006\030\016\052\015\001\001\000\010\031" +
    "\174\032\175\053\176\001\001\000\004\007\020\001\001" +
    "\000\024\010\025\011\034\012\031\013\026\016\037\017" +
    "\040\021\022\023\030\043\023\001\001\000\002\001\001" +
    "\000\024\011\170\012\031\013\026\016\037\017\040\020" +
    "\167\021\022\023\030\043\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\143\025\043\026\052\027" +
    "\047\001\001\000\004\066\135\001\001\000\002\001\001" +
    "\000\006\060\116\061\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\045\024\051" +
    "\025\043\026\052\027\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\072\027\047\001\001\000\002" +
    "\001\001\000\006\026\066\027\047\001\001\000\002\001" +
    "\001\000\012\024\064\025\043\026\052\027\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\055\001\001\000\002\001\001\000\004\027\063" +
    "\001\001\000\004\027\062\001\001\000\004\027\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\071\025\043\026\052\027\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\114\026\052\027\047\001\001\000\010\025\113\026\052" +
    "\027\047\001\001\000\006\026\112\027\047\001\001\000" +
    "\006\026\111\027\047\001\001\000\010\025\110\026\052" +
    "\027\047\001\001\000\010\025\107\026\052\027\047\001" +
    "\001\000\010\025\106\026\052\027\047\001\001\000\010" +
    "\025\105\026\052\027\047\001\001\000\006\026\104\027" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\117\001\001\000\002\001" +
    "\001\000\016\024\122\025\043\026\052\027\047\045\123" +
    "\046\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\024\122\025\043" +
    "\026\052\027\047\046\126\001\001\000\002\001\001\000" +
    "\012\024\130\025\043\026\052\027\047\001\001\000\002" +
    "\001\001\000\012\024\132\025\043\026\052\027\047\001" +
    "\001\000\002\001\001\000\012\024\134\025\043\026\052" +
    "\027\047\001\001\000\002\001\001\000\024\010\136\011" +
    "\034\012\031\013\026\016\037\017\040\021\022\023\030" +
    "\043\023\001\001\000\002\001\001\000\022\011\142\012" +
    "\031\013\026\016\037\017\040\021\022\023\030\043\023" +
    "\001\001\000\012\024\141\025\043\026\052\027\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\144" +
    "\001\001\000\002\001\001\000\022\011\146\012\031\013" +
    "\026\016\037\017\040\021\022\023\030\043\023\001\001" +
    "\000\004\022\150\001\001\000\004\063\151\001\001\000" +
    "\002\001\001\000\022\011\152\012\031\013\026\016\037" +
    "\017\040\021\022\023\030\043\023\001\001\000\002\001" +
    "\001\000\004\015\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\163\025\043\026\052" +
    "\027\047\001\001\000\004\065\164\001\001\000\002\001" +
    "\001\000\022\011\166\012\031\013\026\016\037\017\040" +
    "\021\022\023\030\043\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\011\173\012\031" +
    "\013\026\016\037\017\040\021\022\023\030\043\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\177\054\200\001\001\000" +
    "\002\001\001\000\004\034\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\204\050\010\001\001\000" +
    "\002\001\001\000\004\055\206\001\001\000\004\035\210" +
    "\001\001\000\004\056\211\001\001\000\002\001\001\000" +
    "\014\036\215\037\217\040\213\041\212\042\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\231\001" +
    "\001\000\004\057\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\037\230" +
    "\040\213\041\212\042\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\235\053\176\001" +
    "\001\000\002\001\001\000\006\005\237\006\240\001\001" +
    "\000\004\006\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    StringBuilder mepa, saida;
    int numeroRotinas;
    Erro e;
    int contaVars;
    int numeroEntradas;
    int numeroArgumentos;
    int rotulo;
    int endereco;
    int nivel;
    int auxNumParam;
    int pre_rotina;
    Rotulo ultimoRotulo;
    LinkedList<ElemPilhaSem> pilhaSem = new LinkedList<ElemPilhaSem>();
    ArrayList<ElemTabSimb> tabSimbolo = new ArrayList<ElemTabSimb>();
    ElemTabSimb elemTab;
    ElemPilhaSem elemPilha;

    public sintatico(java.io.Reader input, StringBuilder mep, StringBuilder sai, Erro err) {
        super (new lexico (input));
        mepa = mep;
        saida = sai;
        e = err;
        nivel = -1;
    }

    public void report_semantic_error (String message) {
        report_error (message, cur_token);
        done_parsing();
    }

    public void report_error(String message, Object info) {
        Simbolo simb = (Simbolo)info;
        saida.append("ERRO na linha "+simb.getLine()+": "+message);
        e.setaErro (simb.getLine(), simb.getColumn ());
    }

    public void report_fatal_error (String message, Object info) {
        done_parsing();
    }

    public void syntax_error(java_cup.runtime.Symbol current) {
        report_error("Sintatico", current);
    }

    public void eliminaSimbolos(int nivel){

        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb el;
        while(tamanhoTab != -1 && (el = this.tabSimbolo.get(tamanhoTab)).getNivel() == nivel){
            this.tabSimbolo.remove(tamanhoTab);
            tamanhoTab--;
        }
    }

    public void mostraTabSimb(){
        System.out.println("TabelaSimbolos - "+tabSimbolo.toString()+"\n");
    }

    public void mostraPilhaSem(){
        System.out.println("PilhaSemantica - "+pilhaSem.toString()+"\n");
    }

    public ElemTabSimb buscaSimbolo(String id){
        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb e = null;

        while(tamanhoTab != -1 && !((e = tabSimbolo.get(tamanhoTab)).getNome().equals(id))){
            tamanhoTab--;
        }

        if(tamanhoTab == -1){
            return null;
        }
  
        return e;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintatico$actions {
  private final sintatico parser;

  /** Constructor */
  CUP$sintatico$actions(sintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintatico$do_action(
    int                        CUP$sintatico$act_num,
    java_cup.runtime.lr_parser CUP$sintatico$parser,
    java.util.Stack            CUP$sintatico$stack,
    int                        CUP$sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintatico$result;

      /* select the action based on the action number */
      switch (CUP$sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // fator ::= S_NOT fator 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tNEGA\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // fator ::= S_ABREPAR expressao S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // fator ::= S_NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		 
        parser.mepa.append ("\tCRCT\t"+numero+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fator ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }
        else{
            if(parser.pre_rotina == 1){
                Procedimento proc = (Procedimento) ((ElemTabSimb) parser.pilhaSem.peekLast()).getInfoC();
                Parametro p = proc.getParametro(parser.numeroArgumentos);
                if(p.getMec() == Mecanismo.PAS_END){
                    parser.mepa.append ("\tCREN\t"+parser.elemTab.getNivel()+","+((Variavel) parser.elemTab.getInfoC()).getDeslocamento()+"\n");
                }else{
                    parser.mepa.append ("\tCRVL\t"+parser.elemTab.getNivel()+","+((Variavel) parser.elemTab.getInfoC()).getDeslocamento()+"\n");
                }
            }else{
                parser.mepa.append ("\tCRVL\t"+parser.elemTab.getNivel()+","+((Variavel) parser.elemTab.getInfoC()).getDeslocamento()+"\n");
            }
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // termo ::= fator 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // termo ::= termo S_AND fator 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCONJ\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // termo ::= termo S_DIV fator 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tDIVI\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // termo ::= termo S_VEZES fator 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tMULT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expressao_simples ::= termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expressao_simples ::= S_MENOS termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tINVR\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expressao_simples ::= S_MAIS termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expressao_simples ::= expressao_simples S_OR termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tDISJ\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expressao_simples ::= expressao_simples S_MENOS termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tSUBT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expressao_simples ::= expressao_simples S_MAIS termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tSOMA\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expressao ::= expressao_simples 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expressao ::= expressao_simples S_MAIGUAL expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMAG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expressao ::= expressao_simples S_MEIGUAL expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMEG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expressao ::= expressao_simples S_MAIOR expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMMA\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expressao ::= expressao_simples S_MENOR expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMME\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expressao ::= expressao_simples S_DIFERENTE expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMDG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expressao ::= expressao_simples S_IGUAL expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMIG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // repetitivo ::= S_REPEAT NT$15 sequencia_comandos S_UNTIL expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.ultimoRotulo = (Rotulo) parser.pilhaSem.pollLast();
        parser.mepa.append ("\tDSVF\tL"+parser.ultimoRotulo.getRotulo()+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$15 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("L"+parser.rotulo+":\tNADA\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$15",52, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // repetitivo ::= S_WHILE NT$13 expressao NT$14 S_DO comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.ultimoRotulo = (Rotulo) parser.pilhaSem.pollLast();
        parser.elemPilha = parser.pilhaSem.pollLast();
        parser.mepa.append ("\tDSVS\tL"+((Rotulo)parser.elemPilha).getRotulo()+"\n");
        parser.mepa.append ("L"+parser.ultimoRotulo.getRotulo()+":\tNADA\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.rotulo++;
        parser.mepa.append ("\tDSVF\tL"+parser.rotulo+"\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$14",51, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$13 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("L"+parser.rotulo+":\tNADA\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$13",50, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // alternativa_cond ::= S_ELSE NT$12 comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",16, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$12 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("\tDSVS\tL"+parser.rotulo+"\n");
        parser.elemPilha = parser.pilhaSem.pollLast();
        parser.mepa.append ("L"+((Rotulo)parser.elemPilha).getRotulo()+":\tNADA\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // alternativa_cond ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",16, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicional ::= S_IF expressao NT$11 S_THEN comando_sem_rotulo alternativa_cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.elemPilha = parser.pilhaSem.pollLast();
        parser.mepa.append ("L"+((Rotulo)parser.elemPilha).getRotulo()+":\tNADA\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("condicional",15, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$11 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("\tDSVF\tL"+parser.rotulo+"\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_comandos_sem_rotulo ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_comandos_sem_rotulo ::= lista_comandos_sem_rotulo S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // composto ::= S_BEGIN lista_comandos_sem_rotulo S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("composto",13, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atribuicao ::= S_IDENTIF NT$10 S_ATRIBUI expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
        InfoComplementar infoC = parser.elemTab.getInfoC();
        if( infoC instanceof Parametro){
            if(((Parametro)infoC).getMec() == Mecanismo.PAS_END){
                parser.mepa.append ("\tARMI\t"+ parser.elemTab.getNivel()+","+((Parametro)infoC).getDeslocamento()+"\n");
            }else{
                parser.mepa.append ("\tARMZ\t"+ parser.elemTab.getNivel()+","+((Parametro)infoC).getDeslocamento()+"\n");
            }
        }else{
            parser.mepa.append ("\tARMZ\t"+parser.elemTab.getNivel()+","+((Variavel)infoC).getDeslocamento()+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("atribuicao",12, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_de_variaveis ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }
        else{
            parser.mepa.append ("\tLEIT\n");
            parser.mepa.append ("\tARMZ\t"+parser.elemTab.getNivel()+","+((Variavel)parser.elemTab.getInfoC()).getDeslocamento()+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_de_variaveis ::= lista_de_variaveis S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }
        else {
            parser.mepa.append ("\tLEIT\n");
            parser.mepa.append ("\tARMZ\t"+parser.elemTab.getNivel()+","+((Variavel)parser.elemTab.getInfoC()).getDeslocamento()+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_de_variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_de_expressoes ::= expressao 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tIMPR\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",10, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_de_expressoes ::= lista_de_expressoes S_VIRGULA expressao 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tIMPR\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",10, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lista_de_expressoes ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",10, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // chamada_comando_leitura ::= S_READ S_ABREPAR lista_de_variaveis S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_leitura",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // chamada_comando_escrita ::= S_WRITE S_ABREPAR lista_de_expressoes S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_escrita",8, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros_atuais ::= expressao S_DOISPTOS expressao S_DOISPTOS expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros_atuais ::= expressao S_DOISPTOS expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_atuais ::= expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_de_parametros_atuais ::= parametros_atuais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_de_parametros_atuais ::= lista_de_parametros_atuais S_VIRGULA parametros_atuais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= S_ABREPAR lista_de_parametros_atuais S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // chamada_procedimento ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Procedimento <"+id+"> não declarado!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
            parser.pre_rotina = 1;
            parser.numeroArgumentos = 0;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",33, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // chamada_procedimento ::= S_IDENTIF NT$9 parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",33, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Procedimento <"+id+"> não declarado!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
            parser.pre_rotina = 1;
            parser.numeroArgumentos = 0;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comando_sem_rotulo ::= repetitivo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comando_sem_rotulo ::= condicional 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comando_sem_rotulo ::= composto 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comando_sem_rotulo ::= atribuicao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comando_sem_rotulo ::= chamada_procedimento 
            {
              Object RESULT =null;
		
            parser.pre_rotina = 0;
            parser.numeroArgumentos = 0;
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
            Procedimento proc = (Procedimento) parser.elemTab.getInfoC();
            parser.mepa.append ("\tCHPR\t"+"L"+proc.getRotulo()+"\n");
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comando_sem_rotulo ::= chamada_comando_leitura 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comando_sem_rotulo ::= chamada_comando_escrita 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando_sem_rotulo ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sequencia_comandos ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",6, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sequencia_comandos ::= sequencia_comandos S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",6, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // corpo ::= S_BEGIN sequencia_comandos S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("corpo",5, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_de_identificadores ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.elemTab.setInfoC(new Variavel(parser.contaVars));
            parser.tabSimbolo.add(parser.elemTab);
            parser.contaVars++;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_de_identificadores ::= lista_de_identificadores S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.elemTab.setInfoC(new Variavel(parser.contaVars));
            parser.tabSimbolo.add(parser.elemTab);
            parser.contaVars++;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_de_parametros ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.numeroEntradas++;
            parser.elemTab.setInfoC(new Parametro());
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",32, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_de_parametros ::= lista_de_parametros S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.numeroEntradas++;
            parser.elemTab.setInfoC(new Parametro());
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",32, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametro_por_referencia ::= S_VAR lista_de_parametros S_DOISPTOS S_IDENTIF 
            {
              Object RESULT =null;
		
        //auxNumParam - Controlar o numero de parametros
        parser.auxNumParam = parser.numeroEntradas - parser.auxNumParam;
        Parametro p;
        LinkedList <Parametro> param = new LinkedList<Parametro>();

        int i;
        //Retirar da pilha semântica e setar o tipo de macanismo e tipo do parametro
        //Usar uma pilha auxiliar
        for( i = parser.auxNumParam; i > 0; i--){
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();               
            p = (Parametro) parser.elemTab.getInfoC();
            p.setMec(Mecanismo.PAS_END);
            p.setTipo(Tipo.INTEGER);
            param.add(p);
        }

        //Adicionar os parametros novamente
        for( i = parser.auxNumParam; i > 0; i--){
            parser.pilhaSem.add(param.pollLast());
        }

        parser.auxNumParam = parser.numeroEntradas;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_referencia",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametro_por_valor ::= lista_de_parametros S_DOISPTOS S_IDENTIF 
            {
              Object RESULT =null;
		
        //auxNumParam - Controlar o numero de parametros
        parser.auxNumParam = parser.numeroEntradas - parser.auxNumParam;
        Parametro p;
        LinkedList <Parametro> param = new LinkedList<Parametro>();

        int i;
        //Retirar da pilha semântica e setar o tipo de macanismo e tipo do parametro
        //Usar uma pilha auxiliar
        for( i = parser.auxNumParam; i > 0; i--){
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();               
            p = (Parametro) parser.elemTab.getInfoC();
            p.setMec(Mecanismo.PAS_VAL);
            p.setTipo(Tipo.INTEGER);
            param.add(p);
        }

        //Adicionar os parametros novamente
        for( i = parser.auxNumParam; i > 0; i--){
            parser.pilhaSem.add(param.pollLast());
        }

        parser.auxNumParam = parser.numeroEntradas;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_valor",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // secao_de_parametros_formais ::= parametro_por_referencia 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // secao_de_parametros_formais ::= parametro_por_valor 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // secao_lista_de_parametros_formais ::= secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // secao_lista_de_parametros_formais ::= secao_lista_de_parametros_formais S_PONTOVG secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_formal_de_parametros ::= S_ABREPAR NT$7 secao_lista_de_parametros_formais NT$8 S_FECHAPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        int i;
        Parametro p;
        LinkedList<Parametro> param = new LinkedList<Parametro>();

        //Setar deslocamento para os parametros
        for(i = parser.numeroEntradas; i > 0; i--){            
            p = (Parametro) parser.pilhaSem.pollLast();
            p.setDeslocamento(-3-(parser.numeroEntradas-i));
            param.add(p);
        }

        //Adicionar os parametros novamente
        for( i = parser.numeroEntradas; i > 0; i--){
            parser.pilhaSem.add(param.pollLast());
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_formal_de_parametros",27, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.nivel--;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              Object RESULT =null;

        parser.nivel++;
        parser.numeroEntradas = 0;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF NT$6 lista_formal_de_parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        if(parser.numeroEntradas > 0){
            parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
            parser.elemTab = parser.tabSimbolo.get(parser.tabSimbolo.indexOf(parser.elemTab));
            ListIterator it = parser.pilhaSem.listIterator(parser.pilhaSem.size() - parser.numeroEntradas);
            Procedimento proc = new Procedimento(parser.rotulo);
            while(it.hasNext()){
                proc.addParametro((Parametro)it.next());
                it.remove();
            }
            parser.elemTab.setInfoC(proc);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",26, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        Procedimento proc = new Procedimento(parser.rotulo);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.elemTab.setInfoC(proc);
            parser.tabSimbolo.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        Procedimento proc = new Procedimento(parser.rotulo);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.elemTab.setInfoC(proc);
            parser.tabSimbolo.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",26, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracao_de_procedimento ::= NT$5 cabecalho_procedimento S_PONTOVG bloco 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.mepa.append ("\tRTPR\t"+(parser.nivel+1)+", "+parser.numeroEntradas+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_procedimento",25, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$5 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("L"+parser.rotulo+":\tENPR\t"+(parser.nivel+1)+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracao_de_funcao_ou_procedimento ::= NT$4 declaracao_de_procedimento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao_ou_procedimento",24, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =null;

            parser.rotulo++;
            parser.auxNumParam = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_de_declaracao_de_funcao_ou_procedimento ::= declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",23, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_de_declaracao_de_funcao_ou_procedimento ::= lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",23, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracao_de_funcoes_e_procendimentos ::= NT$3 lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.elemPilha = parser.pilhaSem.pollLast();
        if(parser.elemPilha instanceof Rotulo){
          parser.mepa.append ("L"+((Rotulo)parser.elemPilha).getRotulo()+":\tNADA\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",22, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("\tDSVS\tL"+parser.rotulo+"\n");
        parser.pilhaSem.add(new Rotulo(parser.rotulo));
      
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracao_de_funcoes_e_procendimentos ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",22, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracoes_de_vars ::= lista_de_identificadores S_DOISPTOS S_IDENTIF S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracoes_de_vars ::= declaracoes_de_vars lista_de_identificadores S_DOISPTOS S_IDENTIF S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variaveis ::= S_VAR NT$2 declaracoes_de_vars 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        if(parser.contaVars > 0){
            parser.mepa.append ("\tAMEM\t"+parser.contaVars+"\n");
            parser.elemPilha = new VariaveisDeclaradas(parser.contaVars);
            parser.pilhaSem.add(parser.elemPilha);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.contaVars = 0; 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloco ::= NT$1 variaveis declaracao_de_funcoes_e_procendimentos corpo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		  
        if(parser.pilhaSem.peekLast() instanceof VariaveisDeclaradas){
            parser.elemPilha = parser.pilhaSem.pollLast();
            parser.mepa.append("\tDMEM\t"+((VariaveisDeclaradas)parser.elemPilha).getQuantidade()+"\n");
        }
        parser.eliminaSimbolos(parser.nivel);
        parser.nivel--;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 
        parser.nivel++; 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 S_PROGRAM S_IDENTIF S_PONTOVG bloco S_PONTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)).value;
		 
    parser.mepa.append ("\tPARA\n\tFIM\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("\tINPP\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		RESULT = start_val;
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintatico$parser.done_parsing();
          return CUP$sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

