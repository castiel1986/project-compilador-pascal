
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 20 01:06:50 BRST 2011
//----------------------------------------------------

package controle;

import java.util.*;
import entidade.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 20 01:06:50 BRST 2011
  */
public class sintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\074\002\000\002\002" +
    "\010\000\002\075\002\000\002\003\010\000\002\004\002" +
    "\000\002\076\002\000\002\004\005\000\002\005\002\000" +
    "\002\005\004\000\002\015\004\000\002\015\003\000\002" +
    "\077\002\000\002\026\007\000\002\021\002\000\002\021" +
    "\004\000\002\033\004\000\002\033\003\000\002\067\006" +
    "\000\002\012\003\000\002\012\003\000\002\016\003\000" +
    "\002\022\003\000\002\027\003\000\002\034\010\000\002" +
    "\043\003\000\002\066\005\000\002\066\003\000\002\070" +
    "\005\000\002\006\007\000\002\006\006\000\002\044\002" +
    "\000\002\100\002\000\002\044\005\000\002\045\005\000" +
    "\002\045\003\000\002\101\002\000\002\046\004\000\002" +
    "\102\002\000\002\046\004\000\002\103\002\000\002\104" +
    "\002\000\002\047\007\000\002\051\004\000\002\105\002" +
    "\000\002\051\006\000\002\106\002\000\002\107\002\000" +
    "\002\050\007\000\002\110\002\000\002\052\007\000\002" +
    "\111\002\000\002\052\010\000\002\042\003\000\002\112" +
    "\002\000\002\062\005\000\002\113\002\000\002\114\002" +
    "\000\002\053\007\000\002\054\005\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\115\002\000\002" +
    "\056\006\000\002\116\002\000\002\057\007\000\002\060" +
    "\005\000\002\060\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\005\000\002\011\005\000\002\011\003\000" +
    "\002\013\002\000\002\013\003\000\002\117\002\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\120\002" +
    "\000\002\061\005\000\002\061\003\000\002\063\005\000" +
    "\002\064\005\000\002\064\003\000\002\065\003\000\002" +
    "\065\005\000\002\065\007\000\002\121\002\000\002\014" +
    "\007\000\002\122\002\000\002\017\007\000\002\020\002" +
    "\000\002\020\005\000\002\020\003\000\002\023\002\000" +
    "\002\123\002\000\002\023\006\000\002\124\002\000\002" +
    "\023\004\000\002\125\002\000\002\024\006\000\002\071" +
    "\003\000\002\071\003\000\002\072\006\000\002\073\005" +
    "\000\002\073\003\000\002\025\005\000\002\030\005\000" +
    "\002\030\003\000\002\126\002\000\002\031\010\000\002" +
    "\032\002\000\002\127\002\000\002\032\005\000\002\130" +
    "\002\000\002\131\002\000\002\035\010\000\002\132\002" +
    "\000\002\035\007\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\004\000\002\037\004" +
    "\000\002\037\003\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\005\000\002\041" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\004\013\000\001\002\000\004\002\367\001" +
    "\002\000\004\013\006\001\002\000\004\050\007\001\002" +
    "\000\004\014\010\001\002\000\016\007\ufffe\010\ufffe\032" +
    "\ufffe\036\ufffe\051\ufffe\052\ufffe\001\002\000\016\007\ufff9" +
    "\010\ufff9\032\ufff9\036\ufff9\051\015\052\ufff9\001\002\000" +
    "\004\031\013\001\002\000\004\002\uffff\001\002\000\014" +
    "\007\ufff3\010\ufff3\032\ufff3\036\ufff3\052\122\001\002\000" +
    "\004\050\020\001\002\000\016\007\ufff8\010\ufff8\032\ufff8" +
    "\036\ufff8\050\020\052\ufff8\001\002\000\016\007\ufff6\010" +
    "\ufff6\032\ufff6\036\ufff6\050\ufff6\052\ufff6\001\002\000\004" +
    "\026\ufff5\001\002\000\004\026\022\001\002\000\016\015" +
    "\033\020\023\027\025\035\026\042\037\050\036\001\002" +
    "\000\056\004\uff73\005\uff73\006\uff73\011\uff73\012\uff73\014" +
    "\uff73\016\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73" +
    "\033\uff73\034\uff73\035\uff73\037\uff73\040\uff73\041\uff73\044" +
    "\uff73\045\uff73\047\uff73\055\uff73\001\002\000\050\004\100" +
    "\005\uff7f\006\uff7f\011\077\012\105\014\uff7f\016\uff7f\024" +
    "\103\025\104\026\106\027\102\033\uff7f\034\uff7f\035\101" +
    "\037\uff7f\044\uff7f\045\107\047\uff7f\055\uff7f\001\002\000" +
    "\012\015\033\020\023\042\037\050\036\001\002\000\012" +
    "\015\033\020\023\042\037\050\036\001\002\000\060\004" +
    "\uff74\005\uff74\006\uff74\011\uff74\012\uff74\014\uff74\016\uff74" +
    "\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\033\uff74\034" +
    "\uff74\035\uff74\037\uff74\040\uff74\041\uff74\044\uff74\045\uff74" +
    "\047\uff74\054\067\055\uff74\001\002\000\062\004\uff96\005" +
    "\uff96\006\uff96\011\uff96\012\uff96\014\uff96\016\uff96\017\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\033\uff96\034" +
    "\uff96\035\uff96\037\uff96\040\uff96\041\uff96\044\uff96\045\uff96" +
    "\047\uff96\054\uff96\055\uff96\001\002\000\056\004\uff72\005" +
    "\uff72\006\uff72\011\uff72\012\uff72\014\uff72\016\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\030\uff72\033\uff72\034\uff72\035" +
    "\uff72\037\uff72\040\uff72\041\uff72\044\uff72\045\uff72\047\uff72" +
    "\055\uff72\001\002\000\056\004\uff75\005\uff75\006\uff75\011" +
    "\uff75\012\uff75\014\uff75\016\uff75\024\uff75\025\uff75\026\uff75" +
    "\027\uff75\030\uff75\033\uff75\034\uff75\035\uff75\037\uff75\040" +
    "\uff75\041\uff75\044\uff75\045\uff75\047\uff75\055\uff75\001\002" +
    "\000\016\015\033\020\023\027\025\035\026\042\037\050" +
    "\036\001\002\000\056\004\uff79\005\uff79\006\uff79\011\uff79" +
    "\012\uff79\014\uff79\016\uff79\024\uff79\025\uff79\026\uff79\027" +
    "\uff79\030\060\033\uff79\034\uff79\035\uff79\037\uff79\040\057" +
    "\041\061\044\uff79\045\uff79\047\uff79\055\uff79\001\002\000" +
    "\004\014\056\001\002\000\062\004\uff97\005\uff97\006\uff97" +
    "\011\uff97\012\uff97\014\uff97\015\uffcb\016\uff97\024\uff97\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\033\uff97\034\uff97\035\uff97" +
    "\037\uff97\040\uff97\041\uff97\044\uff97\045\uff97\047\uff97\054" +
    "\uff97\055\uff97\001\002\000\012\015\033\020\023\042\037" +
    "\050\036\001\002\000\056\004\uff70\005\uff70\006\uff70\011" +
    "\uff70\012\uff70\014\uff70\016\uff70\024\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\033\uff70\034\uff70\035\uff70\037\uff70\040" +
    "\uff70\041\uff70\044\uff70\045\uff70\047\uff70\055\uff70\001\002" +
    "\000\004\015\043\001\002\000\056\004\uffca\005\uffca\006" +
    "\uffca\011\uffca\012\uffca\014\uffca\016\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\033\uffca\034\uffca\035\uffca\037" +
    "\uffca\040\uffca\041\uffca\044\uffca\045\uffca\047\uffca\055\uffca" +
    "\001\002\000\016\015\033\020\023\027\025\035\026\042" +
    "\037\050\036\001\002\000\006\006\uffa9\016\uffa9\001\002" +
    "\000\010\005\052\006\uffa8\016\uffa8\001\002\000\006\006" +
    "\047\016\050\001\002\000\056\004\uffab\005\uffab\006\uffab" +
    "\011\uffab\012\uffab\014\uffab\016\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\033\uffab\034\uffab\035\uffab\037\uffab" +
    "\040\uffab\041\uffab\044\uffab\045\uffab\047\uffab\055\uffab\001" +
    "\002\000\016\015\033\020\023\027\025\035\026\042\037" +
    "\050\036\001\002\000\006\006\uffaa\016\uffaa\001\002\000" +
    "\016\015\033\020\023\027\025\035\026\042\037\050\036" +
    "\001\002\000\010\005\054\006\uffa7\016\uffa7\001\002\000" +
    "\016\015\033\020\023\027\025\035\026\042\037\050\036" +
    "\001\002\000\006\006\uffa6\016\uffa6\001\002\000\016\007" +
    "\ufff4\010\ufff4\032\ufff4\036\ufff4\050\ufff4\052\ufff4\001\002" +
    "\000\012\015\033\020\023\042\037\050\036\001\002\000" +
    "\012\015\033\020\023\042\037\050\036\001\002\000\012" +
    "\015\033\020\023\042\037\050\036\001\002\000\056\004" +
    "\uff76\005\uff76\006\uff76\011\uff76\012\uff76\014\uff76\016\uff76" +
    "\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\033\uff76\034" +
    "\uff76\035\uff76\037\uff76\040\uff76\041\uff76\044\uff76\045\uff76" +
    "\047\uff76\055\uff76\001\002\000\056\004\uff78\005\uff78\006" +
    "\uff78\011\uff78\012\uff78\014\uff78\016\uff78\024\uff78\025\uff78" +
    "\026\uff78\027\uff78\030\uff78\033\uff78\034\uff78\035\uff78\037" +
    "\uff78\040\uff78\041\uff78\044\uff78\045\uff78\047\uff78\055\uff78" +
    "\001\002\000\056\004\uff77\005\uff77\006\uff77\011\uff77\012" +
    "\uff77\014\uff77\016\uff77\024\uff77\025\uff77\026\uff77\027\uff77" +
    "\030\uff77\033\uff77\034\uff77\035\uff77\037\uff77\040\uff77\041" +
    "\uff77\044\uff77\045\uff77\047\uff77\055\uff77\001\002\000\004" +
    "\006\066\001\002\000\056\004\uff71\005\uff71\006\uff71\011" +
    "\uff71\012\uff71\014\uff71\016\uff71\024\uff71\025\uff71\026\uff71" +
    "\027\uff71\030\uff71\033\uff71\034\uff71\035\uff71\037\uff71\040" +
    "\uff71\041\uff71\044\uff71\045\uff71\047\uff71\055\uff71\001\002" +
    "\000\016\015\033\020\023\027\025\035\026\042\037\050" +
    "\036\001\002\000\006\016\073\055\072\001\002\000\006" +
    "\016\uff93\055\uff93\001\002\000\062\004\uff95\005\uff95\006" +
    "\uff95\011\uff95\012\uff95\014\uff95\016\uff95\017\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\033\uff95\034\uff95\035" +
    "\uff95\037\uff95\040\uff95\041\uff95\044\uff95\045\uff95\047\uff95" +
    "\054\uff95\055\uff95\001\002\000\016\015\033\020\023\027" +
    "\025\035\026\042\037\050\036\001\002\000\006\016\uff94" +
    "\055\uff94\001\002\000\056\004\uff7b\005\uff7b\006\uff7b\011" +
    "\uff7b\012\uff7b\014\uff7b\016\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\027\uff7b\030\060\033\uff7b\034\uff7b\035\uff7b\037\uff7b\040" +
    "\057\041\061\044\uff7b\045\uff7b\047\uff7b\055\uff7b\001\002" +
    "\000\056\004\uff7a\005\uff7a\006\uff7a\011\uff7a\012\uff7a\014" +
    "\uff7a\016\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\060" +
    "\033\uff7a\034\uff7a\035\uff7a\037\uff7a\040\057\041\061\044" +
    "\uff7a\045\uff7a\047\uff7a\055\uff7a\001\002\000\016\015\033" +
    "\020\023\027\025\035\026\042\037\050\036\001\002\000" +
    "\016\015\033\020\023\027\025\035\026\042\037\050\036" +
    "\001\002\000\012\015\033\020\023\042\037\050\036\001" +
    "\002\000\012\015\033\020\023\042\037\050\036\001\002" +
    "\000\016\015\033\020\023\027\025\035\026\042\037\050" +
    "\036\001\002\000\016\015\033\020\023\027\025\035\026" +
    "\042\037\050\036\001\002\000\016\015\033\020\023\027" +
    "\025\035\026\042\037\050\036\001\002\000\016\015\033" +
    "\020\023\027\025\035\026\042\037\050\036\001\002\000" +
    "\012\015\033\020\023\042\037\050\036\001\002\000\056" +
    "\004\uff7c\005\uff7c\006\uff7c\011\uff7c\012\uff7c\014\uff7c\016" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\060\033\uff7c" +
    "\034\uff7c\035\uff7c\037\uff7c\040\057\041\061\044\uff7c\045" +
    "\uff7c\047\uff7c\055\uff7c\001\002\000\034\005\uff85\006\uff85" +
    "\014\uff85\016\uff85\027\102\033\uff85\034\uff85\035\101\037" +
    "\uff85\044\uff85\045\107\047\uff85\055\uff85\001\002\000\034" +
    "\005\uff81\006\uff81\014\uff81\016\uff81\027\102\033\uff81\034" +
    "\uff81\035\101\037\uff81\044\uff81\045\107\047\uff81\055\uff81" +
    "\001\002\000\034\005\uff83\006\uff83\014\uff83\016\uff83\027" +
    "\102\033\uff83\034\uff83\035\101\037\uff83\044\uff83\045\107" +
    "\047\uff83\055\uff83\001\002\000\034\005\uff82\006\uff82\014" +
    "\uff82\016\uff82\027\102\033\uff82\034\uff82\035\101\037\uff82" +
    "\044\uff82\045\107\047\uff82\055\uff82\001\002\000\056\004" +
    "\uff7d\005\uff7d\006\uff7d\011\uff7d\012\uff7d\014\uff7d\016\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\060\033\uff7d\034" +
    "\uff7d\035\uff7d\037\uff7d\040\057\041\061\044\uff7d\045\uff7d" +
    "\047\uff7d\055\uff7d\001\002\000\056\004\uff7e\005\uff7e\006" +
    "\uff7e\011\uff7e\012\uff7e\014\uff7e\016\uff7e\024\uff7e\025\uff7e" +
    "\026\uff7e\027\uff7e\030\060\033\uff7e\034\uff7e\035\uff7e\037" +
    "\uff7e\040\057\041\061\044\uff7e\045\uff7e\047\uff7e\055\uff7e" +
    "\001\002\000\034\005\uff84\006\uff84\014\uff84\016\uff84\027" +
    "\102\033\uff84\034\uff84\035\101\037\uff84\044\uff84\045\107" +
    "\047\uff84\055\uff84\001\002\000\034\005\uff80\006\uff80\014" +
    "\uff80\016\uff80\027\102\033\uff80\034\uff80\035\101\037\uff80" +
    "\044\uff80\045\107\047\uff80\055\uff80\001\002\000\016\007" +
    "\ufff7\010\ufff7\032\ufff7\036\ufff7\050\ufff7\052\ufff7\001\002" +
    "\000\004\050\362\001\002\000\012\007\ufffc\010\ufffc\032" +
    "\ufffc\036\124\001\002\000\004\050\ufffb\001\002\000\010" +
    "\007\uffe1\010\uffe1\032\uffe2\001\002\000\004\032\240\001" +
    "\002\000\006\007\uffdd\010\uffdb\001\002\000\004\014\236" +
    "\001\002\000\004\014\uffde\001\002\000\004\010\uffd3\001" +
    "\002\000\004\007\uffd9\001\002\000\004\014\uffdc\001\002" +
    "\000\004\007\136\001\002\000\004\050\143\001\002\000" +
    "\004\014\uffd8\001\002\000\004\014\141\001\002\000\016" +
    "\007\ufffe\010\ufffe\032\ufffe\036\ufffe\051\ufffe\052\ufffe\001" +
    "\002\000\004\014\uffd7\001\002\000\006\014\uffd6\015\uffd5" +
    "\001\002\000\004\015\145\001\002\000\006\036\uffc9\050" +
    "\uffc9\001\002\000\004\014\uffd4\001\002\000\006\036\uffc0" +
    "\050\uffc2\001\002\000\006\006\uffc3\014\uffc3\001\002\000" +
    "\004\036\212\001\002\000\006\006\uffc4\014\uffc4\001\002" +
    "\000\004\050\163\001\002\000\006\006\uffc8\014\156\001" +
    "\002\000\006\006\uffc5\014\uffc5\001\002\000\006\036\uffc0" +
    "\050\uffc2\001\002\000\004\006\160\001\002\000\006\005" +
    "\uffc7\014\uffc7\001\002\000\006\006\uffc6\014\uffc6\001\002" +
    "\000\006\005\165\016\164\001\002\000\006\005\uffbd\016" +
    "\uffbd\001\002\000\004\050\211\001\002\000\006\050\174" +
    "\053\172\001\002\000\006\006\uffc1\014\uffc1\001\002\000" +
    "\006\006\uffec\014\uffec\001\002\000\006\006\uffeb\014\uffeb" +
    "\001\002\000\006\006\uffea\014\uffea\001\002\000\004\054" +
    "\175\001\002\000\006\006\uffed\014\uffed\001\002\000\006" +
    "\006\uffee\014\uffee\001\002\000\004\020\200\001\002\000" +
    "\006\016\204\055\203\001\002\000\006\016\uffe6\055\uffe6" +
    "\001\002\000\004\057\201\001\002\000\004\020\202\001" +
    "\002\000\006\016\uffe5\055\uffe5\001\002\000\004\056\206" +
    "\001\002\000\004\020\200\001\002\000\006\016\uffe7\055" +
    "\uffe7\001\002\000\006\050\174\053\172\001\002\000\006" +
    "\006\uffe8\014\uffe8\001\002\000\006\006\uffe9\014\uffe9\001" +
    "\002\000\006\005\uffbe\016\uffbe\001\002\000\004\050\163" +
    "\001\002\000\006\005\214\016\164\001\002\000\006\050" +
    "\174\053\172\001\002\000\006\006\uffbf\014\uffbf\001\002" +
    "\000\004\010\220\001\002\000\004\014\uffda\001\002\000" +
    "\004\050\225\001\002\000\004\014\uffd2\001\002\000\004" +
    "\014\223\001\002\000\016\007\ufffe\010\ufffe\032\ufffe\036" +
    "\ufffe\051\ufffe\052\ufffe\001\002\000\004\014\uffd1\001\002" +
    "\000\006\005\uffd0\015\uffce\001\002\000\004\015\145\001" +
    "\002\000\004\005\230\001\002\000\004\050\232\001\002" +
    "\000\004\014\uffcf\001\002\000\004\014\uffcc\001\002\000" +
    "\004\005\234\001\002\000\004\050\232\001\002\000\004" +
    "\014\uffcd\001\002\000\010\007\uffdd\010\uffdb\032\uffe0\001" +
    "\002\000\004\014\uffdf\001\002\000\024\014\uffb7\021\244" +
    "\022\257\023\uffb5\032\242\037\uffb7\043\253\046\252\050" +
    "\256\001\002\000\006\014\ufffd\031\ufffd\001\002\000\024" +
    "\014\uffb7\021\244\022\257\023\uffb5\032\242\037\uffb7\043" +
    "\253\046\252\050\256\001\002\000\012\014\uffb0\034\uffb0" +
    "\037\uffb0\047\uffb0\001\002\000\016\015\uff8a\020\uff8a\027" +
    "\uff8a\035\uff8a\042\uff8a\050\uff8a\001\002\000\012\014\uffb3" +
    "\034\uffb3\037\uffb3\047\uffb3\001\002\000\006\014\321\037" +
    "\330\001\002\000\012\014\uffaf\034\uffaf\037\uffaf\047\uffaf" +
    "\001\002\000\006\017\uff99\054\067\001\002\000\012\014" +
    "\uffb6\034\uffb6\037\uffb6\047\uffb6\001\002\000\024\014\uff87" +
    "\021\uff87\022\uff87\023\uff87\032\uff87\043\uff87\046\uff87\047" +
    "\uff87\050\uff87\001\002\000\016\015\033\020\023\027\025" +
    "\035\026\042\037\050\036\001\002\000\010\014\uffb8\037" +
    "\uffb8\047\uffb8\001\002\000\004\023\274\001\002\000\020" +
    "\014\uffac\015\uffae\017\uff97\034\uffac\037\uffac\047\uffac\054" +
    "\uff97\001\002\000\004\015\uffa5\001\002\000\012\014\uffb2" +
    "\034\uffb2\037\uffb2\047\uffb2\001\002\000\012\014\uffb1\034" +
    "\uffb1\037\uffb1\047\uffb1\001\002\000\004\015\263\001\002" +
    "\000\022\006\uffa1\015\033\016\uffa1\020\023\027\025\035" +
    "\026\042\037\050\036\001\002\000\006\006\266\016\267" +
    "\001\002\000\006\006\uff9f\016\uff9f\001\002\000\012\014" +
    "\uffa4\034\uffa4\037\uffa4\047\uffa4\001\002\000\016\015\033" +
    "\020\023\027\025\035\026\042\037\050\036\001\002\000" +
    "\006\006\uffa0\016\uffa0\001\002\000\004\015\043\001\002" +
    "\000\012\014\uffad\034\uffad\037\uffad\047\uffad\001\002\000" +
    "\012\014\uffb4\034\uffb4\037\uffb4\047\uffb4\001\002\000\004" +
    "\015\uffa3\001\002\000\004\015\276\001\002\000\010\006" +
    "\uff9e\016\uff9e\050\uff9b\001\002\000\006\006\303\016\304" +
    "\001\002\000\004\050\302\001\002\000\010\006\uff9a\016" +
    "\uff9a\054\067\001\002\000\010\006\uff97\016\uff97\054\uff97" +
    "\001\002\000\012\014\uffa2\034\uffa2\037\uffa2\047\uffa2\001" +
    "\002\000\004\050\uff9d\001\002\000\004\050\302\001\002" +
    "\000\010\006\uff9c\016\uff9c\054\067\001\002\000\004\033" +
    "\uff8f\001\002\000\004\033\311\001\002\000\030\014\uffb7" +
    "\021\244\022\257\023\uffb5\032\242\034\uffb7\037\uffb7\043" +
    "\253\046\252\047\uffb7\050\256\001\002\000\012\014\uff8d" +
    "\034\313\037\uff8d\047\uff8d\001\002\000\030\014\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\032\uff8c\034\uff8c\037\uff8c\043\uff8c" +
    "\046\uff8c\047\uff8c\050\uff8c\001\002\000\012\014\uff8e\034" +
    "\uff8e\037\uff8e\047\uff8e\001\002\000\030\014\uffb7\021\244" +
    "\022\257\023\uffb5\032\242\034\uffb7\037\uffb7\043\253\046" +
    "\252\047\uffb7\050\256\001\002\000\012\014\uff8b\034\uff8b" +
    "\037\uff8b\047\uff8b\001\002\000\024\014\uffb7\021\244\022" +
    "\257\023\uffb5\032\242\043\253\046\252\047\uffb7\050\256" +
    "\001\002\000\006\014\321\047\322\001\002\000\026\014" +
    "\uffb7\021\244\022\257\023\uffb5\032\242\037\uffb7\043\253" +
    "\046\252\047\uffb7\050\256\001\002\000\016\015\033\020" +
    "\023\027\025\035\026\042\037\050\036\001\002\000\012" +
    "\014\uff86\034\uff86\037\uff86\047\uff86\001\002\000\010\014" +
    "\uffb9\037\uffb9\047\uffb9\001\002\000\004\017\326\001\002" +
    "\000\016\015\033\020\023\027\025\035\026\042\037\050" +
    "\036\001\002\000\012\014\uff98\034\uff98\037\uff98\047\uff98" +
    "\001\002\000\006\014\uffba\031\uffba\001\002\000\016\015" +
    "\033\020\023\027\025\035\026\042\037\050\036\001\002" +
    "\000\004\044\uff89\001\002\000\004\044\334\001\002\000" +
    "\030\014\uffb7\021\244\022\257\023\uffb5\032\242\034\uffb7" +
    "\037\uffb7\043\253\046\252\047\uffb7\050\256\001\002\000" +
    "\012\014\uff88\034\uff88\037\uff88\047\uff88\001\002\000\006" +
    "\014\340\037\341\001\002\000\006\014\uff90\037\uff90\001" +
    "\002\000\024\014\uffb7\021\244\022\257\023\uffb5\032\242" +
    "\037\uffb7\043\253\046\252\050\256\001\002\000\012\014" +
    "\uff92\034\uff92\037\uff92\047\uff92\001\002\000\006\014\uff91" +
    "\037\uff91\001\002\000\004\050\346\001\002\000\012\007" +
    "\ufffa\010\ufffa\032\ufffa\050\346\001\002\000\006\005\347" +
    "\016\350\001\002\000\006\005\uffbb\016\uffbb\001\002\000" +
    "\006\050\174\053\172\001\002\000\004\050\351\001\002" +
    "\000\006\005\uffbc\016\uffbc\001\002\000\004\014\353\001" +
    "\002\000\012\007\uffe3\010\uffe3\032\uffe3\050\uffe3\001\002" +
    "\000\006\005\355\016\350\001\002\000\006\050\174\053" +
    "\172\001\002\000\004\014\357\001\002\000\012\007\uffe4" +
    "\010\uffe4\032\uffe4\050\uffe4\001\002\000\014\007\ufff0\010" +
    "\ufff0\032\ufff0\036\ufff0\050\ufff0\001\002\000\014\007\ufff2" +
    "\010\ufff2\032\ufff2\036\ufff2\050\362\001\002\000\004\026" +
    "\363\001\002\000\006\050\174\053\172\001\002\000\004" +
    "\014\365\001\002\000\014\007\uffef\010\uffef\032\uffef\036" +
    "\uffef\050\uffef\001\002\000\014\007\ufff1\010\ufff1\032\ufff1" +
    "\036\ufff1\050\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\006\002\003\074\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\011\075\010\001\001\000\004\005\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\122" +
    "\001\001\000\006\015\015\026\016\001\001\000\004\026" +
    "\120\001\001\000\002\001\001\000\004\077\020\001\001" +
    "\000\002\001\001\000\020\036\034\037\023\040\033\041" +
    "\031\062\030\071\026\072\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\040\075\041\031\062\030\071" +
    "\026\072\027\001\001\000\014\040\074\041\031\062\030" +
    "\071\026\072\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\036\064" +
    "\037\023\040\033\041\031\062\030\071\026\072\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\040" +
    "\001\001\000\012\041\037\062\030\071\026\072\027\001" +
    "\001\000\002\001\001\000\004\063\041\001\001\000\002" +
    "\001\001\000\024\036\044\037\023\040\033\041\031\062" +
    "\030\064\045\065\043\071\026\072\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\036\044\037\023\040\033\041\031\062\030" +
    "\065\050\071\026\072\027\001\001\000\002\001\001\000" +
    "\020\036\052\037\023\040\033\041\031\062\030\071\026" +
    "\072\027\001\001\000\002\001\001\000\020\036\054\037" +
    "\023\040\033\041\031\062\030\071\026\072\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\041\063\062" +
    "\030\071\026\072\027\001\001\000\012\041\062\062\030" +
    "\071\026\072\027\001\001\000\012\041\061\062\030\071" +
    "\026\072\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\036\070\037\023\040\033\041\031\062\030\071\026" +
    "\072\027\073\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\036\073\037\023\040\033" +
    "\041\031\062\030\071\026\072\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\037\117" +
    "\040\033\041\031\062\030\071\026\072\027\001\001\000" +
    "\016\037\116\040\033\041\031\062\030\071\026\072\027" +
    "\001\001\000\014\040\115\041\031\062\030\071\026\072" +
    "\027\001\001\000\014\040\114\041\031\062\030\071\026" +
    "\072\027\001\001\000\016\037\113\040\033\041\031\062" +
    "\030\071\026\072\027\001\001\000\016\037\112\040\033" +
    "\041\031\062\030\071\026\072\027\001\001\000\016\037" +
    "\111\040\033\041\031\062\030\071\026\072\027\001\001" +
    "\000\016\037\110\040\033\041\031\062\030\071\026\072" +
    "\027\001\001\000\014\040\107\041\031\062\030\071\026" +
    "\072\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\360\067\357\001\001" +
    "\000\004\004\124\001\001\000\004\076\342\001\001\000" +
    "\006\044\125\100\126\001\001\000\004\010\240\001\001" +
    "\000\012\045\127\046\130\101\132\102\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\216\106\215" +
    "\001\001\000\006\047\133\103\134\001\001\000\002\001" +
    "\001\000\004\051\136\001\001\000\002\001\001\000\004" +
    "\104\137\001\001\000\002\001\001\000\006\003\141\075" +
    "\010\001\001\000\002\001\001\000\004\105\143\001\001" +
    "\000\004\053\145\001\001\000\004\113\146\001\001\000" +
    "\002\001\001\000\016\054\153\055\154\056\151\057\147" +
    "\115\152\116\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\161\001\001\000\004" +
    "\114\156\001\001\000\002\001\001\000\014\055\160\056" +
    "\151\057\147\115\152\116\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\165\016\172" +
    "\022\166\027\167\034\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\066" +
    "\175\070\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\204\001\001\000\002\001\001" +
    "\000\016\012\206\016\172\022\166\027\167\034\170\043" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\212\001\001\000\002\001\001\000" +
    "\014\012\214\016\172\022\166\027\167\034\170\001\001" +
    "\000\002\001\001\000\004\052\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\221\001\001\000\002" +
    "\001\001\000\006\003\223\075\010\001\001\000\002\001" +
    "\001\000\006\110\226\111\225\001\001\000\004\053\232" +
    "\001\001\000\002\001\001\000\004\042\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\234\001\001\000\002\001\001\000\010\046\236\101" +
    "\132\102\131\001\001\000\002\001\001\000\030\011\245" +
    "\013\253\014\250\024\257\025\260\031\242\035\246\061" +
    "\244\071\247\072\027\117\254\001\001\000\002\001\001" +
    "\000\030\013\336\014\250\024\257\025\260\030\335\031" +
    "\242\035\246\061\244\071\247\072\027\117\254\001\001" +
    "\000\002\001\001\000\004\130\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\125\324" +
    "\001\001\000\002\001\001\000\004\132\316\001\001\000" +
    "\020\036\306\037\023\040\033\041\031\062\030\071\026" +
    "\072\027\001\001\000\002\001\001\000\004\017\272\001" +
    "\001\000\004\120\270\001\001\000\004\121\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\020\263\036\264\037\023\040\033\041\031\062\030" +
    "\071\026\072\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\036\267\037\023\040\033" +
    "\041\031\062\030\071\026\072\027\001\001\000\002\001" +
    "\001\000\004\063\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\274\001\001\000\002\001\001\000" +
    "\006\023\276\124\277\001\001\000\002\001\001\000\006" +
    "\071\300\072\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\304\001\001\000\006" +
    "\071\305\072\027\001\001\000\002\001\001\000\004\126" +
    "\307\001\001\000\002\001\001\000\026\013\311\014\250" +
    "\024\257\025\260\031\242\035\246\061\244\071\247\072" +
    "\027\117\254\001\001\000\004\032\313\001\001\000\004" +
    "\127\314\001\001\000\002\001\001\000\026\013\315\014" +
    "\250\024\257\025\260\031\242\035\246\061\244\071\247" +
    "\072\027\117\254\001\001\000\002\001\001\000\030\011" +
    "\317\013\253\014\250\024\257\025\260\031\242\035\246" +
    "\061\244\071\247\072\027\117\254\001\001\000\002\001" +
    "\001\000\026\013\323\014\250\024\257\025\260\031\242" +
    "\035\246\061\244\071\247\072\027\117\254\001\001\000" +
    "\020\036\322\037\023\040\033\041\031\062\030\071\026" +
    "\072\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\036\326\037\023\040\033\041\031" +
    "\062\030\071\026\072\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\036\331\037\023\040\033\041\031" +
    "\062\030\071\026\072\027\001\001\000\004\131\332\001" +
    "\001\000\002\001\001\000\026\013\334\014\250\024\257" +
    "\025\260\031\242\035\246\061\244\071\247\072\027\117" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\013\341\014\250\024\257\025\260\031" +
    "\242\035\246\061\244\071\247\072\027\117\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\343\007" +
    "\344\001\001\000\004\007\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\351\016\172\022\166\027" +
    "\167\034\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\355\016\172\022\166\027\167\034\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\365\001\001\000\002\001\001\000\014\012\363" +
    "\016\172\022\166\027\167\034\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    StringBuilder mepa, saida;
    Erro e;
    int contaVars;
    int deslocamento;
    int numeroEntradas;
    int rotulo;
    int nivel;
    int auxNumParam;
    int comando_escrita;
    int comando_leitura;
    
    /* Variáveis de controle - Chamada de Procedimento e Função */
    int chamada_rotina;           /* Valor 1 => uma chamada de rotina está sendo compilada */
    int indiceParametro;               /* Indica qual parâmetro está sendo compilado */
    ElemTabSimb elemRotina;          /* Instância do procedimento que está sendo compilado */

    Rotulo ultimoRotulo;
    LinkedList<ElemPilhaSem> pilhaSem = new LinkedList<ElemPilhaSem>();
    ArrayList<ElemTabSimb> tabSimbolo = new ArrayList<ElemTabSimb>();
    ElemTabSimb elemTab;
    ElemPilhaSem elemPilha;

    public sintatico(java.io.Reader input, StringBuilder mep, StringBuilder sai, Erro err) {
        super (new lexico (input));
        mepa = mep;
        saida = sai;
        e = err;
        nivel = -1;
    }

    public void report_semantic_error (String message) {
        report_error (message, cur_token);
        done_parsing();
    }

    public void report_error(String message, Object info) {
        Simbolo simb = (Simbolo)info;
        saida.append("ERRO na linha "+simb.getLine()+": "+message);
        e.setaErro (simb.getLine(), simb.getColumn ());
    }

    public void report_fatal_error (String message, Object info) {
        done_parsing();
    }

    public void syntax_error(java_cup.runtime.Symbol current) {
        report_error("Sintatico", current);
    }

    public void eliminaSimbolos(int nivel){

        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb el;
        while(tamanhoTab != -1 && (el = this.tabSimbolo.get(tamanhoTab)).getNivel() == nivel){
            this.tabSimbolo.remove(tamanhoTab);
            tamanhoTab--;
        }
    }

    public void mostraTabSimb(){
        System.out.println("TabelaSimbolos - "+tabSimbolo.toString()+"\n");
    }

    public void mostraPilhaSem(){
        System.out.println("PilhaSemantica - "+pilhaSem.toString()+"\n");
    }

    public ElemTabSimb buscaSimbolo(String id){
        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb e = null;

        while(tamanhoTab != -1 && !((e = tabSimbolo.get(tamanhoTab)).getNome().equals(id))){
            tamanhoTab--;
        }

        if(tamanhoTab == -1){
            return null;
        }
  
        return e;
    }

    public void cabecalhoFuncao(){
        
        int indice;
        ListIterator it;
        ArrayList<Variavel> parametros = null;
        Funcao funcao;
        ElemTabSimb elemFunc;

        /* Posicionar indice no início da marca DECLARACAO_ROTINA */
        indice = pilhaSem.indexOf(Marca.DECLARACAO_ROTINA);
        it = pilhaSem.listIterator(indice);
        it.next();
        it.remove();

        /* Desempilhar procedimento */
        elemFunc = (ElemTabSimb) it.next();

        /* Instaciar procedimento */
        funcao = new Funcao(rotulo, -numeroEntradas - 3);

        it.remove();
        
        if (numeroEntradas > 0) {
            parametros = criaParametros(it);
        }
        
        /* Add o ArrayList de parâmetros */
        funcao.setParametros(parametros);
        
        /* Adicionar procedimento na tabela de símbolos */
        elemFunc.setInfoC(funcao);

        funcao.setTipo((Tipo)pilhaSem.pollLast());

    }

    public void cabecalhoProcedimento(){

        int indice;
        ListIterator it;
        ArrayList<Variavel> parametros = null;
        Procedimento procedimento;
        ElemTabSimb elemProc;

        /* Posicionar indice no início da marca DECLARACAO_ROTINA */
        indice = pilhaSem.indexOf(Marca.DECLARACAO_ROTINA);
        it = pilhaSem.listIterator(indice);
        it.next();
        it.remove();

        /* Desempilhar procedimento */
        elemProc = (ElemTabSimb) it.next();

        /* Instaciar procedimento */
        procedimento = new Procedimento(rotulo);

        it.remove();
        
        if (numeroEntradas > 0) {
            parametros = criaParametros(it);
        }
        
        /* Add o ArrayList de parâmetros */
        procedimento.setParametros(parametros);
        
        /* Adicionar procedimento na tabela de símbolos */
        elemProc.setInfoC(procedimento);
    }

    /* Cria um ArrayList de parâmetros */
    public ArrayList<Variavel> criaParametros(ListIterator it){
        
        ArrayList<ElemTabSimb> listId;
        ArrayList<Variavel> parametros;
        Mecanismo mec;
        InfoComplementar infoC;
        int aux;
        
        aux = -numeroEntradas - 2;
        parametros = new ArrayList<Variavel>();    

        for (int i = 0; i < numeroEntradas;) {

            /* Desempilhar tipo do Mecanismo */
            listId = new ArrayList<ElemTabSimb>();
            if(elemPilha instanceof Mecanismo){
                mec = (Mecanismo) elemPilha;
            }else{
                mec = (Mecanismo) it.next();
            }
            it.remove();

            /* Desempilhar lista de identificadores */
            while ( it.hasNext() && (elemPilha = (ElemPilhaSem) it.next()) instanceof ElemTabSimb) {
                elemTab = (ElemTabSimb) elemPilha;
                listId.add(elemTab);
                it.remove();
                i++;
            }

            /* Setar os atributos dos parâmetros */
            Variavel param;
            for (int j = 0; j < listId.size(); j++) {

                /* Verificar se é Array */
                if (elemPilha instanceof IndiceArray) {
                    /* Setar limites do Array*/
                    aux = aux - ( ((IndiceArray)elemPilha).getLimSuperior() - ((IndiceArray)elemPilha).getLimInferior() );
                    infoC = new Array(aux, Tipo.INTEGER, (IndiceArray)elemPilha, mec);
                    aux += ((IndiceArray)elemPilha).getLimSuperior() - ((IndiceArray)elemPilha).getLimInferior();
                    parametros.add((Array) infoC);
                }else{
                    infoC = new Variavel(aux, Tipo.INTEGER, mec);
                    parametros.add((Variavel) infoC);
                }

                aux++;                    
                /* Inserir parâmetro na tabela de símbolos*/
                listId.get(j).setInfoC(infoC);
                tabSimbolo.add(listId.get(j));

            }

            if (elemPilha instanceof IndiceArray) {
                it.remove();
            }

        }

        return parametros;

    }

    public void analisaParametro(){
        
        Variavel param = null, arg;
        Funcao f;
        Procedimento p;
        boolean error = false;

        elemTab = (ElemTabSimb) pilhaSem.pollLast();

        if (elemRotina.getInfoC() instanceof Funcao) {
            f = (Funcao) elemRotina.getInfoC();

            if (indiceParametro >= f.getNumParam()) {
                error = true;
            } else {
                param = f.getParametro(indiceParametro);
            }
        } else {
            p = (Procedimento) elemRotina.getInfoC();

            if (indiceParametro >= p.getNumParam()) {
                error = true;
            } else {
                param = p.getParametro(indiceParametro);
            }
        }

        arg = (Variavel) elemTab.getInfoC();

        /* Verificação de tipos na chamada de uma rotina */

        if (error) {
            report_semantic_error("Número de argumentos inválidos!");
        } else if (param.getTipo() == arg.getTipo() && arg.getClass() == param.getClass()) {
            if (param.getMecanismo() == Mecanismo.PAS_VAL) {
                
                if(elemTab.getInfoC() instanceof Array){
                    mepa.append("\tCRVA\t" + elemTab.getNivel() + "," + arg.getDeslocamento() + "," + ((Array)arg).getTamArray() +"\n");
                }else{
                    mepa.append("\tCRVL\t" + elemTab.getNivel() + "," + arg.getDeslocamento() + "\n");
                }
                
            } else {
                mepa.append("\tCREN\t" + elemTab.getNivel() + "," + arg.getDeslocamento() + "\n");
            }
        } else {
            report_semantic_error("Tipos incompatíveis!");
        }
    }

    public void verificaLimiteArray (String limI, String limS){
        
        int limInf, limSup;
        limInf = Integer.parseInt(limI.toString());
        limSup = Integer.parseInt(limS.toString());
        
        if(limInf > limSup){
            report_semantic_error ("O limite inferior deve ser menor ou igual ao limite superior!");
        }

        IndiceArray indA = new IndiceArray(limInf, limSup);
        pilhaSem.add(indA);
    }

    public void declaracaoVariaveis(){
        
        if(contaVars > 0){

            /* Posicionar indice no início da declaração de variáveis */
            int indice = pilhaSem.indexOf(Marca.DECLARACAO_VARS);
            int tamanhoPilha = pilhaSem.size();
            pilhaSem.remove(indice);
            
            for(int i = 0; i < contaVars ; i++){
                
                elemPilha = pilhaSem.get(indice);
                elemTab = (ElemTabSimb) elemPilha;

                if(tabSimbolo.contains(elemTab)){
                    report_semantic_error ("Identificador <"+elemTab.getNome()+"> já declarado!");
                }

                /* Tratar declação de array */    
                if(indice+1 < pilhaSem.size() && pilhaSem.get(indice+1) instanceof IndiceArray){
                    pilhaSem.remove(indice);
                    IndiceArray indAr = (IndiceArray) pilhaSem.get(indice);
                    elemTab.setInfoC(new Array(deslocamento, Tipo.INTEGER, indAr));
                    tabSimbolo.add(elemTab);
                    pilhaSem.remove(indice);
                    
                    /* Ajustar deslocamento */
                    deslocamento += indAr.getLimSuperior() - indAr.getLimInferior() + 1;
                }else{
                    elemTab.setInfoC(new Variavel(deslocamento++, Tipo.INTEGER));
                    tabSimbolo.add(elemTab);
                    pilhaSem.remove(indice);
                }
            }
            
            mepa.append ("\tAMEM\t"+(deslocamento)+"\n");
            elemPilha = new VariaveisDeclaradas(deslocamento);
            pilhaSem.add(elemPilha);
        }
    }

    public void chamadaProcedimento(){
            
        /* Posicionar indice no início da chamada procedimento */
        int indice = pilhaSem.indexOf(Marca.CHAMADA_PROCEDIMENTO);
        pilhaSem.remove(indice);
        elemTab = (ElemTabSimb) pilhaSem.remove(indice);
        Procedimento proc = (Procedimento) elemTab.getInfoC();
        if(proc.getNumParam() > indiceParametro){
            report_semantic_error("Número de argumentos inválidos!");
        }else{
            mepa.append ("\tCHPR\t"+"L"+proc.getRotulo()+"\n");
        }
    }

    public void armazena(){

        elemTab = (ElemTabSimb) pilhaSem.pollLast();
        InfoComplementar infoC = elemTab.getInfoC();
        Variavel v;

        if( infoC instanceof Array){

            v = (Array)infoC;
            /* Verificar se é parâmetro */
            if(v.isParametro()){
                if(v.getMecanismo() == Mecanismo.PAS_END){

                    /* Verificar se está sendo compilado um comando de leitura */
                    if(comando_leitura == 1){
                        mepa.append ("\tALAI\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                    }else{
                        mepa.append ("\tARAI\t"+elemTab.getNivel()+","+ (v.getDeslocamento()+ ((Array)v).getTamArray() - 1)+"\n");
                    }

                }else{
                    mepa.append ("\tARLA\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }
            }else {
                if(comando_leitura == 1){
                    mepa.append ("\tARLA\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }else{
                    mepa.append ("\tARME\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }
            }
        }else if(infoC instanceof Variavel){

            v = (Variavel)infoC;
            if(v.isParametro()){
                if(v.getMecanismo() == Mecanismo.PAS_END){
                    mepa.append ("\tARMI\t"+ elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }else{
                    mepa.append ("\tARMZ\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }
            }else{    
                mepa.append ("\tARMZ\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
            }
        }else if(infoC instanceof Funcao){
            mepa.append ("\tARMZ\t"+(elemTab.getNivel()+1)+","+((Funcao)infoC).getDeslocamento()+"\n");
        }
    }

    /* Seta variáveis de controle para declaração de variáveis */
    public void iniciaDecVars(){
        contaVars = 0; 
        deslocamento = 0;
        pilhaSem.add(Marca.DECLARACAO_VARS);
    }

    public void liberaMemoria(){
        if(pilhaSem.peekLast() instanceof VariaveisDeclaradas){
            elemPilha = pilhaSem.pollLast();
            mepa.append("\tDMEM\t"+((VariaveisDeclaradas)elemPilha).getQuantidade()+"\n");
        }
        eliminaSimbolos(nivel);
        nivel--;
    }

    public void instanciaIdentificador(String id){
        elemTab = new ElemTabSimb(id, nivel);
        if(tabSimbolo.contains(elemTab)){
            report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            elemTab.setInfoC(new Variavel(contaVars));
            tabSimbolo.add(elemTab);
        }
    }

    /* Seta variáveis para a declaração de Procedimentos e Funções */
    public void iniciaDecProcFunc(){
        rotulo++;
        mepa.append ("\tDSVS\tL"+rotulo+"\n");
        pilhaSem.add(new Rotulo(rotulo));
    }

    /* Finaliza declaração de Procedimentos e Funções */
    public void finalizaDecProcFunc(){
        elemPilha = pilhaSem.pollLast();
        if(elemPilha instanceof Rotulo){
          mepa.append ("L"+((Rotulo)elemPilha).getRotulo()+":\tNADA\n");
        }
    }

    public void inicioChamadaFuncao(String id){
        elemTab = buscaSimbolo(id);
        if(elemTab == null){
            report_semantic_error ("Função <"+id+"> não declarada!");
        }else{
            pilhaSem.add(elemTab);
            elemRotina = elemTab;
            chamada_rotina = 1;
            mepa.append ("\tAMEM\t"+1+"\n");
        }
    }

    public void instanciaParametros(String id){
        elemTab = new ElemTabSimb(id, nivel);
        if(tabSimbolo.contains(elemTab)){
            report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            numeroEntradas++;
            pilhaSem.add(elemTab);
        }
    }
    
    public void inicioChamadaProc(String id){
        elemTab = buscaSimbolo(id);
        if(elemTab == null){
            report_semantic_error ("Procedimento <"+id+"> não declarado!");
        }else{
            pilhaSem.add(Marca.CHAMADA_PROCEDIMENTO);
            pilhaSem.add(elemTab);
            elemRotina = elemTab;
        }
    }

    public void empilhaIdentificador(String id){
        elemTab = buscaSimbolo(id);
        if(elemTab == null){
            report_semantic_error ("Identificador <"+id+"> não declarado!");
        }else{
            pilhaSem.add(elemTab);
        }
    }

    public void inicioIF(){
        rotulo++;
        mepa.append ("\tDSVF\tL"+rotulo+"\n");
        pilhaSem.add (new Rotulo(rotulo));
    }

    public void fimIF(){
        elemPilha = pilhaSem.pollLast();
        mepa.append ("L"+((Rotulo)elemPilha).getRotulo()+":\tNADA\n");
    }

    public void inicioElse(){
        rotulo++;
        mepa.append ("\tDSVS\tL"+rotulo+"\n");
        elemPilha = pilhaSem.pollLast();
        mepa.append ("L"+((Rotulo)elemPilha).getRotulo()+":\tNADA\n");
        pilhaSem.add (new Rotulo(rotulo));
    }

    public void inicioComRepetitivo(){
        rotulo++;
        mepa.append ("L"+rotulo+":\tNADA\n");
        pilhaSem.add (new Rotulo(rotulo));
    }

    public void condicaoWhile(){
        rotulo++;
        mepa.append ("\tDSVF\tL"+rotulo+"\n");
        pilhaSem.add (new Rotulo(rotulo));
    }
    
    public void fimWhile(){
        ultimoRotulo = (Rotulo) pilhaSem.pollLast();
        elemPilha = pilhaSem.pollLast();
        mepa.append ("\tDSVS\tL"+((Rotulo)elemPilha).getRotulo()+"\n");
        mepa.append ("L"+ultimoRotulo.getRotulo()+":\tNADA\n");
    }

    public void condicaoRepeat(){
        ultimoRotulo = (Rotulo) pilhaSem.pollLast();
        mepa.append ("\tDSVF\tL"+ultimoRotulo.getRotulo()+"\n");
    }

    public void varAcesso(){
        elemTab = (ElemTabSimb) pilhaSem.pollLast();
        InfoComplementar infoC = elemTab.getInfoC();
        Variavel v;

        if (infoC instanceof Array) {
            
            v = (Array)infoC;
            /* Verificar se é parâmetro */
            mepa.append("\tCRCT\t" + ((Array)v).getLimInferior() + "\n");
            mepa.append("\tSUBT\n");
            if(v.isParametro()){
                if(v.getMecanismo() == Mecanismo.PAS_END){  
                    mepa.append("\tCREI\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }else{
                    mepa.append("\tCREL\t" + elemTab.getNivel() + "," + v.getDeslocamento() + "\n");
                }
            }else{
                mepa.append("\tCREL\t" + elemTab.getNivel() + "," + v.getDeslocamento() + "\n");
            }
        } else {
            mepa.append("\tCRVL\t" + elemTab.getNivel() + "," + ((Variavel) infoC).getDeslocamento() + "\n");            
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintatico$actions {
  private final sintatico parser;

  /** Constructor */
  CUP$sintatico$actions(sintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintatico$do_action(
    int                        CUP$sintatico$act_num,
    java_cup.runtime.lr_parser CUP$sintatico$parser,
    java.util.Stack            CUP$sintatico$stack,
    int                        CUP$sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintatico$result;

      /* select the action based on the action number */
      switch (CUP$sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fator ::= S_NOT fator 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tNEGA\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // fator ::= S_ABREPAR expressao S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // fator ::= chamada_funcao 
            {
              Object RESULT =null;
		
        parser.chamada_rotina = 0;
        parser.indiceParametro = 0;
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
        Funcao func = (Funcao) parser.elemTab.getInfoC();
        parser.mepa.append ("\tCHPR\t"+"L"+func.getRotulo()+"\n");
     
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // fator ::= S_NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		 
        parser.mepa.append ("\tCRCT\t"+numero+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // fator ::= variavel_de_acesso 
            {
              Object RESULT =null;
		
        if(parser.chamada_rotina == 1){
            parser.analisaParametro();
        }else{
            parser.varAcesso();
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // termo ::= fator 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // termo ::= termo S_AND fator 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tCONJ\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // termo ::= termo S_DIV fator 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tDIVI\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // termo ::= termo S_VEZES fator 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tMULT\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expressao_simples ::= termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expressao_simples ::= S_MENOS termo 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tINVR\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expressao_simples ::= S_MAIS termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expressao_simples ::= expressao_simples S_OR termo 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tDISJ\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expressao_simples ::= expressao_simples S_MENOS termo 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tSUBT\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expressao_simples ::= expressao_simples S_MAIS termo 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tSOMA\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expressao ::= expressao_simples 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expressao ::= expressao_simples S_MAIGUAL expressao_simples 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tCMAG\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expressao ::= expressao_simples S_MEIGUAL expressao_simples 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tCMEG\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expressao ::= expressao_simples S_MAIOR expressao_simples 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tCMMA\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expressao ::= expressao_simples S_MENOR expressao_simples 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tCMME\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expressao ::= expressao_simples S_DIFERENTE expressao_simples 
            {
              Object RESULT =null;
		  
        parser.mepa.append ("\tCMDG\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expressao ::= expressao_simples S_IGUAL expressao_simples 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tCMIG\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // repetitivo ::= S_REPEAT NT$30 sequencia_comandos S_UNTIL expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.condicaoRepeat();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",27, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$30 ::= 
            {
              Object RESULT =null;

        parser.inicioComRepetitivo();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$30",88, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // repetitivo ::= S_WHILE NT$28 expressao NT$29 S_DO comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.fimWhile();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",27, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.condicaoWhile();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$29",87, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$28 ::= 
            {
              Object RESULT =null;

        parser.inicioComRepetitivo();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$28",86, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // alternativa_cond ::= S_ELSE NT$27 comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",24, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$27 ::= 
            {
              Object RESULT =null;

        parser.inicioElse();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$27",85, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // alternativa_cond ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",24, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicional ::= S_IF expressao NT$26 S_THEN comando_sem_rotulo alternativa_cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.fimIF();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("condicional",23, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$26 ::= 
            {
              Object RESULT =null;

        parser.inicioIF();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$26",84, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lista_comandos_sem_rotulo ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",22, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lista_comandos_sem_rotulo ::= lista_comandos_sem_rotulo S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",22, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // composto ::= S_BEGIN lista_comandos_sem_rotulo S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("composto",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // indice_de_lista_de_expressao ::= expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("indice_de_lista_de_expressao",57, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // indice_de_lista_de_expressao ::= indice_de_lista_de_expressao S_VIRGULA expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("indice_de_lista_de_expressao",57, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variavel_indexada ::= variavel_de_acesso S_ABRECOL indice_de_lista_de_expressao S_FECHACOL 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variavel_indexada",56, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // variavel_de_acesso ::= variavel_indexada 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variavel_de_acesso",55, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variavel_de_acesso ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.empilhaIdentificador(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variavel_de_acesso",55, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // atribuicao ::= variavel_de_acesso NT$25 S_ATRIBUI expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("atribuicao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$25 ::= 
            {
              Object RESULT =null;

        InfoComplementar infoC = parser.elemTab.getInfoC();
        if (infoC instanceof Array) {
            parser.mepa.append("\tCRCT\t" + ((Array) infoC).getLimInferior() + "\n");
            parser.mepa.append("\tSUBT\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$25",83, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_de_variaveis ::= NT$24 variavel_de_acesso 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.peekLast();
        InfoComplementar infoC = parser.elemTab.getInfoC();
        if( infoC instanceof Array){
            parser.mepa.append ("\tCRCT\t"+((Array)infoC).getLimInferior()+"\n");
            parser.mepa.append ("\tSUBT\n");
        }
        parser.armazena();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$24 ::= 
            {
              Object RESULT =null;
 parser.mepa.append("\tLEIT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$24",82, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_de_variaveis ::= lista_de_variaveis S_VIRGULA NT$23 variavel_de_acesso 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.peekLast();
        InfoComplementar infoC = parser.elemTab.getInfoC();
        if( infoC instanceof Array){
            parser.mepa.append ("\tCRCT\t"+((Array)infoC).getLimInferior()+"\n");
            parser.mepa.append ("\tSUBT\n");
        }
        parser.armazena();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$23 ::= 
            {
              Object RESULT =null;
 parser.mepa.append("\tLEIT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$23",81, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_de_variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_de_expressoes ::= expressao 
            {
              Object RESULT =null;
		
        if(parser.comando_escrita == 1){
            parser.mepa.append ("\tIMPR\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_de_expressoes ::= lista_de_expressoes S_VIRGULA expressao 
            {
              Object RESULT =null;
		
        if(parser.comando_escrita == 1){
            parser.mepa.append ("\tIMPR\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_de_expressoes ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // chamada_comando_leitura ::= S_READ NT$22 S_ABREPAR lista_de_variaveis S_FECHAPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_leitura",13, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$22 ::= 
            {
              Object RESULT =null;

        //parser.pilhaSem.add(Marca.COMANDO_LEITURA);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$22",80, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // chamada_comando_escrita ::= S_WRITE NT$21 S_ABREPAR lista_de_expressoes S_FECHAPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.comando_escrita = 0;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_escrita",10, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$21 ::= 
            {
              Object RESULT =null;

        parser.comando_escrita = 1;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$21",79, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_atuais ::= expressao S_DOISPTOS expressao S_DOISPTOS expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",51, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_atuais ::= expressao S_DOISPTOS expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",51, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametros_atuais ::= expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",51, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lista_de_parametros_atuais ::= parametros_atuais 
            {
              Object RESULT =null;
		
        parser.indiceParametro++;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",50, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_de_parametros_atuais ::= lista_de_parametros_atuais S_VIRGULA parametros_atuais 
            {
              Object RESULT =null;
		
        parser.indiceParametro++;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",50, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros ::= S_ABREPAR lista_de_parametros_atuais S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros",49, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // chamada_procedimento ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.inicioChamadaProc(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",47, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // chamada_procedimento ::= S_IDENTIF NT$20 parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",47, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$20 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.chamada_rotina = 1;
        parser.indiceParametro = 0;      
        parser.inicioChamadaProc(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$20",78, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comando_sem_rotulo ::= repetitivo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comando_sem_rotulo ::= condicional 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comando_sem_rotulo ::= composto 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comando_sem_rotulo ::= atribuicao 
            {
              Object RESULT =null;
		
            parser.armazena();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comando_sem_rotulo ::= chamada_procedimento 
            {
              Object RESULT =null;
		
            parser.chamadaProcedimento();
            parser.chamada_rotina = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comando_sem_rotulo ::= NT$19 chamada_comando_leitura 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 parser.comando_leitura = 0; 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              Object RESULT =null;
 parser.comando_leitura = 1; 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$19",77, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comando_sem_rotulo ::= chamada_comando_escrita 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comando_sem_rotulo ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sequencia_comandos ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sequencia_comandos ::= sequencia_comandos S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // corpo ::= S_BEGIN sequencia_comandos S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("corpo",6, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_de_identificadores ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        parser.pilhaSem.add(parser.elemTab);
        parser.contaVars++;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",5, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_de_identificadores ::= lista_de_identificadores S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);    
        parser.pilhaSem.add(parser.elemTab);
        parser.contaVars++;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",5, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_de_parametros ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.instanciaParametros(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",46, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_de_parametros ::= lista_de_parametros S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.instanciaParametros(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",46, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametro_por_referencia ::= NT$18 S_VAR lista_de_parametros S_DOISPTOS denotacao_de_tipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_referencia",45, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$18 ::= 
            {
              Object RESULT =null;

        parser.pilhaSem.add(Mecanismo.PAS_END);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$18",76, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametro_por_valor ::= NT$17 lista_de_parametros S_DOISPTOS denotacao_de_tipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_valor",44, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$17 ::= 
            {
              Object RESULT =null;

        parser.pilhaSem.add(Mecanismo.PAS_VAL);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$17",75, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // secao_de_parametros_formais ::= parametro_por_referencia 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",43, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // secao_de_parametros_formais ::= parametro_por_valor 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",43, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // secao_lista_de_parametros_formais ::= secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",42, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // secao_lista_de_parametros_formais ::= secao_lista_de_parametros_formais S_PONTOVG secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",42, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_formal_de_parametros ::= S_ABREPAR NT$15 secao_lista_de_parametros_formais NT$16 S_FECHAPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_formal_de_parametros",41, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.nivel--;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$16",74, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$15 ::= 
            {
              Object RESULT =null;

        parser.nivel++;
        parser.numeroEntradas = 0;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$15",73, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // chamada_funcao ::= S_IDENTIF NT$14 parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_funcao",48, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$14 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.inicioChamadaFuncao(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$14",72, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_de_retorno ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        //Buscar tipo na tabela de simbolos
        parser.pilhaSem.add(Tipo.INTEGER);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_de_retorno",32, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cabecalho_funcao ::= S_FUNCTION S_IDENTIF NT$13 lista_formal_de_parametros S_DOISPTOS tipo_de_retorno 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_funcao",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$13 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(Marca.DECLARACAO_ROTINA);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$13",71, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cabecalho_funcao ::= S_FUNCTION S_IDENTIF NT$12 S_DOISPTOS tipo_de_retorno 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_funcao",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(Marca.DECLARACAO_ROTINA);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$12",70, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracao_de_funcao ::= NT$10 cabecalho_funcao NT$11 S_PONTOVG bloco 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.mepa.append ("\tRTPR\t"+(parser.nivel+1)+", "+parser.numeroEntradas+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao",38, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.cabecalhoFuncao();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$11",69, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$10 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("L"+parser.rotulo+":\tENPR\t"+(parser.nivel+1)+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$10",68, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF NT$9 lista_formal_de_parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",39, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(Marca.DECLARACAO_ROTINA);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$9",67, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(Marca.DECLARACAO_ROTINA);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",39, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracao_de_procedimento ::= NT$7 cabecalho_procedimento NT$8 S_PONTOVG bloco 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.mepa.append ("\tRTPR\t"+(parser.nivel+1)+","+parser.numeroEntradas+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_procedimento",37, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.cabecalhoProcedimento();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$8",66, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$7 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("L"+parser.rotulo+":\tENPR\t"+(parser.nivel+1)+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$7",65, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracao_de_funcao_ou_procedimento ::= NT$6 declaracao_de_funcao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao_ou_procedimento",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              Object RESULT =null;

            parser.rotulo++;
            parser.auxNumParam = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$6",64, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracao_de_funcao_ou_procedimento ::= NT$5 declaracao_de_procedimento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao_ou_procedimento",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT =null;

            parser.rotulo++;
            parser.auxNumParam = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$5",63, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_de_declaracao_de_funcao_ou_procedimento ::= declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_de_declaracao_de_funcao_ou_procedimento ::= lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracao_de_funcoes_e_procendimentos ::= NT$4 lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.finalizaDecProcFunc();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",34, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;

        parser.iniciaDecProcFunc();
      
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$4",62, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracao_de_funcoes_e_procendimentos ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",34, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracoes_de_vars ::= lista_de_identificadores S_DOISPTOS denotacao_de_tipo S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracoes_de_vars ::= declaracoes_de_vars lista_de_identificadores S_DOISPTOS denotacao_de_tipo S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_indice ::= S_NUMERO S_PTOPTO S_NUMERO 
            {
              Object RESULT =null;
		int limInfleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int limInfright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object limInf = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		int limSupleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int limSupright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object limSup = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.verificaLimiteArray(limInf.toString(), limSup.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_indice",54, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_de_indices ::= tipo_indice 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_indices",52, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_de_indices ::= lista_de_indices S_VIRGULA tipo_indice 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_indices",52, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= denotacao_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_array ::= S_ARRAY S_ABRECOL lista_de_indices S_FECHACOL S_OF tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_array",26, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estrutura_tipo ::= tipo_array 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("estrutura_tipo",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // novo_tipo_estrutura ::= estrutura_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("novo_tipo_estrutura",16, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // novo_tipo ::= novo_tipo_estrutura 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("novo_tipo",12, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // denotacao_de_tipo ::= novo_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("denotacao_de_tipo",8, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // denotacao_de_tipo ::= S_IDENTIF 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("denotacao_de_tipo",8, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definicao_de_tipo ::= S_IDENTIF S_IGUAL denotacao_de_tipo S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("definicao_de_tipo",53, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_de_tipo ::= definicao_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_tipo",25, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_de_tipo ::= lista_de_tipo definicao_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_tipo",25, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracao_de_tipo ::= S_TYPE lista_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_tipo",15, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracao_de_tipo ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_tipo",15, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definicao_de_constante ::= S_IDENTIF NT$3 S_IGUAL expressao S_PONTOVG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("definicao_de_constante",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.instanciaIdentificador(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$3",61, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_de_constante ::= definicao_de_constante 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_constante",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_de_constante ::= lista_de_constante definicao_de_constante 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_constante",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracao_de_constante ::= S_CONST lista_de_constante 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_constante",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracao_de_constante ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_constante",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variaveis ::= S_VAR NT$2 declaracoes_de_vars 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        parser.declaracaoVariaveis();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
 
        parser.iniciaDecVars();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$2",60, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloco ::= NT$1 declaracao_de_constante declaracao_de_tipo variaveis declaracao_de_funcoes_e_procendimentos corpo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)).value;
		 parser.liberaMemoria(); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.nivel++; 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$1",59, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 S_PROGRAM S_IDENTIF S_PONTOVG bloco S_PONTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)).value;
		 parser.mepa.append ("\tPARA\n\tFIM\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.mepa.append ("\tINPP\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		RESULT = start_val;
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintatico$parser.done_parsing();
          return CUP$sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

