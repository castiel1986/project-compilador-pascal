
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 30 15:31:43 BRT 2011
//----------------------------------------------------

package controle;

import java.util.*;
import entidade.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 30 15:31:43 BRT 2011
  */
public class sintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\074\002\000\002\002" +
    "\010\000\002\075\002\000\002\003\010\000\002\004\002" +
    "\000\002\076\002\000\002\004\005\000\002\005\002\000" +
    "\002\005\004\000\002\015\004\000\002\015\003\000\002" +
    "\077\002\000\002\026\007\000\002\021\002\000\002\021" +
    "\004\000\002\033\004\000\002\033\003\000\002\067\006" +
    "\000\002\012\003\000\002\012\003\000\002\016\003\000" +
    "\002\022\003\000\002\027\003\000\002\034\010\000\002" +
    "\043\003\000\002\066\005\000\002\066\003\000\002\070" +
    "\005\000\002\006\007\000\002\006\006\000\002\044\002" +
    "\000\002\100\002\000\002\044\005\000\002\045\005\000" +
    "\002\045\003\000\002\101\002\000\002\046\004\000\002" +
    "\102\002\000\002\046\004\000\002\103\002\000\002\104" +
    "\002\000\002\047\007\000\002\051\004\000\002\105\002" +
    "\000\002\051\006\000\002\106\002\000\002\107\002\000" +
    "\002\050\007\000\002\110\002\000\002\052\007\000\002" +
    "\111\002\000\002\052\010\000\002\042\003\000\002\112" +
    "\002\000\002\062\005\000\002\113\002\000\002\114\002" +
    "\000\002\053\007\000\002\054\005\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\056\005\000\002" +
    "\057\006\000\002\060\005\000\002\060\003\000\002\007" +
    "\005\000\002\007\003\000\002\010\005\000\002\011\005" +
    "\000\002\011\003\000\002\013\002\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\115" +
    "\002\000\002\061\005\000\002\061\003\000\002\063\005" +
    "\000\002\064\005\000\002\064\003\000\002\065\003\000" +
    "\002\065\005\000\002\065\007\000\002\014\006\000\002" +
    "\017\006\000\002\020\002\000\002\020\005\000\002\020" +
    "\003\000\002\023\002\000\002\023\005\000\002\023\003" +
    "\000\002\024\005\000\002\071\003\000\002\071\003\000" +
    "\002\072\006\000\002\073\005\000\002\073\003\000\002" +
    "\025\005\000\002\030\005\000\002\030\003\000\002\116" +
    "\002\000\002\031\010\000\002\032\002\000\002\117\002" +
    "\000\002\032\005\000\002\120\002\000\002\121\002\000" +
    "\002\035\010\000\002\122\002\000\002\035\007\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\003" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\004\000\002\037\004\000\002\037\003\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\005\000\002\041\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\004\013\000\001\002\000\004\002\355\001" +
    "\002\000\004\013\006\001\002\000\004\050\007\001\002" +
    "\000\004\014\010\001\002\000\016\007\ufffe\010\ufffe\032" +
    "\ufffe\036\ufffe\051\ufffe\052\ufffe\001\002\000\016\007\ufff9" +
    "\010\ufff9\032\ufff9\036\ufff9\051\015\052\ufff9\001\002\000" +
    "\004\031\013\001\002\000\004\002\uffff\001\002\000\014" +
    "\007\ufff3\010\ufff3\032\ufff3\036\ufff3\052\112\001\002\000" +
    "\004\050\020\001\002\000\016\007\ufff8\010\ufff8\032\ufff8" +
    "\036\ufff8\050\020\052\ufff8\001\002\000\016\007\ufff6\010" +
    "\ufff6\032\ufff6\036\ufff6\050\ufff6\052\ufff6\001\002\000\004" +
    "\026\ufff5\001\002\000\004\026\022\001\002\000\016\015" +
    "\031\020\023\027\026\035\025\042\035\050\034\001\002" +
    "\000\056\004\uff7b\005\uff7b\006\uff7b\011\uff7b\012\uff7b\014" +
    "\uff7b\016\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b" +
    "\033\uff7b\034\uff7b\035\uff7b\037\uff7b\040\uff7b\041\uff7b\044" +
    "\uff7b\045\uff7b\047\uff7b\055\uff7b\001\002\000\050\004\070" +
    "\005\uff87\006\uff87\011\067\012\075\014\uff87\016\uff87\024" +
    "\072\025\074\026\076\027\073\033\uff87\034\uff87\035\071" +
    "\037\uff87\044\uff87\045\077\047\uff87\055\uff87\001\002\000" +
    "\012\015\031\020\023\042\035\050\034\001\002\000\012" +
    "\015\031\020\023\042\035\050\034\001\002\000\056\004" +
    "\uff7a\005\uff7a\006\uff7a\011\uff7a\012\uff7a\014\uff7a\016\uff7a" +
    "\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\033\uff7a\034" +
    "\uff7a\035\uff7a\037\uff7a\040\uff7a\041\uff7a\044\uff7a\045\uff7a" +
    "\047\uff7a\055\uff7a\001\002\000\056\004\uff7d\005\uff7d\006" +
    "\uff7d\011\uff7d\012\uff7d\014\uff7d\016\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\033\uff7d\034\uff7d\035\uff7d\037" +
    "\uff7d\040\uff7d\041\uff7d\044\uff7d\045\uff7d\047\uff7d\055\uff7d" +
    "\001\002\000\016\015\031\020\023\027\026\035\025\042" +
    "\035\050\034\001\002\000\056\004\uff81\005\uff81\006\uff81" +
    "\011\uff81\012\uff81\014\uff81\016\uff81\024\uff81\025\uff81\026" +
    "\uff81\027\uff81\030\056\033\uff81\034\uff81\035\uff81\037\uff81" +
    "\040\055\041\057\044\uff81\045\uff81\047\uff81\055\uff81\001" +
    "\002\000\004\014\054\001\002\000\060\004\uff7c\005\uff7c" +
    "\006\uff7c\011\uff7c\012\uff7c\014\uff7c\015\uffcb\016\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\033\uff7c\034\uff7c" +
    "\035\uff7c\037\uff7c\040\uff7c\041\uff7c\044\uff7c\045\uff7c\047" +
    "\uff7c\055\uff7c\001\002\000\012\015\031\020\023\042\035" +
    "\050\034\001\002\000\056\004\uff78\005\uff78\006\uff78\011" +
    "\uff78\012\uff78\014\uff78\016\uff78\024\uff78\025\uff78\026\uff78" +
    "\027\uff78\030\uff78\033\uff78\034\uff78\035\uff78\037\uff78\040" +
    "\uff78\041\uff78\044\uff78\045\uff78\047\uff78\055\uff78\001\002" +
    "\000\004\015\041\001\002\000\056\004\uffca\005\uffca\006" +
    "\uffca\011\uffca\012\uffca\014\uffca\016\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\033\uffca\034\uffca\035\uffca\037" +
    "\uffca\040\uffca\041\uffca\044\uffca\045\uffca\047\uffca\055\uffca" +
    "\001\002\000\016\015\031\020\023\027\026\035\025\042" +
    "\035\050\034\001\002\000\006\006\uffac\016\uffac\001\002" +
    "\000\010\005\050\006\uffab\016\uffab\001\002\000\006\006" +
    "\045\016\046\001\002\000\056\004\uffae\005\uffae\006\uffae" +
    "\011\uffae\012\uffae\014\uffae\016\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\033\uffae\034\uffae\035\uffae\037\uffae" +
    "\040\uffae\041\uffae\044\uffae\045\uffae\047\uffae\055\uffae\001" +
    "\002\000\016\015\031\020\023\027\026\035\025\042\035" +
    "\050\034\001\002\000\006\006\uffad\016\uffad\001\002\000" +
    "\016\015\031\020\023\027\026\035\025\042\035\050\034" +
    "\001\002\000\010\005\052\006\uffaa\016\uffaa\001\002\000" +
    "\016\015\031\020\023\027\026\035\025\042\035\050\034" +
    "\001\002\000\006\006\uffa9\016\uffa9\001\002\000\016\007" +
    "\ufff4\010\ufff4\032\ufff4\036\ufff4\050\ufff4\052\ufff4\001\002" +
    "\000\012\015\031\020\023\042\035\050\034\001\002\000" +
    "\012\015\031\020\023\042\035\050\034\001\002\000\012" +
    "\015\031\020\023\042\035\050\034\001\002\000\056\004" +
    "\uff7e\005\uff7e\006\uff7e\011\uff7e\012\uff7e\014\uff7e\016\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\033\uff7e\034" +
    "\uff7e\035\uff7e\037\uff7e\040\uff7e\041\uff7e\044\uff7e\045\uff7e" +
    "\047\uff7e\055\uff7e\001\002\000\056\004\uff80\005\uff80\006" +
    "\uff80\011\uff80\012\uff80\014\uff80\016\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\030\uff80\033\uff80\034\uff80\035\uff80\037" +
    "\uff80\040\uff80\041\uff80\044\uff80\045\uff80\047\uff80\055\uff80" +
    "\001\002\000\056\004\uff7f\005\uff7f\006\uff7f\011\uff7f\012" +
    "\uff7f\014\uff7f\016\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\033\uff7f\034\uff7f\035\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\044\uff7f\045\uff7f\047\uff7f\055\uff7f\001\002\000\004" +
    "\006\064\001\002\000\056\004\uff79\005\uff79\006\uff79\011" +
    "\uff79\012\uff79\014\uff79\016\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\033\uff79\034\uff79\035\uff79\037\uff79\040" +
    "\uff79\041\uff79\044\uff79\045\uff79\047\uff79\055\uff79\001\002" +
    "\000\056\004\uff82\005\uff82\006\uff82\011\uff82\012\uff82\014" +
    "\uff82\016\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\056" +
    "\033\uff82\034\uff82\035\uff82\037\uff82\040\055\041\057\044" +
    "\uff82\045\uff82\047\uff82\055\uff82\001\002\000\056\004\uff83" +
    "\005\uff83\006\uff83\011\uff83\012\uff83\014\uff83\016\uff83\024" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\056\033\uff83\034\uff83" +
    "\035\uff83\037\uff83\040\055\041\057\044\uff83\045\uff83\047" +
    "\uff83\055\uff83\001\002\000\016\015\031\020\023\027\026" +
    "\035\025\042\035\050\034\001\002\000\016\015\031\020" +
    "\023\027\026\035\025\042\035\050\034\001\002\000\012" +
    "\015\031\020\023\042\035\050\034\001\002\000\016\015" +
    "\031\020\023\027\026\035\025\042\035\050\034\001\002" +
    "\000\012\015\031\020\023\042\035\050\034\001\002\000" +
    "\016\015\031\020\023\027\026\035\025\042\035\050\034" +
    "\001\002\000\016\015\031\020\023\027\026\035\025\042" +
    "\035\050\034\001\002\000\016\015\031\020\023\027\026" +
    "\035\025\042\035\050\034\001\002\000\012\015\031\020" +
    "\023\042\035\050\034\001\002\000\056\004\uff84\005\uff84" +
    "\006\uff84\011\uff84\012\uff84\014\uff84\016\uff84\024\uff84\025" +
    "\uff84\026\uff84\027\uff84\030\056\033\uff84\034\uff84\035\uff84" +
    "\037\uff84\040\055\041\057\044\uff84\045\uff84\047\uff84\055" +
    "\uff84\001\002\000\034\005\uff8d\006\uff8d\014\uff8d\016\uff8d" +
    "\027\073\033\uff8d\034\uff8d\035\071\037\uff8d\044\uff8d\045" +
    "\077\047\uff8d\055\uff8d\001\002\000\034\005\uff89\006\uff89" +
    "\014\uff89\016\uff89\027\073\033\uff89\034\uff89\035\071\037" +
    "\uff89\044\uff89\045\077\047\uff89\055\uff89\001\002\000\034" +
    "\005\uff8b\006\uff8b\014\uff8b\016\uff8b\027\073\033\uff8b\034" +
    "\uff8b\035\071\037\uff8b\044\uff8b\045\077\047\uff8b\055\uff8b" +
    "\001\002\000\056\004\uff85\005\uff85\006\uff85\011\uff85\012" +
    "\uff85\014\uff85\016\uff85\024\uff85\025\uff85\026\uff85\027\uff85" +
    "\030\056\033\uff85\034\uff85\035\uff85\037\uff85\040\055\041" +
    "\057\044\uff85\045\uff85\047\uff85\055\uff85\001\002\000\034" +
    "\005\uff8a\006\uff8a\014\uff8a\016\uff8a\027\073\033\uff8a\034" +
    "\uff8a\035\071\037\uff8a\044\uff8a\045\077\047\uff8a\055\uff8a" +
    "\001\002\000\056\004\uff86\005\uff86\006\uff86\011\uff86\012" +
    "\uff86\014\uff86\016\uff86\024\uff86\025\uff86\026\uff86\027\uff86" +
    "\030\056\033\uff86\034\uff86\035\uff86\037\uff86\040\055\041" +
    "\057\044\uff86\045\uff86\047\uff86\055\uff86\001\002\000\034" +
    "\005\uff8c\006\uff8c\014\uff8c\016\uff8c\027\073\033\uff8c\034" +
    "\uff8c\035\071\037\uff8c\044\uff8c\045\077\047\uff8c\055\uff8c" +
    "\001\002\000\034\005\uff88\006\uff88\014\uff88\016\uff88\027" +
    "\073\033\uff88\034\uff88\035\071\037\uff88\044\uff88\045\077" +
    "\047\uff88\055\uff88\001\002\000\016\007\ufff7\010\ufff7\032" +
    "\ufff7\036\ufff7\050\ufff7\052\ufff7\001\002\000\004\050\350" +
    "\001\002\000\012\007\ufffc\010\ufffc\032\ufffc\036\114\001" +
    "\002\000\004\050\ufffb\001\002\000\010\007\uffe1\010\uffe1" +
    "\032\uffe2\001\002\000\004\032\204\001\002\000\006\007" +
    "\uffdd\010\uffdb\001\002\000\004\014\202\001\002\000\004" +
    "\014\uffde\001\002\000\004\010\uffd3\001\002\000\004\007" +
    "\uffd9\001\002\000\004\014\uffdc\001\002\000\004\007\126" +
    "\001\002\000\004\050\133\001\002\000\004\014\uffd8\001" +
    "\002\000\004\014\131\001\002\000\016\007\ufffe\010\ufffe" +
    "\032\ufffe\036\ufffe\051\ufffe\052\ufffe\001\002\000\004\014" +
    "\uffd7\001\002\000\006\014\uffd6\015\uffd5\001\002\000\004" +
    "\015\135\001\002\000\006\036\uffc9\050\uffc9\001\002\000" +
    "\004\014\uffd4\001\002\000\006\036\142\050\146\001\002" +
    "\000\006\006\uffc3\014\uffc3\001\002\000\006\006\uffc4\014" +
    "\uffc4\001\002\000\004\050\146\001\002\000\006\006\uffc8" +
    "\014\153\001\002\000\006\005\147\016\150\001\002\000" +
    "\006\006\uffc5\014\uffc5\001\002\000\006\005\uffbf\016\uffbf" +
    "\001\002\000\004\050\152\001\002\000\004\050\151\001" +
    "\002\000\006\005\uffc0\016\uffc0\001\002\000\006\006\uffc2" +
    "\014\uffc2\001\002\000\006\036\142\050\146\001\002\000" +
    "\004\006\155\001\002\000\006\005\uffc7\014\uffc7\001\002" +
    "\000\006\006\uffc6\014\uffc6\001\002\000\006\005\160\016" +
    "\150\001\002\000\004\050\161\001\002\000\006\006\uffc1" +
    "\014\uffc1\001\002\000\004\010\164\001\002\000\004\014" +
    "\uffda\001\002\000\004\050\171\001\002\000\004\014\uffd2" +
    "\001\002\000\004\014\167\001\002\000\016\007\ufffe\010" +
    "\ufffe\032\ufffe\036\ufffe\051\ufffe\052\ufffe\001\002\000\004" +
    "\014\uffd1\001\002\000\006\005\uffd0\015\uffce\001\002\000" +
    "\004\015\135\001\002\000\004\005\174\001\002\000\004" +
    "\050\176\001\002\000\004\014\uffcf\001\002\000\004\014" +
    "\uffcc\001\002\000\004\005\200\001\002\000\004\050\176" +
    "\001\002\000\004\014\uffcd\001\002\000\010\007\uffdd\010" +
    "\uffdb\032\uffe0\001\002\000\004\014\uffdf\001\002\000\024" +
    "\014\uffb9\021\215\022\221\023\223\032\222\037\uffb9\043" +
    "\211\046\224\050\213\001\002\000\006\014\ufffd\031\ufffd" +
    "\001\002\000\010\014\uffba\037\uffba\047\uffba\001\002\000" +
    "\012\014\uffb6\034\uffb6\037\uffb6\047\uffb6\001\002\000\006" +
    "\017\277\054\300\001\002\000\016\015\031\020\023\027" +
    "\026\035\025\042\035\050\034\001\002\000\012\014\uffb8" +
    "\034\uffb8\037\uffb8\047\uffb8\001\002\000\020\014\uffaf\015" +
    "\uffb1\017\uff9f\034\uffaf\037\uffaf\047\uffaf\054\uff9f\001\002" +
    "\000\012\014\uffb5\034\uffb5\037\uffb5\047\uffb5\001\002\000" +
    "\016\015\uff92\020\uff92\027\uff92\035\uff92\042\uff92\050\uff92" +
    "\001\002\000\012\014\uffb7\034\uffb7\037\uffb7\047\uffb7\001" +
    "\002\000\012\014\uffb4\034\uffb4\037\uffb4\047\uffb4\001\002" +
    "\000\012\014\uffb3\034\uffb3\037\uffb3\047\uffb3\001\002\000" +
    "\004\015\252\001\002\000\024\014\uffb9\021\215\022\221" +
    "\023\223\032\222\037\uffb9\043\211\046\224\050\213\001" +
    "\002\000\004\015\237\001\002\000\024\014\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\032\uff8f\043\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\001\002\000\012\014\uffb2\034\uffb2\037\uffb2\047\uffb2" +
    "\001\002\000\006\014\230\037\231\001\002\000\006\017" +
    "\uff9e\054\uff9e\001\002\000\026\014\uffb9\021\215\022\221" +
    "\023\223\032\222\037\uffb9\043\211\046\224\047\uffb9\050" +
    "\213\001\002\000\006\014\uffbc\031\uffbc\001\002\000\010" +
    "\014\uffbb\037\uffbb\047\uffbb\001\002\000\024\014\uffb9\021" +
    "\215\022\221\023\223\032\222\043\211\046\224\047\uffb9" +
    "\050\213\001\002\000\006\014\230\047\235\001\002\000" +
    "\016\015\031\020\023\027\026\035\025\042\035\050\034" +
    "\001\002\000\012\014\uff8e\034\uff8e\037\uff8e\047\uff8e\001" +
    "\002\000\010\006\uffa3\016\uffa3\050\241\001\002\000\006" +
    "\006\242\016\243\001\002\000\006\006\uffa1\016\uffa1\001" +
    "\002\000\012\014\uffa7\034\uffa7\037\uffa7\047\uffa7\001\002" +
    "\000\004\050\244\001\002\000\006\006\uffa2\016\uffa2\001" +
    "\002\000\006\014\uff98\037\uff98\001\002\000\006\014\247" +
    "\037\250\001\002\000\024\014\uffb9\021\215\022\221\023" +
    "\223\032\222\037\uffb9\043\211\046\224\050\213\001\002" +
    "\000\012\014\uff9a\034\uff9a\037\uff9a\047\uff9a\001\002\000" +
    "\006\014\uff99\037\uff99\001\002\000\022\006\uffa6\015\031" +
    "\016\uffa6\020\023\027\026\035\025\042\035\050\034\001" +
    "\002\000\006\006\255\016\256\001\002\000\006\006\uffa4" +
    "\016\uffa4\001\002\000\012\014\uffa8\034\uffa8\037\uffa8\047" +
    "\uffa8\001\002\000\016\015\031\020\023\027\026\035\025" +
    "\042\035\050\034\001\002\000\006\006\uffa5\016\uffa5\001" +
    "\002\000\016\015\031\020\023\027\026\035\025\042\035" +
    "\050\034\001\002\000\004\044\uff91\001\002\000\004\044" +
    "\263\001\002\000\030\014\uffb9\021\215\022\221\023\223" +
    "\032\222\034\uffb9\037\uffb9\043\211\046\224\047\uffb9\050" +
    "\213\001\002\000\012\014\uff90\034\uff90\037\uff90\047\uff90" +
    "\001\002\000\004\015\041\001\002\000\012\014\uffb0\034" +
    "\uffb0\037\uffb0\047\uffb0\001\002\000\004\033\uff97\001\002" +
    "\000\004\033\271\001\002\000\030\014\uffb9\021\215\022" +
    "\221\023\223\032\222\034\uffb9\037\uffb9\043\211\046\224" +
    "\047\uffb9\050\213\001\002\000\012\014\uff95\034\273\037" +
    "\uff95\047\uff95\001\002\000\030\014\uff94\021\uff94\022\uff94" +
    "\023\uff94\032\uff94\034\uff94\037\uff94\043\uff94\046\uff94\047" +
    "\uff94\050\uff94\001\002\000\012\014\uff96\034\uff96\037\uff96" +
    "\047\uff96\001\002\000\030\014\uffb9\021\215\022\221\023" +
    "\223\032\222\034\uffb9\037\uffb9\043\211\046\224\047\uffb9" +
    "\050\213\001\002\000\012\014\uff93\034\uff93\037\uff93\047" +
    "\uff93\001\002\000\016\015\031\020\023\027\026\035\025" +
    "\042\035\050\034\001\002\000\016\015\031\020\023\027" +
    "\026\035\025\042\035\050\034\001\002\000\006\016\304" +
    "\055\303\001\002\000\006\016\uff9b\055\uff9b\001\002\000" +
    "\006\017\uff9d\054\uff9d\001\002\000\016\015\031\020\023" +
    "\027\026\035\025\042\035\050\034\001\002\000\006\016" +
    "\uff9c\055\uff9c\001\002\000\012\014\uffa0\034\uffa0\037\uffa0" +
    "\047\uffa0\001\002\000\004\050\312\001\002\000\012\007" +
    "\ufffa\010\ufffa\032\ufffa\050\312\001\002\000\006\005\313" +
    "\016\314\001\002\000\006\005\uffbd\016\uffbd\001\002\000" +
    "\006\050\324\053\322\001\002\000\004\050\315\001\002" +
    "\000\006\005\uffbe\016\uffbe\001\002\000\004\014\341\001" +
    "\002\000\004\014\uffec\001\002\000\004\014\uffeb\001\002" +
    "\000\004\014\uffea\001\002\000\004\054\325\001\002\000" +
    "\004\014\uffed\001\002\000\004\014\uffee\001\002\000\004" +
    "\020\330\001\002\000\006\016\334\055\333\001\002\000" +
    "\006\016\uffe6\055\uffe6\001\002\000\004\057\331\001\002" +
    "\000\004\020\332\001\002\000\006\016\uffe5\055\uffe5\001" +
    "\002\000\004\056\336\001\002\000\004\020\330\001\002" +
    "\000\006\016\uffe7\055\uffe7\001\002\000\006\050\324\053" +
    "\322\001\002\000\004\014\uffe8\001\002\000\004\014\uffe9" +
    "\001\002\000\012\007\uffe3\010\uffe3\032\uffe3\050\uffe3\001" +
    "\002\000\006\005\343\016\314\001\002\000\006\050\324" +
    "\053\322\001\002\000\004\014\345\001\002\000\012\007" +
    "\uffe4\010\uffe4\032\uffe4\050\uffe4\001\002\000\014\007\ufff0" +
    "\010\ufff0\032\ufff0\036\ufff0\050\ufff0\001\002\000\014\007" +
    "\ufff2\010\ufff2\032\ufff2\036\ufff2\050\350\001\002\000\004" +
    "\026\351\001\002\000\006\050\324\053\322\001\002\000" +
    "\004\014\353\001\002\000\014\007\uffef\010\uffef\032\uffef" +
    "\036\uffef\050\uffef\001\002\000\014\007\ufff1\010\ufff1\032" +
    "\ufff1\036\ufff1\050\ufff1\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\006\002\003\074\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\011\075\010\001\001\000\004\005\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\112" +
    "\001\001\000\006\015\015\026\016\001\001\000\004\026" +
    "\110\001\001\000\002\001\001\000\004\077\020\001\001" +
    "\000\002\001\001\000\014\036\032\037\023\040\031\041" +
    "\027\062\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\040\065\041\027\062\026\001\001\000\010\040" +
    "\064\041\027\062\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\036\062\037\023\040\031\041\027\062" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\112\036\001\001\000\006\041\035\062\026\001\001\000" +
    "\002\001\001\000\004\063\037\001\001\000\002\001\001" +
    "\000\020\036\042\037\023\040\031\041\027\062\026\064" +
    "\043\065\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\036\042\037" +
    "\023\040\031\041\027\062\026\065\046\001\001\000\002" +
    "\001\001\000\014\036\050\037\023\040\031\041\027\062" +
    "\026\001\001\000\002\001\001\000\014\036\052\037\023" +
    "\040\031\041\027\062\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\061\062\026\001\001\000\006" +
    "\041\060\062\026\001\001\000\006\041\057\062\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\037\107\040\031\041\027\062\026" +
    "\001\001\000\012\037\106\040\031\041\027\062\026\001" +
    "\001\000\010\040\105\041\027\062\026\001\001\000\012" +
    "\037\104\040\031\041\027\062\026\001\001\000\010\040" +
    "\103\041\027\062\026\001\001\000\012\037\102\040\031" +
    "\041\027\062\026\001\001\000\012\037\101\040\031\041" +
    "\027\062\026\001\001\000\012\037\100\040\031\041\027" +
    "\062\026\001\001\000\010\040\077\041\027\062\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\346\067\345\001\001\000\004\004" +
    "\114\001\001\000\004\076\306\001\001\000\006\044\115" +
    "\100\116\001\001\000\004\010\204\001\001\000\012\045" +
    "\117\046\120\101\122\102\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\162\106\161\001\001\000" +
    "\006\047\123\103\124\001\001\000\002\001\001\000\004" +
    "\051\126\001\001\000\002\001\001\000\004\104\127\001" +
    "\001\000\002\001\001\000\006\003\131\075\010\001\001" +
    "\000\002\001\001\000\004\105\133\001\001\000\004\053" +
    "\135\001\001\000\004\113\136\001\001\000\002\001\001" +
    "\000\014\054\142\055\144\056\140\057\137\060\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\156" +
    "\001\001\000\004\114\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\055" +
    "\155\056\140\057\137\060\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\107\165\001" +
    "\001\000\002\001\001\000\006\003\167\075\010\001\001" +
    "\000\002\001\001\000\006\110\172\111\171\001\001\000" +
    "\004\053\176\001\001\000\002\001\001\000\004\042\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\200\001\001\000\002\001\001\000\010" +
    "\046\202\101\122\102\121\001\001\000\002\001\001\000" +
    "\030\011\225\013\205\014\211\017\215\024\213\025\216" +
    "\031\217\035\224\061\206\071\207\072\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\036\266\037\023\040\031\041\027\062" +
    "\026\001\001\000\002\001\001\000\004\115\264\001\001" +
    "\000\002\001\001\000\004\120\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\013\244\014\211\017\215\024\213\025\216\030" +
    "\245\031\217\035\224\061\206\071\207\072\226\001\001" +
    "\000\002\001\001\000\004\122\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\231" +
    "\014\211\017\215\024\213\025\216\031\217\035\224\061" +
    "\206\071\207\072\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\233\013\205\014\211\017\215\024" +
    "\213\025\216\031\217\035\224\061\206\071\207\072\226" +
    "\001\001\000\002\001\001\000\014\036\235\037\023\040" +
    "\031\041\027\062\026\001\001\000\002\001\001\000\004" +
    "\023\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\013\250\014\211\017" +
    "\215\024\213\025\216\031\217\035\224\061\206\071\207" +
    "\072\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\020\252\036\253\037\023\040\031\041\027\062\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\036\256\037\023\040\031\041\027\062\026" +
    "\001\001\000\002\001\001\000\014\036\260\037\023\040" +
    "\031\041\027\062\026\001\001\000\004\121\261\001\001" +
    "\000\002\001\001\000\026\013\263\014\211\017\215\024" +
    "\213\025\216\031\217\035\224\061\206\071\207\072\226" +
    "\001\001\000\002\001\001\000\004\063\265\001\001\000" +
    "\002\001\001\000\004\116\267\001\001\000\002\001\001" +
    "\000\026\013\271\014\211\017\215\024\213\025\216\031" +
    "\217\035\224\061\206\071\207\072\226\001\001\000\004" +
    "\032\273\001\001\000\004\117\274\001\001\000\002\001" +
    "\001\000\026\013\275\014\211\017\215\024\213\025\216" +
    "\031\217\035\224\061\206\071\207\072\226\001\001\000" +
    "\002\001\001\000\014\036\305\037\023\040\031\041\027" +
    "\062\026\001\001\000\016\036\301\037\023\040\031\041" +
    "\027\062\026\073\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\036\304\037\023\040" +
    "\031\041\027\062\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\307\007\310\001\001\000\004\007" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\315\016\322\022\316\027\317\034\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\066\325" +
    "\070\326\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\334\001\001\000\002\001\001\000" +
    "\016\012\336\016\322\022\316\027\317\034\320\043\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\343\016\322\022\316" +
    "\027\317\034\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\353\001\001\000\002" +
    "\001\001\000\014\012\351\016\322\022\316\027\317\034" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    StringBuilder mepa, saida;
    Erro e;
    int contaVars;
    int deslocamento;
    int numeroEntradas;
    int numeroArgumentos;
    int rotulo;
    int nivel;
    int auxNumParam;
    int pre_rotina;
    Rotulo ultimoRotulo;
    LinkedList<ElemPilhaSem> pilhaSem = new LinkedList<ElemPilhaSem>();
    ArrayList<ElemTabSimb> tabSimbolo = new ArrayList<ElemTabSimb>();
    ElemTabSimb elemTab;
    ElemPilhaSem elemPilha;

    public sintatico(java.io.Reader input, StringBuilder mep, StringBuilder sai, Erro err) {
        super (new lexico (input));
        mepa = mep;
        saida = sai;
        e = err;
        nivel = -1;
    }

    public void report_semantic_error (String message) {
        report_error (message, cur_token);
        done_parsing();
    }

    public void report_error(String message, Object info) {
        Simbolo simb = (Simbolo)info;
        saida.append("ERRO na linha "+simb.getLine()+": "+message);
        e.setaErro (simb.getLine(), simb.getColumn ());
    }

    public void report_fatal_error (String message, Object info) {
        done_parsing();
    }

    public void syntax_error(java_cup.runtime.Symbol current) {
        report_error("Sintatico", current);
    }

    public void eliminaSimbolos(int nivel){

        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb el;
        while(tamanhoTab != -1 && (el = this.tabSimbolo.get(tamanhoTab)).getNivel() == nivel){
            this.tabSimbolo.remove(tamanhoTab);
            tamanhoTab--;
        }
    }

    public void mostraTabSimb(){
        System.out.println("TabelaSimbolos - "+tabSimbolo.toString()+"\n");
    }

    public void mostraPilhaSem(){
        System.out.println("PilhaSemantica - "+pilhaSem.toString()+"\n");
    }

    public ElemTabSimb buscaSimbolo(String id){
        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb e = null;

        while(tamanhoTab != -1 && !((e = tabSimbolo.get(tamanhoTab)).getNome().equals(id))){
            tamanhoTab--;
        }

        if(tamanhoTab == -1){
            return null;
        }
  
        return e;
    }

    public void cabecalhoFuncao(){
        //Obter tipo da funcao
        Tipo tipo = (Tipo) pilhaSem.pollLast();

        //Obter parametros caso tenha
        Funcao func = new Funcao(rotulo, tipo, -3-numeroEntradas);
        if(numeroEntradas > 0){
            ListIterator it = pilhaSem.listIterator(pilhaSem.size() - numeroEntradas);
            while(it.hasNext()){
                func.addParametro((Parametro)it.next());
                it.remove();
            }
        }
        elemTab = (ElemTabSimb) pilhaSem.pollLast();
        elemTab.setInfoC(func);
    }

    public void cabecalhoProcedimento(){

        //Obter parametros caso tenha
        Procedimento proc = new Procedimento(rotulo);
        if(numeroEntradas > 0){
            ListIterator it = pilhaSem.listIterator(pilhaSem.size() - numeroEntradas);
            while(it.hasNext()){
                proc.addParametro((Parametro)it.next());
                it.remove();
            }
        }
        elemTab = (ElemTabSimb) pilhaSem.pollLast();
        elemTab.setInfoC(proc);
    }

    public void verificaLimiteArray (String limI, String limS){
        
        int limInf, limSup;
        limInf = Integer.parseInt(limI.toString());
        limSup = Integer.parseInt(limS.toString());
        
        if(limInf > limSup){
            report_semantic_error ("O limite inferior deve ser menor ou igual ao limite superior!");
        }

        IndiceArray indA = new IndiceArray(limInf, limSup);
        pilhaSem.add(indA);
    }

    public void declaracaoVariaveis(){
        
        if(contaVars > 0){

            /* Posicionar indice no início da declaração de variáveis */
            int indice = pilhaSem.indexOf(Marca.DECLARACAO_VARS);
            int tamanhoPilha = pilhaSem.size();
            pilhaSem.remove(indice);
            
            for(int i = 0; i < contaVars ; i++){
                
                elemPilha = pilhaSem.get(indice);
                elemTab = (ElemTabSimb) elemPilha;

                if(tabSimbolo.contains(elemTab)){
                    report_semantic_error ("Identificador <"+elemTab.getNome()+"> já declarado!");
                }

                /* Tratar declação de array */    
                if(indice+1 < pilhaSem.size() && pilhaSem.get(indice+1) instanceof IndiceArray){
                    pilhaSem.remove(indice);
                    IndiceArray indAr = (IndiceArray) pilhaSem.get(indice);
                    elemTab.setInfoC(new Array(deslocamento, indAr));
                    tabSimbolo.add(elemTab);
                    pilhaSem.remove(indice);
                    
                    /* Ajustar deslocamento */
                    deslocamento += indAr.getLimSuperior() - indAr.getLimInferior() + 1;
                }else{
                    elemTab.setInfoC(new Variavel(deslocamento++));
                    tabSimbolo.add(elemTab);
                    pilhaSem.remove(indice);
                }
            }
            
            mepa.append ("\tAMEM\t"+(deslocamento)+"\n");
            elemPilha = new VariaveisDeclaradas(deslocamento);
            pilhaSem.add(elemPilha);
        }
  
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintatico$actions {
  private final sintatico parser;

  /** Constructor */
  CUP$sintatico$actions(sintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintatico$do_action(
    int                        CUP$sintatico$act_num,
    java_cup.runtime.lr_parser CUP$sintatico$parser,
    java.util.Stack            CUP$sintatico$stack,
    int                        CUP$sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintatico$result;

      /* select the action based on the action number */
      switch (CUP$sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // fator ::= S_NOT fator 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tNEGA\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // fator ::= S_ABREPAR expressao S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // fator ::= chamada_funcao 
            {
              Object RESULT =null;
		
        parser.pre_rotina = 0;
        parser.numeroArgumentos = 0;
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
        Funcao func = (Funcao) parser.elemTab.getInfoC();
        parser.mepa.append ("\tCHPR\t"+"L"+func.getRotulo()+"\n");
     
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // fator ::= S_NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		 
        parser.mepa.append ("\tCRCT\t"+numero+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // fator ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }else{
            if(parser.pre_rotina == 1){
                Parametro p = null;
                ElemTabSimb el = (ElemTabSimb) parser.pilhaSem.peekLast();
                if(el.getInfoC() instanceof Procedimento){
                    Procedimento proc = (Procedimento) el.getInfoC();
                    p = proc.getParametro(parser.numeroArgumentos);
                }else{
                    Funcao func = (Funcao) el.getInfoC();
                    p = func.getParametro(parser.numeroArgumentos);
                }
                if(p.getMec() == Mecanismo.PAS_END){
                    parser.mepa.append ("\tCREN\t"+parser.elemTab.getNivel()+","+((Variavel) parser.elemTab.getInfoC()).getDeslocamento()+"\n");
                }else{
                    parser.mepa.append ("\tCRVL\t"+parser.elemTab.getNivel()+","+((Variavel) parser.elemTab.getInfoC()).getDeslocamento()+"\n");
                }
            }else{
                parser.mepa.append ("\tCRVL\t"+parser.elemTab.getNivel()+","+((Variavel) parser.elemTab.getInfoC()).getDeslocamento()+"\n");
            }
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // termo ::= fator 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // termo ::= termo S_AND fator 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCONJ\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // termo ::= termo S_DIV fator 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tDIVI\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // termo ::= termo S_VEZES fator 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tMULT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expressao_simples ::= termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expressao_simples ::= S_MENOS termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tINVR\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expressao_simples ::= S_MAIS termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expressao_simples ::= expressao_simples S_OR termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tDISJ\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expressao_simples ::= expressao_simples S_MENOS termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tSUBT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expressao_simples ::= expressao_simples S_MAIS termo 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tSOMA\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expressao ::= expressao_simples 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expressao ::= expressao_simples S_MAIGUAL expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMAG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expressao ::= expressao_simples S_MEIGUAL expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMEG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expressao ::= expressao_simples S_MAIOR expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMMA\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expressao ::= expressao_simples S_MENOR expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMME\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expressao ::= expressao_simples S_DIFERENTE expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMDG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expressao ::= expressao_simples S_IGUAL expressao_simples 
            {
              Object RESULT =null;
		 parser.mepa.append ("\tCMIG\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // repetitivo ::= S_REPEAT NT$22 sequencia_comandos S_UNTIL expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.ultimoRotulo = (Rotulo) parser.pilhaSem.pollLast();
        parser.mepa.append ("\tDSVF\tL"+parser.ultimoRotulo.getRotulo()+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",27, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$22 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("L"+parser.rotulo+":\tNADA\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$22",80, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // repetitivo ::= S_WHILE NT$20 expressao NT$21 S_DO comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.ultimoRotulo = (Rotulo) parser.pilhaSem.pollLast();
        parser.elemPilha = parser.pilhaSem.pollLast();
        parser.mepa.append ("\tDSVS\tL"+((Rotulo)parser.elemPilha).getRotulo()+"\n");
        parser.mepa.append ("L"+parser.ultimoRotulo.getRotulo()+":\tNADA\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",27, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.rotulo++;
        parser.mepa.append ("\tDSVF\tL"+parser.rotulo+"\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$21",79, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$20 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("L"+parser.rotulo+":\tNADA\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$20",78, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // alternativa_cond ::= S_ELSE NT$19 comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",24, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$19 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("\tDSVS\tL"+parser.rotulo+"\n");
        parser.elemPilha = parser.pilhaSem.pollLast();
        parser.mepa.append ("L"+((Rotulo)parser.elemPilha).getRotulo()+":\tNADA\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$19",77, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // alternativa_cond ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",24, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condicional ::= S_IF expressao NT$18 S_THEN comando_sem_rotulo alternativa_cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.elemPilha = parser.pilhaSem.pollLast();
        parser.mepa.append ("L"+((Rotulo)parser.elemPilha).getRotulo()+":\tNADA\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("condicional",23, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$18 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("\tDSVF\tL"+parser.rotulo+"\n");
        parser.pilhaSem.add (new Rotulo(parser.rotulo));
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$18",76, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_comandos_sem_rotulo ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",22, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_comandos_sem_rotulo ::= lista_comandos_sem_rotulo S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",22, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // composto ::= S_BEGIN lista_comandos_sem_rotulo S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("composto",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // indice_de_lista_de_expressao ::= expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("indice_de_lista_de_expressao",57, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // indice_de_lista_de_expressao ::= indice_de_lista_de_expressao S_VIRGULA expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("indice_de_lista_de_expressao",57, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variavel_indexada ::= variavel_de_acesso S_ABRECOL indice_de_lista_de_expressao S_FECHACOL 
            {
              Object RESULT =null;
		
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.peekLast();
        InfoComplementar infoC = parser.elemTab.getInfoC();
        if(infoC instanceof Array){
            parser.mepa.append ("\tCRCT\t"+((Array)infoC).getLimInferior()+"\n");
            parser.mepa.append ("\tSUBT\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variavel_indexada",56, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variavel_de_acesso ::= variavel_indexada 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variavel_de_acesso",55, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variavel_de_acesso ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variavel_de_acesso",55, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // atribuicao ::= variavel_de_acesso S_ATRIBUI expressao 
            {
              Object RESULT =null;
		
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
        InfoComplementar infoC = parser.elemTab.getInfoC();
        if( infoC instanceof Parametro){
            if(((Parametro)infoC).getMec() == Mecanismo.PAS_END){
                parser.mepa.append ("\tARMI\t"+ parser.elemTab.getNivel()+","+((Parametro)infoC).getDeslocamento()+"\n");
            }else{
                parser.mepa.append ("\tARMZ\t"+ parser.elemTab.getNivel()+","+((Parametro)infoC).getDeslocamento()+"\n");
            }
        }else if(infoC instanceof Variavel){
            if(infoC instanceof Array){
                parser.mepa.append ("\tARME\t"+parser.elemTab.getNivel()+","+((Array)infoC).getDeslocamento()+"\n");
            }else{    
                parser.mepa.append ("\tARMZ\t"+parser.elemTab.getNivel()+","+((Variavel)infoC).getDeslocamento()+"\n");
            }
        }else if(infoC instanceof Funcao){
            parser.mepa.append ("\tARMZ\t"+(parser.elemTab.getNivel()+1)+","+((Funcao)infoC).getDeslocamento()+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("atribuicao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_de_variaveis ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }
        else{
            parser.mepa.append ("\tLEIT\n");
            parser.mepa.append ("\tARMZ\t"+parser.elemTab.getNivel()+","+((Variavel)parser.elemTab.getInfoC()).getDeslocamento()+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_de_variaveis ::= lista_de_variaveis S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Identificador <"+id+"> não declarado!");
        }
        else {
            parser.mepa.append ("\tLEIT\n");
            parser.mepa.append ("\tARMZ\t"+parser.elemTab.getNivel()+","+((Variavel)parser.elemTab.getInfoC()).getDeslocamento()+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lista_de_variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lista_de_expressoes ::= expressao 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tIMPR\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lista_de_expressoes ::= lista_de_expressoes S_VIRGULA expressao 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tIMPR\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lista_de_expressoes ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // chamada_comando_leitura ::= S_READ S_ABREPAR lista_de_variaveis S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_leitura",13, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // chamada_comando_escrita ::= S_WRITE S_ABREPAR lista_de_expressoes S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_escrita",10, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametros_atuais ::= expressao S_DOISPTOS expressao S_DOISPTOS expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",51, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametros_atuais ::= expressao S_DOISPTOS expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",51, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros_atuais ::= expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",51, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_de_parametros_atuais ::= parametros_atuais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",50, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_de_parametros_atuais ::= lista_de_parametros_atuais S_VIRGULA parametros_atuais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",50, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros ::= S_ABREPAR lista_de_parametros_atuais S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros",49, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // chamada_procedimento ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Procedimento <"+id+"> não declarado!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
            parser.pre_rotina = 1;
            parser.numeroArgumentos = 0;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",47, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // chamada_procedimento ::= S_IDENTIF NT$17 parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",47, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$17 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Procedimento <"+id+"> não declarado!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
            parser.pre_rotina = 1;
            parser.numeroArgumentos = 0;
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$17",75, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comando_sem_rotulo ::= repetitivo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comando_sem_rotulo ::= condicional 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comando_sem_rotulo ::= composto 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comando_sem_rotulo ::= atribuicao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comando_sem_rotulo ::= chamada_procedimento 
            {
              Object RESULT =null;
		
            parser.pre_rotina = 0;
            parser.numeroArgumentos = 0;
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
            Procedimento proc = (Procedimento) parser.elemTab.getInfoC();
            parser.mepa.append ("\tCHPR\t"+"L"+proc.getRotulo()+"\n");
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comando_sem_rotulo ::= chamada_comando_leitura 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comando_sem_rotulo ::= chamada_comando_escrita 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comando_sem_rotulo ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sequencia_comandos ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sequencia_comandos ::= sequencia_comandos S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // corpo ::= S_BEGIN sequencia_comandos S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("corpo",6, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_de_identificadores ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        parser.pilhaSem.add(parser.elemTab);
        parser.contaVars++;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",5, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_de_identificadores ::= lista_de_identificadores S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);    
        parser.pilhaSem.add(parser.elemTab);
        parser.contaVars++;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",5, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_de_parametros ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.numeroEntradas++;
            parser.elemTab.setInfoC(new Parametro());
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",46, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_de_parametros ::= lista_de_parametros S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.numeroEntradas++;
            parser.elemTab.setInfoC(new Parametro());
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",46, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametro_por_referencia ::= S_VAR lista_de_parametros S_DOISPTOS S_IDENTIF 
            {
              Object RESULT =null;
		
        //auxNumParam - Controlar o numero de parametros
        parser.auxNumParam = parser.numeroEntradas - parser.auxNumParam;
        Parametro p;
        LinkedList <Parametro> param = new LinkedList<Parametro>();

        int i;
        //Retirar da pilha semântica e setar o tipo de macanismo e tipo do parametro
        //Usar uma pilha auxiliar
        for( i = parser.auxNumParam; i > 0; i--){
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();               
            p = (Parametro) parser.elemTab.getInfoC();
            p.setMec(Mecanismo.PAS_END);
            p.setTipo(Tipo.INTEGER);
            param.add(p);
        }

        //Adicionar os parametros novamente
        for( i = parser.auxNumParam; i > 0; i--){
            parser.pilhaSem.add(param.pollLast());
        }

        parser.auxNumParam = parser.numeroEntradas;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_referencia",45, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametro_por_valor ::= lista_de_parametros S_DOISPTOS S_IDENTIF 
            {
              Object RESULT =null;
		
        //auxNumParam - Controlar o numero de parametros
        parser.auxNumParam = parser.numeroEntradas - parser.auxNumParam;
        Parametro p;
        LinkedList <Parametro> param = new LinkedList<Parametro>();

        int i;
        //Retirar da pilha semântica e setar o tipo de macanismo e tipo do parametro
        //Usar uma pilha auxiliar
        for( i = parser.auxNumParam; i > 0; i--){
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();               
            p = (Parametro) parser.elemTab.getInfoC();
            p.setMec(Mecanismo.PAS_VAL);
            p.setTipo(Tipo.INTEGER);
            param.add(p);
        }

        //Adicionar os parametros novamente
        for( i = parser.auxNumParam; i > 0; i--){
            parser.pilhaSem.add(param.pollLast());
        }

        parser.auxNumParam = parser.numeroEntradas;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_valor",44, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // secao_de_parametros_formais ::= parametro_por_referencia 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",43, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // secao_de_parametros_formais ::= parametro_por_valor 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",43, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // secao_lista_de_parametros_formais ::= secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",42, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // secao_lista_de_parametros_formais ::= secao_lista_de_parametros_formais S_PONTOVG secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",42, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_formal_de_parametros ::= S_ABREPAR NT$15 secao_lista_de_parametros_formais NT$16 S_FECHAPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        int i;
        Parametro p;
        LinkedList<Parametro> param = new LinkedList<Parametro>();

        //Setar deslocamento para os parametros
        for(i = parser.numeroEntradas; i > 0; i--){            
            p = (Parametro) parser.pilhaSem.pollLast();
            p.setDeslocamento(-3-(parser.numeroEntradas-i));
            param.add(p);
        }

        //Adicionar os parametros novamente
        for( i = parser.numeroEntradas; i > 0; i--){
            parser.pilhaSem.add(param.pollLast());
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_formal_de_parametros",41, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.nivel--;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$16",74, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$15 ::= 
            {
              Object RESULT =null;

        parser.nivel++;
        parser.numeroEntradas = 0;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$15",73, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // chamada_funcao ::= S_IDENTIF NT$14 parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_funcao",48, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$14 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = parser.buscaSimbolo(id.toString());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Função <"+id+"> não declarada!");
        }else{
            parser.pilhaSem.add(parser.elemTab);
            parser.pre_rotina = 1;
            parser.numeroArgumentos = 0;
            parser.mepa.append ("\tAMEM\t"+1+"\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$14",72, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_de_retorno ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        //Buscar tipo na tabela de simbolos
        parser.pilhaSem.add(Tipo.INTEGER);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_de_retorno",32, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cabecalho_funcao ::= S_FUNCTION S_IDENTIF NT$13 lista_formal_de_parametros S_DOISPTOS tipo_de_retorno 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_funcao",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$13 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$13",71, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cabecalho_funcao ::= S_FUNCTION S_IDENTIF NT$12 S_DOISPTOS tipo_de_retorno 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_funcao",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$12",70, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracao_de_funcao ::= NT$10 cabecalho_funcao NT$11 S_PONTOVG bloco 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.mepa.append ("\tRTPR\t"+(parser.nivel+1)+", "+parser.numeroEntradas+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao",38, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.cabecalhoFuncao();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$11",69, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$10 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("L"+parser.rotulo+":\tENPR\t"+(parser.nivel+1)+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$10",68, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF NT$9 lista_formal_de_parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",39, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$9",67, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",39, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracao_de_procedimento ::= NT$7 cabecalho_procedimento NT$8 S_PONTOVG bloco 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.mepa.append ("\tRTPR\t"+(parser.nivel+1)+", "+parser.numeroEntradas+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_procedimento",37, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.cabecalhoProcedimento();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$8",66, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$7 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("L"+parser.rotulo+":\tENPR\t"+(parser.nivel+1)+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$7",65, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracao_de_funcao_ou_procedimento ::= NT$6 declaracao_de_funcao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao_ou_procedimento",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              Object RESULT =null;

            parser.rotulo++;
            parser.auxNumParam = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$6",64, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracao_de_funcao_ou_procedimento ::= NT$5 declaracao_de_procedimento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao_ou_procedimento",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT =null;

            parser.rotulo++;
            parser.auxNumParam = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$5",63, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_de_declaracao_de_funcao_ou_procedimento ::= declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_de_declaracao_de_funcao_ou_procedimento ::= lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracao_de_funcoes_e_procendimentos ::= NT$4 lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.elemPilha = parser.pilhaSem.pollLast();
        if(parser.elemPilha instanceof Rotulo){
          parser.mepa.append ("L"+((Rotulo)parser.elemPilha).getRotulo()+":\tNADA\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",34, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;

        parser.rotulo++;
        parser.mepa.append ("\tDSVS\tL"+parser.rotulo+"\n");
        parser.pilhaSem.add(new Rotulo(parser.rotulo));
      
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$4",62, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracao_de_funcoes_e_procendimentos ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",34, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracoes_de_vars ::= lista_de_identificadores S_DOISPTOS denotacao_de_tipo S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracoes_de_vars ::= declaracoes_de_vars lista_de_identificadores S_DOISPTOS denotacao_de_tipo S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_indice ::= S_NUMERO S_PTOPTO S_NUMERO 
            {
              Object RESULT =null;
		int limInfleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int limInfright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object limInf = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		int limSupleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int limSupright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object limSup = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.verificaLimiteArray(limInf.toString(), limSup.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_indice",54, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_de_indices ::= tipo_indice 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_indices",52, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_de_indices ::= lista_de_indices S_VIRGULA tipo_indice 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_indices",52, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= denotacao_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_array ::= S_ARRAY S_ABRECOL lista_de_indices S_FECHACOL S_OF tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_array",26, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estrutura_tipo ::= tipo_array 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("estrutura_tipo",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // novo_tipo_estrutura ::= estrutura_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("novo_tipo_estrutura",16, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // novo_tipo ::= novo_tipo_estrutura 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("novo_tipo",12, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // denotacao_de_tipo ::= novo_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("denotacao_de_tipo",8, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // denotacao_de_tipo ::= S_IDENTIF 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("denotacao_de_tipo",8, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definicao_de_tipo ::= S_IDENTIF S_IGUAL denotacao_de_tipo S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("definicao_de_tipo",53, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_de_tipo ::= definicao_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_tipo",25, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_de_tipo ::= lista_de_tipo definicao_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_tipo",25, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracao_de_tipo ::= S_TYPE lista_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_tipo",15, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracao_de_tipo ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_tipo",15, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definicao_de_constante ::= S_IDENTIF NT$3 S_IGUAL expressao S_PONTOVG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("definicao_de_constante",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.elemTab.setInfoC(new Variavel(parser.contaVars));
            parser.tabSimbolo.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$3",61, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_de_constante ::= definicao_de_constante 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_constante",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_de_constante ::= lista_de_constante definicao_de_constante 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_constante",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracao_de_constante ::= S_CONST lista_de_constante 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_constante",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracao_de_constante ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_constante",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variaveis ::= S_VAR NT$2 declaracoes_de_vars 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        parser.declaracaoVariaveis();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
 
        parser.contaVars = 0; 
        parser.deslocamento = 0;
        parser.pilhaSem.add(Marca.DECLARACAO_VARS);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$2",60, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloco ::= NT$1 declaracao_de_constante declaracao_de_tipo variaveis declaracao_de_funcoes_e_procendimentos corpo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)).value;
		  
        if(parser.pilhaSem.peekLast() instanceof VariaveisDeclaradas){
            parser.elemPilha = parser.pilhaSem.pollLast();
            parser.mepa.append("\tDMEM\t"+((VariaveisDeclaradas)parser.elemPilha).getQuantidade()+"\n");
        }
        parser.eliminaSimbolos(parser.nivel);
        parser.nivel--;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 
        parser.nivel++; 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$1",59, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 S_PROGRAM S_IDENTIF S_PONTOVG bloco S_PONTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)).value;
		 
    parser.mepa.append ("\tPARA\n\tFIM\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("\tINPP\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		RESULT = start_val;
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintatico$parser.done_parsing();
          return CUP$sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

