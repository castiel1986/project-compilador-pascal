
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 01 09:24:26 BRST 2011
//----------------------------------------------------

package controle;

import java.util.*;
import entidade.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 01 09:24:26 BRST 2011
  */
public class sintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\074\002\000\002\002" +
    "\010\000\002\075\002\000\002\003\010\000\002\004\002" +
    "\000\002\076\002\000\002\004\005\000\002\005\002\000" +
    "\002\005\004\000\002\015\004\000\002\015\003\000\002" +
    "\077\002\000\002\026\007\000\002\021\002\000\002\021" +
    "\004\000\002\033\004\000\002\033\003\000\002\067\006" +
    "\000\002\012\003\000\002\012\003\000\002\016\003\000" +
    "\002\022\003\000\002\027\003\000\002\034\010\000\002" +
    "\043\003\000\002\066\005\000\002\066\003\000\002\070" +
    "\005\000\002\006\007\000\002\006\006\000\002\044\002" +
    "\000\002\100\002\000\002\044\005\000\002\045\005\000" +
    "\002\045\003\000\002\101\002\000\002\046\004\000\002" +
    "\102\002\000\002\046\004\000\002\103\002\000\002\104" +
    "\002\000\002\047\007\000\002\051\004\000\002\105\002" +
    "\000\002\051\006\000\002\106\002\000\002\107\002\000" +
    "\002\050\007\000\002\110\002\000\002\052\007\000\002" +
    "\111\002\000\002\052\010\000\002\042\003\000\002\112" +
    "\002\000\002\062\005\000\002\113\002\000\002\114\002" +
    "\000\002\053\007\000\002\054\005\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\115\002\000\002" +
    "\056\006\000\002\116\002\000\002\057\007\000\002\060" +
    "\005\000\002\060\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\005\000\002\011\005\000\002\011\003\000" +
    "\002\013\002\000\002\013\003\000\002\117\002\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\120\002" +
    "\000\002\061\005\000\002\061\003\000\002\063\005\000" +
    "\002\064\005\000\002\064\003\000\002\121\002\000\002" +
    "\065\004\000\002\122\002\000\002\014\007\000\002\017" +
    "\006\000\002\020\002\000\002\020\005\000\002\020\003" +
    "\000\002\023\002\000\002\123\002\000\002\023\006\000" +
    "\002\124\002\000\002\023\004\000\002\125\002\000\002" +
    "\126\002\000\002\024\007\000\002\071\003\000\002\071" +
    "\003\000\002\127\002\000\002\130\002\000\002\072\010" +
    "\000\002\073\005\000\002\073\003\000\002\025\005\000" +
    "\002\030\005\000\002\030\003\000\002\131\002\000\002" +
    "\132\002\000\002\031\011\000\002\032\002\000\002\133" +
    "\002\000\002\032\005\000\002\134\002\000\002\135\002" +
    "\000\002\035\010\000\002\136\002\000\002\137\002\000" +
    "\002\035\010\000\002\140\002\000\002\036\006\000\002" +
    "\141\002\000\002\036\006\000\002\142\002\000\002\036" +
    "\006\000\002\143\002\000\002\036\006\000\002\144\002" +
    "\000\002\036\006\000\002\145\002\000\002\036\006\000" +
    "\002\036\003\000\002\146\002\000\002\037\006\000\002" +
    "\147\002\000\002\037\006\000\002\150\002\000\002\037" +
    "\006\000\002\037\004\000\002\037\004\000\002\037\003" +
    "\000\002\151\002\000\002\040\006\000\002\152\002\000" +
    "\002\040\006\000\002\153\002\000\002\040\006\000\002" +
    "\040\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\005\000\002\041\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\004\013\000\001\002\000\004\002\u0104\001" +
    "\002\000\004\013\006\001\002\000\004\050\007\001\002" +
    "\000\004\014\010\001\002\000\016\007\ufffe\010\ufffe\032" +
    "\ufffe\036\ufffe\051\ufffe\052\ufffe\001\002\000\016\007\ufff9" +
    "\010\ufff9\032\ufff9\036\ufff9\051\015\052\ufff9\001\002\000" +
    "\004\031\013\001\002\000\004\002\uffff\001\002\000\014" +
    "\007\ufff3\010\ufff3\032\ufff3\036\ufff3\052\135\001\002\000" +
    "\004\050\020\001\002\000\016\007\ufff8\010\ufff8\032\ufff8" +
    "\036\ufff8\050\020\052\ufff8\001\002\000\016\007\ufff6\010" +
    "\ufff6\032\ufff6\036\ufff6\050\ufff6\052\ufff6\001\002\000\004" +
    "\026\ufff5\001\002\000\004\026\022\001\002\000\016\015" +
    "\033\020\023\027\026\035\025\042\037\050\036\001\002" +
    "\000\054\004\uff64\006\uff64\011\uff64\012\uff64\014\uff64\016" +
    "\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030\uff64\033\uff64" +
    "\034\uff64\035\uff64\037\uff64\040\uff64\041\uff64\044\uff64\045" +
    "\uff64\047\uff64\055\uff64\001\002\000\046\004\102\006\uff76" +
    "\011\101\012\107\014\uff76\016\uff76\024\105\025\106\026" +
    "\110\027\104\033\uff76\034\uff76\035\103\037\uff76\044\uff76" +
    "\045\111\047\uff76\055\uff76\001\002\000\012\015\033\020" +
    "\023\042\037\050\036\001\002\000\012\015\033\020\023" +
    "\042\037\050\036\001\002\000\060\004\uff97\006\uff97\011" +
    "\uff97\012\uff97\014\uff97\016\uff97\017\uff97\024\uff97\025\uff97" +
    "\026\uff97\027\uff97\030\uff97\033\uff97\034\uff97\035\uff97\037" +
    "\uff97\040\uff97\041\uff97\044\uff97\045\uff97\047\uff97\054\uff97" +
    "\055\uff97\001\002\000\056\004\uff65\006\uff65\011\uff65\012" +
    "\uff65\014\uff65\016\uff65\024\uff65\025\uff65\026\uff65\027\uff65" +
    "\030\uff65\033\uff65\034\uff65\035\uff65\037\uff65\040\uff65\041" +
    "\uff65\044\uff65\045\uff65\047\uff65\054\067\055\uff65\001\002" +
    "\000\054\004\uff63\006\uff63\011\uff63\012\uff63\014\uff63\016" +
    "\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030\uff63\033\uff63" +
    "\034\uff63\035\uff63\037\uff63\040\uff63\041\uff63\044\uff63\045" +
    "\uff63\047\uff63\055\uff63\001\002\000\054\004\uff66\006\uff66" +
    "\011\uff66\012\uff66\014\uff66\016\uff66\024\uff66\025\uff66\026" +
    "\uff66\027\uff66\030\uff66\033\uff66\034\uff66\035\uff66\037\uff66" +
    "\040\uff66\041\uff66\044\uff66\045\uff66\047\uff66\055\uff66\001" +
    "\002\000\016\015\033\020\023\027\026\035\025\042\037" +
    "\050\036\001\002\000\054\004\uff6d\006\uff6d\011\uff6d\012" +
    "\uff6d\014\uff6d\016\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d" +
    "\030\055\033\uff6d\034\uff6d\035\uff6d\037\uff6d\040\054\041" +
    "\056\044\uff6d\045\uff6d\047\uff6d\055\uff6d\001\002\000\004" +
    "\014\053\001\002\000\060\004\uff98\006\uff98\011\uff98\012" +
    "\uff98\014\uff98\015\uffcb\016\uff98\024\uff98\025\uff98\026\uff98" +
    "\027\uff98\030\uff98\033\uff98\034\uff98\035\uff98\037\uff98\040" +
    "\uff98\041\uff98\044\uff98\045\uff98\047\uff98\054\uff98\055\uff98" +
    "\001\002\000\012\015\033\020\023\042\037\050\036\001" +
    "\002\000\054\004\uff61\006\uff61\011\uff61\012\uff61\014\uff61" +
    "\016\uff61\024\uff61\025\uff61\026\uff61\027\uff61\030\uff61\033" +
    "\uff61\034\uff61\035\uff61\037\uff61\040\uff61\041\uff61\044\uff61" +
    "\045\uff61\047\uff61\055\uff61\001\002\000\004\015\043\001" +
    "\002\000\054\004\uffca\006\uffca\011\uffca\012\uffca\014\uffca" +
    "\016\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\033" +
    "\uffca\034\uffca\035\uffca\037\uffca\040\uffca\041\uffca\044\uffca" +
    "\045\uffca\047\uffca\055\uffca\001\002\000\016\015\uffa8\020" +
    "\uffa8\027\uffa8\035\uffa8\042\uffa8\050\uffa8\001\002\000\016" +
    "\015\033\020\023\027\026\035\025\042\037\050\036\001" +
    "\002\000\006\006\uffa9\016\uffa9\001\002\000\006\006\047" +
    "\016\050\001\002\000\054\004\uffab\006\uffab\011\uffab\012" +
    "\uffab\014\uffab\016\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\033\uffab\034\uffab\035\uffab\037\uffab\040\uffab\041" +
    "\uffab\044\uffab\045\uffab\047\uffab\055\uffab\001\002\000\016" +
    "\015\uffa8\020\uffa8\027\uffa8\035\uffa8\042\uffa8\050\uffa8\001" +
    "\002\000\006\006\uffaa\016\uffaa\001\002\000\006\006\uffa7" +
    "\016\uffa7\001\002\000\016\007\ufff4\010\ufff4\032\ufff4\036" +
    "\ufff4\050\ufff4\052\ufff4\001\002\000\012\015\uff6a\020\uff6a" +
    "\042\uff6a\050\uff6a\001\002\000\012\015\uff6c\020\uff6c\042" +
    "\uff6c\050\uff6c\001\002\000\012\015\uff68\020\uff68\042\uff68" +
    "\050\uff68\001\002\000\012\015\033\020\023\042\037\050" +
    "\036\001\002\000\054\004\uff67\006\uff67\011\uff67\012\uff67" +
    "\014\uff67\016\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030" +
    "\uff67\033\uff67\034\uff67\035\uff67\037\uff67\040\uff67\041\uff67" +
    "\044\uff67\045\uff67\047\uff67\055\uff67\001\002\000\012\015" +
    "\033\020\023\042\037\050\036\001\002\000\054\004\uff6b" +
    "\006\uff6b\011\uff6b\012\uff6b\014\uff6b\016\uff6b\024\uff6b\025" +
    "\uff6b\026\uff6b\027\uff6b\030\uff6b\033\uff6b\034\uff6b\035\uff6b" +
    "\037\uff6b\040\uff6b\041\uff6b\044\uff6b\045\uff6b\047\uff6b\055" +
    "\uff6b\001\002\000\012\015\033\020\023\042\037\050\036" +
    "\001\002\000\054\004\uff69\006\uff69\011\uff69\012\uff69\014" +
    "\uff69\016\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69" +
    "\033\uff69\034\uff69\035\uff69\037\uff69\040\uff69\041\uff69\044" +
    "\uff69\045\uff69\047\uff69\055\uff69\001\002\000\004\006\066" +
    "\001\002\000\054\004\uff62\006\uff62\011\uff62\012\uff62\014" +
    "\uff62\016\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62" +
    "\033\uff62\034\uff62\035\uff62\037\uff62\040\uff62\041\uff62\044" +
    "\uff62\045\uff62\047\uff62\055\uff62\001\002\000\016\015\uff96" +
    "\020\uff96\027\uff96\035\uff96\042\uff96\050\uff96\001\002\000" +
    "\016\015\033\020\023\027\026\035\025\042\037\050\036" +
    "\001\002\000\006\016\073\055\uff95\001\002\000\006\016" +
    "\uff92\055\uff92\001\002\000\016\015\033\020\023\027\026" +
    "\035\025\042\037\050\036\001\002\000\004\055\075\001" +
    "\002\000\060\004\uff94\006\uff94\011\uff94\012\uff94\014\uff94" +
    "\016\uff94\017\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030" +
    "\uff94\033\uff94\034\uff94\035\uff94\037\uff94\040\uff94\041\uff94" +
    "\044\uff94\045\uff94\047\uff94\054\uff94\055\uff94\001\002\000" +
    "\006\016\uff93\055\uff93\001\002\000\054\004\uff6e\006\uff6e" +
    "\011\uff6e\012\uff6e\014\uff6e\016\uff6e\024\uff6e\025\uff6e\026" +
    "\uff6e\027\uff6e\030\055\033\uff6e\034\uff6e\035\uff6e\037\uff6e" +
    "\040\054\041\056\044\uff6e\045\uff6e\047\uff6e\055\uff6e\001" +
    "\002\000\054\004\uff6f\006\uff6f\011\uff6f\012\uff6f\014\uff6f" +
    "\016\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\055\033" +
    "\uff6f\034\uff6f\035\uff6f\037\uff6f\040\054\041\056\044\uff6f" +
    "\045\uff6f\047\uff6f\055\uff6f\001\002\000\016\015\uff78\020" +
    "\uff78\027\uff78\035\uff78\042\uff78\050\uff78\001\002\000\016" +
    "\015\uff80\020\uff80\027\uff80\035\uff80\042\uff80\050\uff80\001" +
    "\002\000\012\015\uff75\020\uff75\042\uff75\050\uff75\001\002" +
    "\000\012\015\uff73\020\uff73\042\uff73\050\uff73\001\002\000" +
    "\016\015\uff7c\020\uff7c\027\uff7c\035\uff7c\042\uff7c\050\uff7c" +
    "\001\002\000\016\015\uff7e\020\uff7e\027\uff7e\035\uff7e\042" +
    "\uff7e\050\uff7e\001\002\000\016\015\uff7a\020\uff7a\027\uff7a" +
    "\035\uff7a\042\uff7a\050\uff7a\001\002\000\016\015\uff82\020" +
    "\uff82\027\uff82\035\uff82\042\uff82\050\uff82\001\002\000\012" +
    "\015\uff71\020\uff71\042\uff71\050\uff71\001\002\000\012\015" +
    "\033\020\023\042\037\050\036\001\002\000\054\004\uff70" +
    "\006\uff70\011\uff70\012\uff70\014\uff70\016\uff70\024\uff70\025" +
    "\uff70\026\uff70\027\uff70\030\055\033\uff70\034\uff70\035\uff70" +
    "\037\uff70\040\054\041\056\044\uff70\045\uff70\047\uff70\055" +
    "\uff70\001\002\000\016\015\033\020\023\027\026\035\025" +
    "\042\037\050\036\001\002\000\032\006\uff81\014\uff81\016" +
    "\uff81\027\104\033\uff81\034\uff81\035\103\037\uff81\044\uff81" +
    "\045\111\047\uff81\055\uff81\001\002\000\016\015\033\020" +
    "\023\027\026\035\025\042\037\050\036\001\002\000\032" +
    "\006\uff79\014\uff79\016\uff79\027\104\033\uff79\034\uff79\035" +
    "\103\037\uff79\044\uff79\045\111\047\uff79\055\uff79\001\002" +
    "\000\016\015\033\020\023\027\026\035\025\042\037\050" +
    "\036\001\002\000\032\006\uff7d\014\uff7d\016\uff7d\027\104" +
    "\033\uff7d\034\uff7d\035\103\037\uff7d\044\uff7d\045\111\047" +
    "\uff7d\055\uff7d\001\002\000\016\015\033\020\023\027\026" +
    "\035\025\042\037\050\036\001\002\000\032\006\uff7b\014" +
    "\uff7b\016\uff7b\027\104\033\uff7b\034\uff7b\035\103\037\uff7b" +
    "\044\uff7b\045\111\047\uff7b\055\uff7b\001\002\000\012\015" +
    "\033\020\023\042\037\050\036\001\002\000\054\004\uff72" +
    "\006\uff72\011\uff72\012\uff72\014\uff72\016\uff72\024\uff72\025" +
    "\uff72\026\uff72\027\uff72\030\055\033\uff72\034\uff72\035\uff72" +
    "\037\uff72\040\054\041\056\044\uff72\045\uff72\047\uff72\055" +
    "\uff72\001\002\000\012\015\033\020\023\042\037\050\036" +
    "\001\002\000\054\004\uff74\006\uff74\011\uff74\012\uff74\014" +
    "\uff74\016\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\055" +
    "\033\uff74\034\uff74\035\uff74\037\uff74\040\054\041\056\044" +
    "\uff74\045\uff74\047\uff74\055\uff74\001\002\000\016\015\033" +
    "\020\023\027\026\035\025\042\037\050\036\001\002\000" +
    "\032\006\uff7f\014\uff7f\016\uff7f\027\104\033\uff7f\034\uff7f" +
    "\035\103\037\uff7f\044\uff7f\045\111\047\uff7f\055\uff7f\001" +
    "\002\000\016\015\033\020\023\027\026\035\025\042\037" +
    "\050\036\001\002\000\032\006\uff77\014\uff77\016\uff77\027" +
    "\104\033\uff77\034\uff77\035\103\037\uff77\044\uff77\045\111" +
    "\047\uff77\055\uff77\001\002\000\016\007\ufff7\010\ufff7\032" +
    "\ufff7\036\ufff7\050\ufff7\052\ufff7\001\002\000\004\050\377" +
    "\001\002\000\012\007\ufffc\010\ufffc\032\ufffc\036\137\001" +
    "\002\000\004\050\ufffb\001\002\000\010\007\uffe1\010\uffe1" +
    "\032\uffe2\001\002\000\004\032\253\001\002\000\006\007" +
    "\uffdd\010\uffdb\001\002\000\004\014\251\001\002\000\004" +
    "\014\uffde\001\002\000\004\010\uffd3\001\002\000\004\007" +
    "\uffd9\001\002\000\004\014\uffdc\001\002\000\004\007\151" +
    "\001\002\000\004\050\156\001\002\000\004\014\uffd8\001" +
    "\002\000\004\014\154\001\002\000\016\007\ufffe\010\ufffe" +
    "\032\ufffe\036\ufffe\051\ufffe\052\ufffe\001\002\000\004\014" +
    "\uffd7\001\002\000\006\014\uffd6\015\uffd5\001\002\000\004" +
    "\015\160\001\002\000\006\036\uffc9\050\uffc9\001\002\000" +
    "\004\014\uffd4\001\002\000\006\036\uffc0\050\uffc2\001\002" +
    "\000\006\006\uffc3\014\uffc3\001\002\000\004\036\225\001" +
    "\002\000\006\006\uffc4\014\uffc4\001\002\000\004\050\176" +
    "\001\002\000\006\006\uffc8\014\171\001\002\000\006\006" +
    "\uffc5\014\uffc5\001\002\000\006\036\uffc0\050\uffc2\001\002" +
    "\000\004\006\173\001\002\000\006\005\uffc7\014\uffc7\001" +
    "\002\000\006\006\uffc6\014\uffc6\001\002\000\006\005\200" +
    "\016\177\001\002\000\006\005\uffbd\016\uffbd\001\002\000" +
    "\004\050\224\001\002\000\006\050\207\053\205\001\002" +
    "\000\006\006\uffc1\014\uffc1\001\002\000\006\006\uffec\014" +
    "\uffec\001\002\000\006\006\uffeb\014\uffeb\001\002\000\006" +
    "\006\uffea\014\uffea\001\002\000\004\054\210\001\002\000" +
    "\006\006\uffed\014\uffed\001\002\000\006\006\uffee\014\uffee" +
    "\001\002\000\004\020\213\001\002\000\006\016\217\055" +
    "\216\001\002\000\006\016\uffe6\055\uffe6\001\002\000\004" +
    "\057\214\001\002\000\004\020\215\001\002\000\006\016" +
    "\uffe5\055\uffe5\001\002\000\004\056\221\001\002\000\004" +
    "\020\213\001\002\000\006\016\uffe7\055\uffe7\001\002\000" +
    "\006\050\207\053\205\001\002\000\006\006\uffe8\014\uffe8" +
    "\001\002\000\006\006\uffe9\014\uffe9\001\002\000\006\005" +
    "\uffbe\016\uffbe\001\002\000\004\050\176\001\002\000\006" +
    "\005\227\016\177\001\002\000\006\050\207\053\205\001" +
    "\002\000\006\006\uffbf\014\uffbf\001\002\000\004\010\233" +
    "\001\002\000\004\014\uffda\001\002\000\004\050\240\001" +
    "\002\000\004\014\uffd2\001\002\000\004\014\236\001\002" +
    "\000\016\007\ufffe\010\ufffe\032\ufffe\036\ufffe\051\ufffe\052" +
    "\ufffe\001\002\000\004\014\uffd1\001\002\000\006\005\uffd0" +
    "\015\uffce\001\002\000\004\015\160\001\002\000\004\005" +
    "\243\001\002\000\004\050\245\001\002\000\004\014\uffcf" +
    "\001\002\000\004\014\uffcc\001\002\000\004\005\247\001" +
    "\002\000\004\050\245\001\002\000\004\014\uffcd\001\002" +
    "\000\010\007\uffdd\010\uffdb\032\uffe0\001\002\000\004\014" +
    "\uffdf\001\002\000\024\014\uffb7\021\257\022\272\023\uffb5" +
    "\032\255\037\uffb7\043\266\046\265\050\271\001\002\000" +
    "\006\014\ufffd\031\ufffd\001\002\000\024\014\uffb7\021\257" +
    "\022\272\023\uffb5\032\255\037\uffb7\043\266\046\265\050" +
    "\271\001\002\000\012\014\uffb0\034\uffb0\037\uffb0\047\uffb0" +
    "\001\002\000\016\015\uff88\020\uff88\027\uff88\035\uff88\042" +
    "\uff88\050\uff88\001\002\000\012\014\uffb3\034\uffb3\037\uffb3" +
    "\047\uffb3\001\002\000\006\014\334\037\345\001\002\000" +
    "\012\014\uffaf\034\uffaf\037\uffaf\047\uffaf\001\002\000\006" +
    "\017\uff9b\054\067\001\002\000\012\014\uffb6\034\uffb6\037" +
    "\uffb6\047\uffb6\001\002\000\024\014\uff85\021\uff85\022\uff85" +
    "\023\uff85\032\uff85\043\uff85\046\uff85\047\uff85\050\uff85\001" +
    "\002\000\016\015\uff8e\020\uff8e\027\uff8e\035\uff8e\042\uff8e" +
    "\050\uff8e\001\002\000\010\014\uffb8\037\uffb8\047\uffb8\001" +
    "\002\000\004\023\307\001\002\000\020\014\uffac\015\uffae" +
    "\017\uff98\034\uffac\037\uffac\047\uffac\054\uff98\001\002\000" +
    "\004\015\uffa6\001\002\000\012\014\uffb2\034\uffb2\037\uffb2" +
    "\047\uffb2\001\002\000\012\014\uffb1\034\uffb1\037\uffb1\047" +
    "\uffb1\001\002\000\004\015\276\001\002\000\022\006\uffa3" +
    "\015\033\016\uffa3\020\023\027\026\035\025\042\037\050" +
    "\036\001\002\000\006\006\301\016\302\001\002\000\006" +
    "\006\uffa1\016\uffa1\001\002\000\012\014\uffa5\034\uffa5\037" +
    "\uffa5\047\uffa5\001\002\000\016\015\033\020\023\027\026" +
    "\035\025\042\037\050\036\001\002\000\006\006\uffa2\016" +
    "\uffa2\001\002\000\004\015\043\001\002\000\012\014\uffad" +
    "\034\uffad\037\uffad\047\uffad\001\002\000\012\014\uffb4\034" +
    "\uffb4\037\uffb4\047\uffb4\001\002\000\004\015\310\001\002" +
    "\000\010\006\uffa0\016\uffa0\050\uff9d\001\002\000\006\006" +
    "\315\016\316\001\002\000\004\050\314\001\002\000\010" +
    "\006\uff9c\016\uff9c\054\067\001\002\000\010\006\uff98\016" +
    "\uff98\054\uff98\001\002\000\012\014\uffa4\034\uffa4\037\uffa4" +
    "\047\uffa4\001\002\000\004\050\uff9f\001\002\000\004\050" +
    "\314\001\002\000\010\006\uff9e\016\uff9e\054\067\001\002" +
    "\000\016\015\033\020\023\027\026\035\025\042\037\050" +
    "\036\001\002\000\004\033\uff8d\001\002\000\004\033\324" +
    "\001\002\000\030\014\uffb7\021\257\022\272\023\uffb5\032" +
    "\255\034\uffb7\037\uffb7\043\266\046\265\047\uffb7\050\271" +
    "\001\002\000\012\014\uff8b\034\326\037\uff8b\047\uff8b\001" +
    "\002\000\030\014\uff8a\021\uff8a\022\uff8a\023\uff8a\032\uff8a" +
    "\034\uff8a\037\uff8a\043\uff8a\046\uff8a\047\uff8a\050\uff8a\001" +
    "\002\000\012\014\uff8c\034\uff8c\037\uff8c\047\uff8c\001\002" +
    "\000\030\014\uffb7\021\257\022\272\023\uffb5\032\255\034" +
    "\uffb7\037\uffb7\043\266\046\265\047\uffb7\050\271\001\002" +
    "\000\012\014\uff89\034\uff89\037\uff89\047\uff89\001\002\000" +
    "\024\014\uffb7\021\257\022\272\023\uffb5\032\255\043\266" +
    "\046\265\047\uffb7\050\271\001\002\000\006\014\334\047" +
    "\335\001\002\000\026\014\uffb7\021\257\022\272\023\uffb5" +
    "\032\255\037\uffb7\043\266\046\265\047\uffb7\050\271\001" +
    "\002\000\016\015\uff84\020\uff84\027\uff84\035\uff84\042\uff84" +
    "\050\uff84\001\002\000\016\015\033\020\023\027\026\035" +
    "\025\042\037\050\036\001\002\000\012\014\uff83\034\uff83" +
    "\037\uff83\047\uff83\001\002\000\010\014\uffb9\037\uffb9\047" +
    "\uffb9\001\002\000\004\017\342\001\002\000\016\015\uff9a" +
    "\020\uff9a\027\uff9a\035\uff9a\042\uff9a\050\uff9a\001\002\000" +
    "\016\015\033\020\023\027\026\035\025\042\037\050\036" +
    "\001\002\000\012\014\uff99\034\uff99\037\uff99\047\uff99\001" +
    "\002\000\006\014\uffba\031\uffba\001\002\000\016\015\033" +
    "\020\023\027\026\035\025\042\037\050\036\001\002\000" +
    "\004\044\uff87\001\002\000\004\044\351\001\002\000\030" +
    "\014\uffb7\021\257\022\272\023\uffb5\032\255\034\uffb7\037" +
    "\uffb7\043\266\046\265\047\uffb7\050\271\001\002\000\012" +
    "\014\uff86\034\uff86\037\uff86\047\uff86\001\002\000\006\014" +
    "\355\037\356\001\002\000\006\014\uff8f\037\uff8f\001\002" +
    "\000\024\014\uffb7\021\257\022\272\023\uffb5\032\255\037" +
    "\uffb7\043\266\046\265\050\271\001\002\000\012\014\uff91" +
    "\034\uff91\037\uff91\047\uff91\001\002\000\006\014\uff90\037" +
    "\uff90\001\002\000\004\050\363\001\002\000\012\007\ufffa" +
    "\010\ufffa\032\ufffa\050\363\001\002\000\006\005\364\016" +
    "\365\001\002\000\006\005\uffbb\016\uffbb\001\002\000\006" +
    "\050\207\053\205\001\002\000\004\050\366\001\002\000" +
    "\006\005\uffbc\016\uffbc\001\002\000\004\014\370\001\002" +
    "\000\012\007\uffe3\010\uffe3\032\uffe3\050\uffe3\001\002\000" +
    "\006\005\372\016\365\001\002\000\006\050\207\053\205" +
    "\001\002\000\004\014\374\001\002\000\012\007\uffe4\010" +
    "\uffe4\032\uffe4\050\uffe4\001\002\000\014\007\ufff0\010\ufff0" +
    "\032\ufff0\036\ufff0\050\ufff0\001\002\000\014\007\ufff2\010" +
    "\ufff2\032\ufff2\036\ufff2\050\377\001\002\000\004\026\u0100" +
    "\001\002\000\006\050\207\053\205\001\002\000\004\014" +
    "\u0102\001\002\000\014\007\uffef\010\uffef\032\uffef\036\uffef" +
    "\050\uffef\001\002\000\014\007\ufff1\010\ufff1\032\ufff1\036" +
    "\ufff1\050\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\006\002\003\074\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\011\075\010\001\001\000\004\005\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\135" +
    "\001\001\000\006\015\015\026\016\001\001\000\004\026" +
    "\133\001\001\000\002\001\001\000\004\077\020\001\001" +
    "\000\002\001\001\000\020\036\034\037\023\040\033\041" +
    "\031\062\030\071\027\072\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\040\077\041\031\062\030\071" +
    "\027\072\026\001\001\000\014\040\076\041\031\062\030" +
    "\071\027\072\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\036\064" +
    "\037\023\040\033\041\031\062\030\071\027\072\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\040" +
    "\001\001\000\012\041\037\062\030\071\027\072\026\001" +
    "\001\000\002\001\001\000\004\063\041\001\001\000\002" +
    "\001\001\000\010\064\045\065\044\121\043\001\001\000" +
    "\020\036\051\037\023\040\033\041\031\062\030\071\027" +
    "\072\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\065\050\121\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\152" +
    "\062\001\001\000\004\151\060\001\001\000\004\153\056" +
    "\001\001\000\012\041\057\062\030\071\027\072\026\001" +
    "\001\000\002\001\001\000\012\041\061\062\030\071\027" +
    "\072\026\001\001\000\002\001\001\000\012\041\063\062" +
    "\030\071\027\072\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\067\001\001\000" +
    "\022\036\071\037\023\040\033\041\031\062\030\071\027" +
    "\072\026\073\070\001\001\000\004\130\073\001\001\000" +
    "\002\001\001\000\020\036\075\037\023\040\033\041\031" +
    "\062\030\071\027\072\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\145\131\001\001\000\004\141\127\001" +
    "\001\000\004\146\125\001\001\000\004\147\123\001\001" +
    "\000\004\143\121\001\001\000\004\142\117\001\001\000" +
    "\004\144\115\001\001\000\004\140\113\001\001\000\004" +
    "\150\111\001\001\000\014\040\112\041\031\062\030\071" +
    "\027\072\026\001\001\000\002\001\001\000\016\037\114" +
    "\040\033\041\031\062\030\071\027\072\026\001\001\000" +
    "\002\001\001\000\016\037\116\040\033\041\031\062\030" +
    "\071\027\072\026\001\001\000\002\001\001\000\016\037" +
    "\120\040\033\041\031\062\030\071\027\072\026\001\001" +
    "\000\002\001\001\000\016\037\122\040\033\041\031\062" +
    "\030\071\027\072\026\001\001\000\002\001\001\000\014" +
    "\040\124\041\031\062\030\071\027\072\026\001\001\000" +
    "\002\001\001\000\014\040\126\041\031\062\030\071\027" +
    "\072\026\001\001\000\002\001\001\000\016\037\130\040" +
    "\033\041\031\062\030\071\027\072\026\001\001\000\002" +
    "\001\001\000\016\037\132\040\033\041\031\062\030\071" +
    "\027\072\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\375\067\374\001\001\000\004\004\137\001" +
    "\001\000\004\076\357\001\001\000\006\044\140\100\141" +
    "\001\001\000\004\010\253\001\001\000\012\045\142\046" +
    "\143\101\145\102\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\231\106\230\001\001\000\006\047" +
    "\146\103\147\001\001\000\002\001\001\000\004\051\151" +
    "\001\001\000\002\001\001\000\004\104\152\001\001\000" +
    "\002\001\001\000\006\003\154\075\010\001\001\000\002" +
    "\001\001\000\004\105\156\001\001\000\004\053\160\001" +
    "\001\000\004\113\161\001\001\000\002\001\001\000\016" +
    "\054\166\055\167\056\164\057\162\115\165\116\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\174\001\001\000\004\114\171\001\001\000" +
    "\002\001\001\000\014\055\173\056\164\057\162\115\165" +
    "\116\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\200\016\205\022\201\027\202\034" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\066\210\070\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\217\001\001\000\002\001\001\000\016\012\221\016" +
    "\205\022\201\027\202\034\203\043\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\225\001\001\000\002\001\001\000\014\012\227\016\205" +
    "\022\201\027\202\034\203\001\001\000\002\001\001\000" +
    "\004\052\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\234\001\001\000\002\001\001\000\006\003" +
    "\236\075\010\001\001\000\002\001\001\000\006\110\241" +
    "\111\240\001\001\000\004\053\245\001\001\000\002\001" +
    "\001\000\004\042\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\247\001\001\000" +
    "\002\001\001\000\010\046\251\101\145\102\144\001\001" +
    "\000\002\001\001\000\030\011\260\013\266\014\263\024" +
    "\272\025\273\031\255\035\261\061\257\071\262\072\026" +
    "\117\267\001\001\000\002\001\001\000\030\013\353\014" +
    "\263\024\272\025\273\030\352\031\255\035\261\061\257" +
    "\071\262\072\026\117\267\001\001\000\002\001\001\000" +
    "\004\134\345\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\125\340\001\001\000\002\001" +
    "\001\000\004\136\331\001\001\000\004\131\320\001\001" +
    "\000\002\001\001\000\004\017\305\001\001\000\004\120" +
    "\303\001\001\000\004\122\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\020\276\036" +
    "\277\037\023\040\033\041\031\062\030\071\027\072\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\036\302\037\023\040\033\041\031\062\030" +
    "\071\027\072\026\001\001\000\002\001\001\000\004\063" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\310\124\311\001\001\000\002\001" +
    "\001\000\006\071\312\072\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\123\316\001" +
    "\001\000\006\071\317\072\026\001\001\000\002\001\001" +
    "\000\020\036\321\037\023\040\033\041\031\062\030\071" +
    "\027\072\026\001\001\000\004\132\322\001\001\000\002" +
    "\001\001\000\026\013\324\014\263\024\272\025\273\031" +
    "\255\035\261\061\257\071\262\072\026\117\267\001\001" +
    "\000\004\032\326\001\001\000\004\133\327\001\001\000" +
    "\002\001\001\000\026\013\330\014\263\024\272\025\273" +
    "\031\255\035\261\061\257\071\262\072\026\117\267\001" +
    "\001\000\002\001\001\000\030\011\332\013\266\014\263" +
    "\024\272\025\273\031\255\035\261\061\257\071\262\072" +
    "\026\117\267\001\001\000\002\001\001\000\026\013\337" +
    "\014\263\024\272\025\273\031\255\035\261\061\257\071" +
    "\262\072\026\117\267\001\001\000\004\137\335\001\001" +
    "\000\020\036\336\037\023\040\033\041\031\062\030\071" +
    "\027\072\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\342\001\001\000\020\036" +
    "\343\037\023\040\033\041\031\062\030\071\027\072\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\036" +
    "\346\037\023\040\033\041\031\062\030\071\027\072\026" +
    "\001\001\000\004\135\347\001\001\000\002\001\001\000" +
    "\026\013\351\014\263\024\272\025\273\031\255\035\261" +
    "\061\257\071\262\072\026\117\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\356" +
    "\014\263\024\272\025\273\031\255\035\261\061\257\071" +
    "\262\072\026\117\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\360\007\361\001\001\000\004\007" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\366\016\205\022\201\027\202\034\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\372\016\205\022" +
    "\201\027\202\034\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\u0102\001\001\000" +
    "\002\001\001\000\014\012\u0100\016\205\022\201\027\202" +
    "\034\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    StringBuilder mepa, saida;
    Erro e;
    int contaVars;
    int deslocamento;
    int numeroEntradas;
    int rotulo;
    int nivel;
    int auxNumParam;
    int comando_escrita;
    int comando_leitura;
    
    /* Variáveis de controle - Chamada de Procedimento e Função */
    int chamada_rotina;           /* Valor 1 => uma chamada de rotina está sendo compilada */
    int indiceParametro;               /* Indica qual parâmetro está sendo compilado */
    int isParEnd;                      /* Indica que o parâmetro que está sendo compilado é por endereço */ 
    ElemTabSimb elemRotina;          /* Instância do procedimento que está sendo compilado */

    /* Pilha de Controle de Tipos - PcT*/
    LinkedList<Tipo> pct = new LinkedList<Tipo>();
    int analisar_expr;                   /* Indica se é ou não avaliar a expressão*/ 

    Rotulo ultimoRotulo;
    LinkedList<ElemPilhaSem> pilhaSem = new LinkedList<ElemPilhaSem>();
    ArrayList<ElemTabSimb> tabSimbolo = new ArrayList<ElemTabSimb>();
    ElemTabSimb elemTab;
    ElemPilhaSem elemPilha;

    public sintatico(java.io.Reader input, StringBuilder mep, StringBuilder sai, Erro err) {
        super (new lexico (input));
        mepa = mep;
        saida = sai;
        e = err;
        nivel = -1;
    }

    public void report_semantic_error (String message) {
        report_error (message, cur_token);
        done_parsing();
    }

    public void report_error(String message, Object info) {
        Simbolo simb = (Simbolo)info;
        saida.append("ERRO na linha "+simb.getLine()+": "+message);
        e.setaErro (simb.getLine(), simb.getColumn ());
    }

    public void report_fatal_error (String message, Object info) {
        done_parsing();
    }

    public void syntax_error(java_cup.runtime.Symbol current) {
        report_error("Sintatico", current);
    }

    public void eliminaSimbolos(int nivel){

        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb el;
        while(tamanhoTab != -1 && (el = this.tabSimbolo.get(tamanhoTab)).getNivel() == nivel){
            this.tabSimbolo.remove(tamanhoTab);
            tamanhoTab--;
        }
    }

    public void mostraTabSimb(){
        System.out.println("TabelaSimbolos - "+tabSimbolo.toString()+"\n");
    }

    public void mostraPilhaSem(){
        System.out.println("PilhaSemantica - "+pilhaSem.toString()+"\n");
    }

    public void mostraPcT(){
        System.out.println("Pilha de Controle de Tipos - "+pct.toString()+"\n");
    }

    public ElemTabSimb buscaSimbolo(String id){
        int tamanhoTab = this.tabSimbolo.size() - 1;
        ElemTabSimb e = null;

        while(tamanhoTab != -1 && !((e = tabSimbolo.get(tamanhoTab)).getNome().equals(id))){
            tamanhoTab--;
        }

        if(tamanhoTab == -1){
            return null;
        }
  
        return e;
    }

    public void cabecalhoFuncao(){
        
        int indice;
        ListIterator it;
        ArrayList<Variavel> parametros = null;
        Funcao funcao;
        ElemTabSimb elemFunc;

        /* Posicionar indice no início da marca DECLARACAO_ROTINA */
        indice = pilhaSem.indexOf(Marca.DECLARACAO_ROTINA);
        it = pilhaSem.listIterator(indice);
        it.next();
        it.remove();

        /* Desempilhar procedimento */
        elemFunc = (ElemTabSimb) it.next();

        /* Instaciar procedimento */
        funcao = new Funcao(rotulo, -numeroEntradas - 3);

        it.remove();
        
        if (numeroEntradas > 0) {
            parametros = criaParametros(it);
        }
        
        /* Add o ArrayList de parâmetros */
        funcao.setParametros(parametros);
        
        /* Adicionar procedimento na tabela de símbolos */
        elemFunc.setInfoC(funcao);

        funcao.setTipo((Tipo)pilhaSem.pollLast());

    }

    public void cabecalhoProcedimento(){

        int indice;
        ListIterator it;
        ArrayList<Variavel> parametros = null;
        Procedimento procedimento;
        ElemTabSimb elemProc;

        /* Posicionar indice no início da marca DECLARACAO_ROTINA */
        indice = pilhaSem.indexOf(Marca.DECLARACAO_ROTINA);
        it = pilhaSem.listIterator(indice);
        it.next();
        it.remove();

        /* Desempilhar procedimento */
        elemProc = (ElemTabSimb) it.next();

        /* Instaciar procedimento */
        procedimento = new Procedimento(rotulo);

        it.remove();
        
        if (numeroEntradas > 0) {
            parametros = criaParametros(it);
        }
        
        /* Add o ArrayList de parâmetros */
        procedimento.setParametros(parametros);
        
        /* Adicionar procedimento na tabela de símbolos */
        elemProc.setInfoC(procedimento);
    }

    /* Cria um ArrayList de parâmetros */
    public ArrayList<Variavel> criaParametros(ListIterator it){
        
        ArrayList<ElemTabSimb> listId;
        ArrayList<Variavel> parametros;
        Mecanismo mec;
        InfoComplementar infoC;
        int aux, numeroParam;
        IndiceArray indAr = null;
        Tipo tipo = null;

        aux = -numeroEntradas - 2;
        parametros = new ArrayList<Variavel>();
        numeroParam = numeroEntradas;

        for (int i = 0; i < numeroParam;) {

            indAr = null;
            tipo = null;    
            mec = (Mecanismo) it.next();
            it.remove();

            listId = new ArrayList<ElemTabSimb>();
            /* Desempilhar lista de identificadores */
            while ((elemPilha = (ElemPilhaSem) it.next()) instanceof ElemTabSimb) {
                elemTab = (ElemTabSimb) elemPilha;
                listId.add(elemTab);
                it.remove();
                i++;
            }

            if (elemPilha instanceof IndiceArray) {                
                it.remove();
                indAr = (IndiceArray) elemPilha;
                tipo = (Tipo) it.next();
                it.remove();
            } else {                
                it.remove();
                tipo = (Tipo) elemPilha;
            }

            /* Setar os atributos dos parâmetros */
            for (int j = 0; j < listId.size(); j++) {

                /* Verificar se é Array */
                if (indAr != null) {

                    /* Setar limites do Array*/
                    aux = aux - (indAr.getLimSuperior() - indAr.getLimInferior());
                    infoC = new Array(aux, tipo, indAr, mec);
                    aux += indAr.getLimSuperior() - indAr.getLimInferior();
                    parametros.add((Array) infoC);
                    if(mec == Mecanismo.PAS_VAL){
                        numeroEntradas += indAr.getLimSuperior() - indAr.getLimInferior();
                    }
                } else {
                    infoC = new Variavel(aux, tipo, mec);
                    parametros.add((Variavel) infoC);
                }

                aux++;
                /* Inserir parâmetro na tabela de símbolos*/
                listId.get(j).setInfoC(infoC);
                tabSimbolo.add(listId.get(j));

            }

        }
        
        return parametros;

    }

    public void varRotina(){
        
        Variavel param = null, arg;
        Funcao f;
        Procedimento p;

        elemTab = (ElemTabSimb) pilhaSem.pollLast();

        if (elemRotina.getInfoC() instanceof Funcao) {
            f = (Funcao) elemRotina.getInfoC();
            param = f.getParametro(indiceParametro);
        } else {
            p = (Procedimento) elemRotina.getInfoC();
            param = p.getParametro(indiceParametro);
        }
        
        arg = (Variavel) elemTab.getInfoC();

        /* Verificação de tipos na chamada de uma rotina */

        if (param.getTipo() == arg.getTipo() && arg.getClass() == param.getClass()) {
            if (param.getMecanismo() == Mecanismo.PAS_VAL) {
                
                if(elemTab.getInfoC() instanceof Array){
                    mepa.append("\tCRVA\t" + elemTab.getNivel() + "," + arg.getDeslocamento() + "," + ((Array)arg).getTamArray() +"\n");
                }else{
                    mepa.append("\tCRVL\t" + elemTab.getNivel() + "," + arg.getDeslocamento() + "\n");
                }
                
            } else {
                mepa.append("\tCREN\t" + elemTab.getNivel() + "," + arg.getDeslocamento() + "\n");
            }
        } else {
            report_semantic_error("Tipos incompatíveis!");
        }
        
    }

    public void verificaLimiteArray (String limI, String limS){
        
        int limInf, limSup;
        limInf = Integer.parseInt(limI.toString());
        limSup = Integer.parseInt(limS.toString());
        
        if(limInf > limSup){
            report_semantic_error ("O limite inferior deve ser menor ou igual ao limite superior!");
        }

        IndiceArray indA = new IndiceArray(limInf, limSup);
        pilhaSem.add(indA);
    }

    public void declaracaoVariaveis(){

        if(contaVars > 0){

            /* Posicionar indice no início da declaração de variáveis */
            int indice = pilhaSem.indexOf(Marca.DECLARACAO_VARS);
            int tamanhoPilha = pilhaSem.size();
            pilhaSem.remove(indice);
            
            ArrayList<ElemTabSimb> variaveis;
            Tipo tipo;
            IndiceArray indAr;

            for(int i = 0; i < contaVars ; ){

                variaveis = new ArrayList<ElemTabSimb>();
                tipo = null;
                indAr = null;

                /* Desempilha a lista de identificadores */
                while((elemPilha = pilhaSem.get(indice)) instanceof ElemTabSimb){
                    elemTab = (ElemTabSimb) elemPilha;
                    variaveis.add(elemTab);
                    i++;
                    pilhaSem.remove(indice);
                }

                elemPilha = pilhaSem.get(indice);
                pilhaSem.remove(indice);

                /* Tratar declação de array */    
                if(elemPilha instanceof IndiceArray){
                    indAr = (IndiceArray) elemPilha;
                    elemPilha = pilhaSem.get(indice);
                    pilhaSem.remove(indice);
                    tipo = (Tipo) elemPilha;                    
                    /* Ajustar deslocamento */
                }else{
                    tipo = (Tipo) elemPilha;
                }

                /* Setar os atributos das variáveis declaradas */
                if(indAr != null){
                    for(int j = 0; j < variaveis.size(); j++){
                        variaveis.get(j).setInfoC(new Array(deslocamento, tipo, indAr));
                        deslocamento += indAr.getLimSuperior() - indAr.getLimInferior() + 1;
                        if (tabSimbolo.contains(variaveis.get(j))) {
                            report_semantic_error("Identificador <" + elemTab.getNome() + "> já declarado!");
                        } else {
                            tabSimbolo.add(variaveis.get(j));
                        }
                    }                  
                }else{
                    for(int j = 0; j < variaveis.size(); j++){
                        variaveis.get(j).setInfoC(new Variavel(deslocamento++, tipo));
                        if (tabSimbolo.contains(variaveis.get(j))) {
                            report_semantic_error("Identificador <" + elemTab.getNome() + "> já declarado!");
                        } else {
                            tabSimbolo.add(variaveis.get(j));
                        }
                    }
                }
                
            }
            
            mepa.append ("\tAMEM\t"+(deslocamento)+"\n");
            elemPilha = new VariaveisDeclaradas(deslocamento);
            pilhaSem.add(elemPilha);
        }
    }

    public void chamadaProcedimento(){
            
        /* Posicionar indice no início da chamada procedimento */
        int indice = pilhaSem.indexOf(Marca.CHAMADA_PROCEDIMENTO);
        pilhaSem.remove(indice);
        elemTab = (ElemTabSimb) pilhaSem.remove(indice);
        Procedimento proc = (Procedimento) elemTab.getInfoC();
        if(proc.getNumParam() > indiceParametro){
            report_semantic_error("Número de argumentos inválidos!");
        }else{
            mepa.append ("\tCHPR\t"+"L"+proc.getRotulo()+"\n");
        }
    }

    public void armazena(){

        elemTab = (ElemTabSimb) pilhaSem.pollLast();
        InfoComplementar infoC = elemTab.getInfoC();
        Variavel v;

        if( infoC instanceof Array){

            v = (Array)infoC;
            /* Verificar se é parâmetro */
            if(v.isParametro()){
                if(v.getMecanismo() == Mecanismo.PAS_END){

                    /* Verificar se está sendo compilado um comando de leitura */
                    if(comando_leitura == 1){
                        mepa.append ("\tALAI\t"+elemTab.getNivel()+","+ v.getDeslocamento()+","+(((Array)v).getTamArray() - 1)+"\n");
                    }else{
                        mepa.append ("\tARAI\t"+elemTab.getNivel()+","+ v.getDeslocamento()+","+(((Array)v).getTamArray() - 1)+"\n");
                    }

                }else{
                    mepa.append ("\tARLA\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }
            }else {
                if(comando_leitura == 1){
                    mepa.append ("\tARLA\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }else{
                    mepa.append ("\tARME\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }
            }
        }else if(infoC instanceof Variavel){

            v = (Variavel)infoC;
            if(v.isParametro()){
                if(v.getMecanismo() == Mecanismo.PAS_END){
                    mepa.append ("\tARMI\t"+ elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }else{
                    mepa.append ("\tARMZ\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
                }
            }else{    
                mepa.append ("\tARMZ\t"+elemTab.getNivel()+","+ v.getDeslocamento()+"\n");
            }
        }else if(infoC instanceof Funcao){
            mepa.append ("\tARMZ\t"+(elemTab.getNivel()+1)+","+((Funcao)infoC).getDeslocamento()+"\n");
        }
    }

    /* Seta variáveis de controle para declaração de variáveis */
    public void iniciaDecVars(){
        contaVars = 0; 
        deslocamento = 0;
        pilhaSem.add(Marca.DECLARACAO_VARS);
    }

    public void liberaMemoria(){
        if(pilhaSem.peekLast() instanceof VariaveisDeclaradas){
            elemPilha = pilhaSem.pollLast();
            mepa.append("\tDMEM\t"+((VariaveisDeclaradas)elemPilha).getQuantidade()+"\n");
        }
        eliminaSimbolos(nivel);
        nivel--;
    }

    public void instanciaIdentificador(String id){
        elemTab = new ElemTabSimb(id, nivel);
        if(tabSimbolo.contains(elemTab)){
            report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            elemTab.setInfoC(new Variavel(contaVars));
            tabSimbolo.add(elemTab);
        }
    }

    /* Seta variáveis para a declaração de Procedimentos e Funções */
    public void iniciaDecProcFunc(){
        rotulo++;
        mepa.append ("\tDSVS\tL"+rotulo+"\n");
        pilhaSem.add(new Rotulo(rotulo));
    }

    /* Finaliza declaração de Procedimentos e Funções */
    public void finalizaDecProcFunc(){
        elemPilha = pilhaSem.pollLast();
        if(elemPilha instanceof Rotulo){
          mepa.append ("L"+((Rotulo)elemPilha).getRotulo()+":\tNADA\n");
        }
    }

    public void inicioChamadaFuncao(String id){
        elemTab = buscaSimbolo(id);
        if(elemTab == null){
            report_semantic_error ("Função <"+id+"> não declarada!");
        }else{
            pilhaSem.add(elemTab);
            elemRotina = elemTab;
            chamada_rotina = 1;
            mepa.append ("\tAMEM\t"+1+"\n");
        }
    }

    public void instanciaParametros(String id){
        elemTab = new ElemTabSimb(id, nivel);
        if(tabSimbolo.contains(elemTab)){
            report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            numeroEntradas++;
            pilhaSem.add(elemTab);
        }
    }
    
    public void inicioChamadaProc(String id){
        elemTab = buscaSimbolo(id);
        if(elemTab == null){
            report_semantic_error ("Procedimento <"+id+"> não declarado!");
        }else{
            pilhaSem.add(Marca.CHAMADA_PROCEDIMENTO);
            pilhaSem.add(elemTab);
            elemRotina = elemTab;
        }
    }

    public void empilhaIdentificador(String id){
        elemTab = buscaSimbolo(id);
        if(elemTab == null){
            report_semantic_error ("Identificador <"+id+"> não declarado!");
        }else{
            if(analisar_expr == 1){
                if(elemTab.getInfoC() instanceof Variavel){
                    pct.add(((Variavel)elemTab.getInfoC()).getTipo());
                }else{
                    pct.add(((Funcao)elemTab.getInfoC()).getTipo());
                }
            }
            pilhaSem.add(elemTab);           
        }
    }

    public void inicioIF(){
        rotulo++;
        mepa.append ("\tDSVF\tL"+rotulo+"\n");
        pilhaSem.add (new Rotulo(rotulo));
    }

    public void fimIF(){
        elemPilha = pilhaSem.pollLast();
        mepa.append ("L"+((Rotulo)elemPilha).getRotulo()+":\tNADA\n");
    }

    public void inicioElse(){
        rotulo++;
        mepa.append ("\tDSVS\tL"+rotulo+"\n");
        elemPilha = pilhaSem.pollLast();
        mepa.append ("L"+((Rotulo)elemPilha).getRotulo()+":\tNADA\n");
        pilhaSem.add (new Rotulo(rotulo));
    }

    public void inicioComRepetitivo(){
        rotulo++;
        mepa.append ("L"+rotulo+":\tNADA\n");
        pilhaSem.add (new Rotulo(rotulo));
    }

    public void condicaoWhile(){
        rotulo++;
        mepa.append ("\tDSVF\tL"+rotulo+"\n");
        pilhaSem.add (new Rotulo(rotulo));
    }
    
    public void fimWhile(){
        ultimoRotulo = (Rotulo) pilhaSem.pollLast();
        elemPilha = pilhaSem.pollLast();
        mepa.append ("\tDSVS\tL"+((Rotulo)elemPilha).getRotulo()+"\n");
        mepa.append ("L"+ultimoRotulo.getRotulo()+":\tNADA\n");
    }

    public void condicaoRepeat(){
        ultimoRotulo = (Rotulo) pilhaSem.pollLast();
        mepa.append ("\tDSVF\tL"+ultimoRotulo.getRotulo()+"\n");
    }

    public void varAcesso(){
        elemTab = (ElemTabSimb) pilhaSem.pollLast();
        InfoComplementar infoC = elemTab.getInfoC();
        Variavel v;

        if (infoC instanceof Array) {
            
            v = (Array)infoC;
            /* Verificar se é parâmetro */
            mepa.append("\tCRCT\t" + ((Array)v).getLimInferior() + "\n");
            mepa.append("\tSUBT\n");
            if(v.isParametro()){
                if(v.getMecanismo() == Mecanismo.PAS_END){  
                    mepa.append("\tCREI\t"+elemTab.getNivel()+","+ v.getDeslocamento()+","+(((Array)v).getTamArray() - 1)+"\n");
                }else{
                    mepa.append("\tCREL\t" + elemTab.getNivel() + "," + v.getDeslocamento() + "\n");
                }
            }else{
                mepa.append("\tCREL\t" + elemTab.getNivel() + "," + v.getDeslocamento() + "\n");
            }
        } else {
            mepa.append("\tCRVL\t" + elemTab.getNivel() + "," + ((Variavel) infoC).getDeslocamento() + "\n");            
        }
    }

    public void iniciaTabSimb(){

        InfoComplementar inf;
        
        /*Adicionar tipos pré-definidos na tabela de símbolos*/

        elemTab = new ElemTabSimb("INTEGER",-1);
        inf = Tipo.INTEGER;
        elemTab.setInfoC(inf);
        tabSimbolo.add(elemTab);

        elemTab = new ElemTabSimb("BOOLEAN",-1);
        inf = Tipo.BOOLEAN;
        elemTab.setInfoC(inf);
        tabSimbolo.add(elemTab);

        /* Criar variáveis para os tipos false e true
        
        elemTab = new ElemTabSimb("false",0);
        inf = new Variavel(deslocamento++, Tipo.BOOLEAN);
        elemTab.setInfoC(inf);
        tabSimbolo.add(elemTab);

        elemTab = new ElemTabSimb("true",1);
        inf = new Variavel(deslocamento++, Tipo.BOOLEAN);
        elemTab.setInfoC(inf);
        tabSimbolo.add(elemTab);

        */

    }

    /* Verificar compatibilidade de tipos - Operador Relacional */
    public void analisaTipoOPR(){

        Tipo tipo1, tipo2;
        tipo1 =  (Tipo)pct.pollLast();
        tipo2 =  (Tipo)pct.pollLast();
        if(tipo1 == Tipo.INTEGER && tipo2 == Tipo.INTEGER){
            pct.add(Tipo.BOOLEAN);
        }else if(tipo1 == Tipo.BOOLEAN && tipo2 == Tipo.BOOLEAN){
            pct.add(tipo1);
        }else{
            report_semantic_error ("Expressão inválida "+ tipo1 +" - " + tipo2);
        }
        
    }

    /* Verificar compatibilidade de tipos - Operador Aritmético */
    public void analisaTipoOPA(){
        
        Tipo tipo1, tipo2;
        tipo1 =  (Tipo)pct.pollLast();
        tipo2 =  (Tipo)pct.pollLast();
        if(tipo1 == Tipo.INTEGER &&  tipo2 == Tipo.INTEGER){
            pct.add(tipo1);
        }else{
            report_semantic_error ("Expressão inválida "+ tipo1 +" - " + tipo2);
        }
    }

    /* Verificar compatibilidade de tipos - Operador Lógico */
    public void analisaTipoOPL(){
        
        Tipo tipo1, tipo2;
        tipo1 =  (Tipo)pct.pollLast();
        tipo2 =  (Tipo)pct.pollLast();
        if(tipo1 == Tipo.BOOLEAN &&  tipo2 == Tipo.BOOLEAN){
            pct.add(tipo1);
        }else{
            report_semantic_error ("Expressão inválida "+ tipo1 +" - " + tipo2);
        }
    }

    /* Verificar compatibilidade de tipos na atribuição */
    public void verificaTiposAtrib(){
        
        Tipo tipo1, tipo2;
        tipo1 =  (Tipo)pct.pollLast();

        elemTab = (ElemTabSimb)pilhaSem.peekLast();
        if(elemTab.getInfoC() instanceof Funcao){
            tipo2 = ((Funcao)elemTab.getInfoC()).getTipo();
        }else{
            tipo2 = ((Variavel)elemTab.getInfoC()).getTipo();
        }

        if(tipo1 != tipo2){
            report_semantic_error ("Tipos incompatíveis "+ tipo2 +" - " + tipo1);
        }  
    }

    /* Retorna o parâmetro atual da rotina que está sendo compilada */
    public Variavel getParamAtual(){
        
        Variavel param = null;
        Funcao f;
        Procedimento p;

        if (elemRotina.getInfoC() instanceof Funcao) {
            f = (Funcao) elemRotina.getInfoC();
            if (indiceParametro < f.getNumParam()) {
                param = f.getParametro(indiceParametro);
            }
        } else {
            p = (Procedimento) elemRotina.getInfoC();
            if (indiceParametro < p.getNumParam()) {
                param = p.getParametro(indiceParametro);
            }
        }

        return param;
    }

    /* Verifica se os tipos do argumento e parâmetro são compatíveis */
    public void analisaTipoArgParam(){

        Variavel param = (Variavel)pilhaSem.pollLast();
        Tipo tipoArg, tipoParam;
        tipoArg = pct.pollLast();
        tipoParam = param.getTipo();

        if(tipoArg != tipoParam){
            report_semantic_error ("Tipos incompatíveis "+ tipoArg +" - " + tipoParam);
        }else{
            analisar_expr = 0;
            indiceParametro++;
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintatico$actions {
  private final sintatico parser;

  /** Constructor */
  CUP$sintatico$actions(sintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintatico$do_action(
    int                        CUP$sintatico$act_num,
    java_cup.runtime.lr_parser CUP$sintatico$parser,
    java.util.Stack            CUP$sintatico$stack,
    int                        CUP$sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintatico$result;

      /* select the action based on the action number */
      switch (CUP$sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // fator ::= S_NOT fator 
            {
              Object RESULT =null;
		 
        parser.mepa.append ("\tNEGA\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // fator ::= S_ABREPAR expressao S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // fator ::= chamada_funcao 
            {
              Object RESULT =null;
		
        parser.chamada_rotina = 0;
        parser.indiceParametro = 0;
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.pollLast();
        Funcao func = (Funcao) parser.elemTab.getInfoC();
        parser.mepa.append ("\tCHPR\t"+"L"+func.getRotulo()+"\n");
        if(parser.analisar_expr == 1){
            parser.pct.add(func.getTipo());
        }
     
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // fator ::= S_NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		 
        parser.mepa.append ("\tCRCT\t"+numero+"\n");
        if(parser.analisar_expr == 1){
            parser.pct.add(Tipo.INTEGER);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // fator ::= variavel_de_acesso 
            {
              Object RESULT =null;
		
        if(parser.chamada_rotina != 1){
            parser.varAcesso();    
        }else{
            parser.varRotina();
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // termo ::= fator 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // termo ::= termo S_AND NT$47 fator 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.mepa.append ("\tCONJ\n"); 
            parser.analisaTipoOPL();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$47 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$47",105, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // termo ::= termo S_DIV NT$46 fator 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.mepa.append ("\tDIVI\n"); 
            parser.analisaTipoOPA();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$46 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$46",104, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // termo ::= termo S_VEZES NT$45 fator 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.mepa.append ("\tMULT\n"); 
            parser.analisaTipoOPA();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("termo",30, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$45 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$45",103, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expressao_simples ::= termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expressao_simples ::= S_MENOS termo 
            {
              Object RESULT =null;
		 
            parser.mepa.append ("\tINVR\n"); 
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expressao_simples ::= S_MAIS termo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expressao_simples ::= expressao_simples S_OR NT$44 termo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.mepa.append ("\tDISJ\n"); 
            parser.analisaTipoOPL();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$44 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$44",102, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expressao_simples ::= expressao_simples S_MENOS NT$43 termo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.mepa.append ("\tSUBT\n");
            parser.analisaTipoOPA();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$43 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$43",101, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expressao_simples ::= expressao_simples S_MAIS NT$42 termo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.analisaTipoOPA();
            parser.mepa.append ("\tSOMA\n"); 
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao_simples",29, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$42 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$42",100, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expressao ::= expressao_simples 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expressao ::= expressao_simples S_MAIGUAL NT$41 expressao_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.mepa.append ("\tCMAG\n"); 
            parser.analisaTipoOPR();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$41 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$41",99, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expressao ::= expressao_simples S_MEIGUAL NT$40 expressao_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.mepa.append ("\tCMEG\n"); 
            parser.analisaTipoOPR();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$40 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$40",98, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expressao ::= expressao_simples S_MAIOR NT$39 expressao_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.analisaTipoOPR();
            parser.mepa.append ("\tCMMA\n"); 
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$39 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$39",97, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expressao ::= expressao_simples S_MENOR NT$38 expressao_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 
            parser.mepa.append ("\tCMME\n"); 
            parser.analisaTipoOPR();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$38 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$38",96, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expressao ::= expressao_simples S_DIFERENTE NT$37 expressao_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		  
            parser.mepa.append ("\tCMDG\n"); 
            parser.analisaTipoOPR();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$37 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$37",95, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expressao ::= expressao_simples S_IGUAL NT$36 expressao_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		           
            parser.mepa.append ("\tCMIG\n");
            parser.analisaTipoOPR();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("expressao",28, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$36 ::= 
            {
              Object RESULT =null;

            if((parser.chamada_rotina == 1) && (parser.isParEnd == 1)){
                parser.report_semantic_error("Argumento inválido!");
            }
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$36",94, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // repetitivo ::= S_REPEAT NT$34 sequencia_comandos S_UNTIL NT$35 expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
            parser.condicaoRepeat();
            parser.pct.pollLast();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",27, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

            parser.analisar_expr = 1;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$35",93, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$34 ::= 
            {
              Object RESULT =null;

            parser.inicioComRepetitivo();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$34",92, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // repetitivo ::= S_WHILE NT$32 expressao NT$33 S_DO comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
            parser.fimWhile();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("repetitivo",27, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

            parser.condicaoWhile();
            parser.pct.pollLast();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$33",91, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$32 ::= 
            {
              Object RESULT =null;

            parser.inicioComRepetitivo();
            parser.analisar_expr = 1;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$32",90, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // alternativa_cond ::= S_ELSE NT$31 comando_sem_rotulo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",24, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$31 ::= 
            {
              Object RESULT =null;

        parser.inicioElse();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$31",89, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // alternativa_cond ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("alternativa_cond",24, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicional ::= S_IF NT$29 expressao NT$30 S_THEN comando_sem_rotulo alternativa_cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.fimIF();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("condicional",23, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-6)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.pct.pollLast();
        parser.inicioIF();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$30",88, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$29 ::= 
            {
              Object RESULT =null;

        parser.analisar_expr = 1;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$29",87, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lista_comandos_sem_rotulo ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",22, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lista_comandos_sem_rotulo ::= lista_comandos_sem_rotulo S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos_sem_rotulo",22, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // composto ::= S_BEGIN lista_comandos_sem_rotulo S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("composto",19, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // indice_de_lista_de_expressao ::= expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("indice_de_lista_de_expressao",57, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // indice_de_lista_de_expressao ::= indice_de_lista_de_expressao S_VIRGULA expressao 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("indice_de_lista_de_expressao",57, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variavel_indexada ::= variavel_de_acesso S_ABRECOL NT$27 indice_de_lista_de_expressao NT$28 S_FECHACOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variavel_indexada",56, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
    
        parser.analisar_expr = 0;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$28",86, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$27 ::= 
            {
              Object RESULT =null;

        parser.analisar_expr = 1;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$27",85, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variavel_de_acesso ::= variavel_indexada 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variavel_de_acesso",55, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variavel_de_acesso ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.empilhaIdentificador(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variavel_de_acesso",55, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // atribuicao ::= variavel_de_acesso NT$25 S_ATRIBUI NT$26 expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("atribuicao",18, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.analisar_expr = 1;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$26",84, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$25 ::= 
            {
              Object RESULT =null;

        parser.elemTab = (ElemTabSimb)parser.pilhaSem.peekLast();
        InfoComplementar infoC = parser.elemTab.getInfoC();        
        if (infoC instanceof Array) {
            parser.mepa.append("\tCRCT\t" + ((Array) infoC).getLimInferior() + "\n");
            parser.mepa.append("\tSUBT\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$25",83, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_de_variaveis ::= NT$24 variavel_de_acesso 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        parser.elemTab = (ElemTabSimb) parser.pilhaSem.peekLast();
        InfoComplementar infoC = parser.elemTab.getInfoC();
        if( infoC instanceof Array){
            parser.mepa.append ("\tCRCT\t"+((Array)infoC).getLimInferior()+"\n");
            parser.mepa.append ("\tSUBT\n");
        }
        parser.armazena();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$24 ::= 
            {
              Object RESULT =null;
 parser.mepa.append("\tLEIT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$24",82, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_de_variaveis ::= lista_de_variaveis S_VIRGULA NT$23 variavel_de_acesso 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
            parser.elemTab = (ElemTabSimb) parser.pilhaSem.peekLast();
            InfoComplementar infoC = parser.elemTab.getInfoC();
            if( infoC instanceof Array){
                parser.mepa.append ("\tCRCT\t"+((Array)infoC).getLimInferior()+"\n");
                parser.mepa.append ("\tSUBT\n");
            }
            parser.armazena();
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$23 ::= 
            {
              Object RESULT =null;
 parser.mepa.append("\tLEIT\n"); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$23",81, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_de_variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",17, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_de_expressoes ::= expressao 
            {
              Object RESULT =null;
		
        if(parser.comando_escrita == 1){
            parser.mepa.append ("\tIMPR\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_de_expressoes ::= lista_de_expressoes S_VIRGULA expressao 
            {
              Object RESULT =null;
		
        if(parser.comando_escrita == 1){
            parser.mepa.append ("\tIMPR\n");
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lista_de_expressoes ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",14, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // chamada_comando_leitura ::= S_READ S_ABREPAR lista_de_variaveis S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_leitura",13, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // chamada_comando_escrita ::= S_WRITE NT$22 S_ABREPAR lista_de_expressoes S_FECHAPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		
        parser.comando_escrita = 0;
        parser.analisar_expr = 0;
        parser.pct.pollLast();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_comando_escrita",10, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$22 ::= 
            {
              Object RESULT =null;

        parser.comando_escrita = 1;
        parser.analisar_expr = 1;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$22",80, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_atuais ::= NT$21 expressao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        parser.analisaTipoArgParam();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros_atuais",51, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$21 ::= 
            {
              Object RESULT =null;

        parser.analisar_expr = 1;
        Variavel param = parser.getParamAtual();
        parser.pilhaSem.add(param);
        if(param == null){
            parser.report_semantic_error("Número de argumentos inválidos!");
        }else{
            if(param.getMecanismo() == Mecanismo.PAS_END){
                parser.isParEnd = 1;
            }else{
                parser.isParEnd = 0;
            }
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$21",79, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lista_de_parametros_atuais ::= parametros_atuais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",50, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_de_parametros_atuais ::= lista_de_parametros_atuais S_VIRGULA parametros_atuais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros_atuais",50, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros ::= S_ABREPAR lista_de_parametros_atuais S_FECHAPAR 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametros",49, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // chamada_procedimento ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.inicioChamadaProc(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",47, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // chamada_procedimento ::= S_IDENTIF NT$20 parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",47, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$20 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.chamada_rotina = 1;
        parser.indiceParametro = 0;
        parser.inicioChamadaProc(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$20",78, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comando_sem_rotulo ::= repetitivo 
            {
              Object RESULT =null;
		
            parser.analisar_expr = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comando_sem_rotulo ::= condicional 
            {
              Object RESULT =null;
		
            parser.analisar_expr = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comando_sem_rotulo ::= composto 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comando_sem_rotulo ::= atribuicao 
            {
              Object RESULT =null;
		
            parser.verificaTiposAtrib();
            parser.armazena();
            parser.analisar_expr = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comando_sem_rotulo ::= chamada_procedimento 
            {
              Object RESULT =null;
		
            parser.chamadaProcedimento();
            parser.chamada_rotina = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comando_sem_rotulo ::= NT$19 chamada_comando_leitura 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		 parser.comando_leitura = 0; 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              Object RESULT =null;
 parser.comando_leitura = 1; 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$19",77, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comando_sem_rotulo ::= chamada_comando_escrita 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comando_sem_rotulo ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("comando_sem_rotulo",9, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sequencia_comandos ::= comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sequencia_comandos ::= sequencia_comandos S_PONTOVG comando_sem_rotulo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",7, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // corpo ::= S_BEGIN sequencia_comandos S_END 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("corpo",6, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_de_identificadores ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        parser.pilhaSem.add(parser.elemTab);
        parser.contaVars++;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",5, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_de_identificadores ::= lista_de_identificadores S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);    
        parser.pilhaSem.add(parser.elemTab);
        parser.contaVars++;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_identificadores",5, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_de_parametros ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.instanciaParametros(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",46, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_de_parametros ::= lista_de_parametros S_VIRGULA S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.instanciaParametros(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",46, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametro_por_referencia ::= NT$18 S_VAR lista_de_parametros S_DOISPTOS denotacao_de_tipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_referencia",45, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$18 ::= 
            {
              Object RESULT =null;

        parser.pilhaSem.add(Mecanismo.PAS_END);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$18",76, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametro_por_valor ::= NT$17 lista_de_parametros S_DOISPTOS denotacao_de_tipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("parametro_por_valor",44, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$17 ::= 
            {
              Object RESULT =null;

        parser.pilhaSem.add(Mecanismo.PAS_VAL);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$17",75, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // secao_de_parametros_formais ::= parametro_por_referencia 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",43, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // secao_de_parametros_formais ::= parametro_por_valor 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_de_parametros_formais",43, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // secao_lista_de_parametros_formais ::= secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",42, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // secao_lista_de_parametros_formais ::= secao_lista_de_parametros_formais S_PONTOVG secao_de_parametros_formais 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("secao_lista_de_parametros_formais",42, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_formal_de_parametros ::= S_ABREPAR NT$15 secao_lista_de_parametros_formais NT$16 S_FECHAPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_formal_de_parametros",41, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.nivel--;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$16",74, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$15 ::= 
            {
              Object RESULT =null;

        parser.nivel++;
        parser.numeroEntradas = 0;
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$15",73, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // chamada_funcao ::= S_IDENTIF NT$14 parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("chamada_funcao",48, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$14 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.inicioChamadaFuncao(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$14",72, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_de_retorno ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        //Buscar tipo na tabela de simbolos
        parser.pilhaSem.add(Tipo.INTEGER);
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_de_retorno",32, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cabecalho_funcao ::= S_FUNCTION S_IDENTIF NT$13 lista_formal_de_parametros S_DOISPTOS tipo_de_retorno 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_funcao",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$13 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(Marca.DECLARACAO_ROTINA);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$13",71, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cabecalho_funcao ::= S_FUNCTION S_IDENTIF NT$12 S_DOISPTOS tipo_de_retorno 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_funcao",40, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(Marca.DECLARACAO_ROTINA);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$12",70, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracao_de_funcao ::= NT$10 cabecalho_funcao NT$11 S_PONTOVG bloco 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.mepa.append ("\tRTPR\t"+(parser.nivel+1)+", "+parser.numeroEntradas+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao",38, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.cabecalhoFuncao();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$11",69, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$10 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("L"+parser.rotulo+":\tENPR\t"+(parser.nivel+1)+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$10",68, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF NT$9 lista_formal_de_parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",39, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(Marca.DECLARACAO_ROTINA);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$9",67, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cabecalho_procedimento ::= S_PROCEDURE S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = new ElemTabSimb(id.toString(), parser.nivel);
        if(parser.tabSimbolo.contains(parser.elemTab)){
            parser.report_semantic_error ("Identificador <"+id+"> já declarado!");
        }else{
            parser.tabSimbolo.add(parser.elemTab);
            parser.pilhaSem.add(Marca.DECLARACAO_ROTINA);
            parser.pilhaSem.add(parser.elemTab);
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("cabecalho_procedimento",39, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracao_de_procedimento ::= NT$7 cabecalho_procedimento NT$8 S_PONTOVG bloco 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.mepa.append ("\tRTPR\t"+(parser.nivel+1)+","+parser.numeroEntradas+"\n");
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_procedimento",37, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

        parser.cabecalhoProcedimento();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$8",66, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$7 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("L"+parser.rotulo+":\tENPR\t"+(parser.nivel+1)+"\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$7",65, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracao_de_funcao_ou_procedimento ::= NT$6 declaracao_de_funcao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao_ou_procedimento",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              Object RESULT =null;

            parser.rotulo++;
            parser.auxNumParam = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$6",64, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracao_de_funcao_ou_procedimento ::= NT$5 declaracao_de_procedimento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcao_ou_procedimento",36, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT =null;

            parser.rotulo++;
            parser.auxNumParam = 0;
        
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$5",63, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_de_declaracao_de_funcao_ou_procedimento ::= declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_de_declaracao_de_funcao_ou_procedimento ::= lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG declaracao_de_funcao_ou_procedimento 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_declaracao_de_funcao_ou_procedimento",35, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracao_de_funcoes_e_procendimentos ::= NT$4 lista_de_declaracao_de_funcao_ou_procedimento S_PONTOVG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		
        parser.finalizaDecProcFunc();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",34, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;

        parser.iniciaDecProcFunc();
      
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$4",62, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracao_de_funcoes_e_procendimentos ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_funcoes_e_procendimentos",34, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracoes_de_vars ::= lista_de_identificadores S_DOISPTOS denotacao_de_tipo S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracoes_de_vars ::= declaracoes_de_vars lista_de_identificadores S_DOISPTOS denotacao_de_tipo S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracoes_de_vars",4, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_indice ::= S_NUMERO S_PTOPTO S_NUMERO 
            {
              Object RESULT =null;
		int limInfleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).left;
		int limInfright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).right;
		Object limInf = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)).value;
		int limSupleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int limSupright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object limSup = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.verificaLimiteArray(limInf.toString(), limSup.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_indice",54, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_de_indices ::= tipo_indice 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_indices",52, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_de_indices ::= lista_de_indices S_VIRGULA tipo_indice 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_indices",52, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= denotacao_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_array ::= S_ARRAY S_ABRECOL lista_de_indices S_FECHACOL S_OF tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("tipo_array",26, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estrutura_tipo ::= tipo_array 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("estrutura_tipo",21, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // novo_tipo_estrutura ::= estrutura_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("novo_tipo_estrutura",16, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // novo_tipo ::= novo_tipo_estrutura 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("novo_tipo",12, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // denotacao_de_tipo ::= novo_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("denotacao_de_tipo",8, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // denotacao_de_tipo ::= S_IDENTIF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;
		
        parser.elemTab = parser.buscaSimbolo(id.toString().toUpperCase());
        if(parser.elemTab == null){
            parser.report_semantic_error ("Tipo <"+id+"> não definido!");
        }else{
            parser.pilhaSem.add((Tipo)parser.elemTab.getInfoC());
        }
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("denotacao_de_tipo",8, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definicao_de_tipo ::= S_IDENTIF S_IGUAL denotacao_de_tipo S_PONTOVG 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("definicao_de_tipo",53, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_de_tipo ::= definicao_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_tipo",25, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_de_tipo ::= lista_de_tipo definicao_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_tipo",25, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracao_de_tipo ::= S_TYPE lista_de_tipo 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_tipo",15, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracao_de_tipo ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_tipo",15, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definicao_de_constante ::= S_IDENTIF NT$3 S_IGUAL expressao S_PONTOVG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)).value;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("definicao_de_constante",20, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.peek()).value;

        parser.instanciaIdentificador(id.toString());
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$3",61, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_de_constante ::= definicao_de_constante 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_constante",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_de_constante ::= lista_de_constante definicao_de_constante 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("lista_de_constante",11, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracao_de_constante ::= S_CONST lista_de_constante 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_constante",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracao_de_constante ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("declaracao_de_constante",3, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variaveis ::= S_VAR NT$2 declaracoes_de_vars 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		
        parser.declaracaoVariaveis();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
 
        parser.iniciaDecVars();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$2",60, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variaveis ::= 
            {
              Object RESULT =null;

              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloco ::= NT$1 declaracao_de_constante declaracao_de_tipo variaveis declaracao_de_funcoes_e_procendimentos corpo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)).value;
		 parser.liberaMemoria(); 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.nivel++; 
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$1",59, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 S_PROGRAM S_IDENTIF S_PONTOVG bloco S_PONTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)).value;
		 
        parser.mepa.append ("\tPARA\n\tFIM\n"); 
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        parser.mepa.append ("\tINPP\n");
        parser.iniciaTabSimb();
    
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          return CUP$sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)).value;
		RESULT = start_val;
              CUP$sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintatico$stack.elementAt(CUP$sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintatico$parser.done_parsing();
          return CUP$sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

